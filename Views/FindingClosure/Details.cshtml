@model CyberRiskApp.Models.FindingClosureRequest
@using Microsoft.AspNetCore.Identity
@inject UserManager<CyberRiskApp.Models.User> UserManager
@{
    ViewData["Title"] = $"Closure Request #{Model.Id}";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <!-- Header -->
            <div class="card shadow mb-4">
                <div class="card-header bg-success text-white">
                    <div class="row align-items-center">
                        <div class="col">
                            <h3 class="card-title mb-0">
                                <i class="fas fa-check-circle me-2"></i>Finding Closure Request
                            </h3>
                        </div>
                        <div class="col-auto">
                            <span class="badge bg-light text-dark fs-6">#@Model.Id</span>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <h5 class="fw-bold text-success mb-2">
                                Request to Close: @Model.LinkedFinding.FindingNumber
                            </h5>
                            <h6 class="text-muted mb-3">@Model.LinkedFinding.Title</h6>
                            <div class="d-flex gap-2 mb-3">
                                <span class="badge bg-@GetRiskColor(Model.LinkedFinding.RiskRating) fs-6">
                                    @Model.LinkedFinding.RiskRating Risk
                                </span>
                                <span class="badge bg-@GetStatusColor(Model.Status) fs-6">
                                    @GetStatusText(Model.Status)
                                </span>
                            </div>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="mb-2">
                                <strong>Requested by:</strong><br>
                                <i class="fas fa-user me-1"></i>@Model.Requester
                            </div>
                            <div class="mb-2">
                                <strong>Request Date:</strong><br>
                                <i class="fas fa-calendar me-1"></i>@Model.RequestDate.ToString("MMMM dd, yyyy")
                            </div>
                            @if (Model.RequestedClosureDate.HasValue)
                            {
                                <div class="mb-2">
                                    <strong>Target Closure:</strong><br>
                                    <i class="fas fa-clock me-1"></i>@Model.RequestedClosureDate.Value.ToString("MMMM dd, yyyy")
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Finding Information -->
            <div class="card shadow mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-exclamation-triangle me-2"></i>Finding Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold text-muted">Finding Number</label>
                                <p class="mb-0">
                                    <code class="text-primary fs-5">@Model.LinkedFinding.FindingNumber</code>
                                </p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold text-muted">Risk Rating</label>
                                <p class="mb-0">
                                    <span class="badge bg-@GetRiskColor(Model.LinkedFinding.RiskRating) fs-6">
                                        @Model.LinkedFinding.RiskRating
                                    </span>
                                </p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold text-muted">Owner</label>
                                <p class="mb-0">@Model.LinkedFinding.Owner</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold text-muted">Asset</label>
                                <p class="mb-0">@Model.LinkedFinding.Asset</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold text-muted">Domain</label>
                                <p class="mb-0">@Model.LinkedFinding.Domain</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold text-muted">Open Date</label>
                                <p class="mb-0">@Model.LinkedFinding.OpenDate.ToString("MMMM dd, yyyy")</p>
                            </div>
                        </div>
                    </div>

                    <div class="mt-3">
                        <label class="form-label fw-bold text-muted">Finding Details</label>
                        <div class="border rounded p-3 bg-light">
                            @Model.LinkedFinding.Details
                        </div>
                    </div>
                </div>
            </div>

            <!-- Closure Justification -->
            <div class="card shadow mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-clipboard-check me-2"></i>Closure Justification
                    </h5>
                </div>
                <div class="card-body">
                    <div class="border rounded p-3 bg-light">
                        @Html.Raw(Model.ClosureJustification.Replace("\n", "<br>"))
                    </div>
                </div>
            </div>

            <!-- Evidence Documentation -->
            @if (!string.IsNullOrEmpty(Model.EvidenceLinks))
            {
                <div class="card shadow mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-link me-2"></i>Evidence Documentation
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="border rounded p-3 bg-light">
                            @Html.Raw(Model.EvidenceLinks.Replace("\n", "<br>"))
                        </div>
                    </div>
                </div>
            }

            <!-- Additional Notes -->
            @if (!string.IsNullOrEmpty(Model.AdditionalNotes))
            {
                <div class="card shadow mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-sticky-note me-2"></i>Additional Notes
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="border rounded p-3 bg-light">
                            @Html.Raw(Model.AdditionalNotes.Replace("\n", "<br>"))
                        </div>
                    </div>
                </div>
            }

            <!-- Review Information -->
            @if (!string.IsNullOrEmpty(Model.ReviewedBy) || !string.IsNullOrEmpty(Model.ReviewComments))
            {
                <div class="card shadow mb-4">
                    <div class="card-header bg-@GetStatusColor(Model.Status) bg-opacity-10">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-user-check me-2"></i>Review Information
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(Model.ReviewedBy))
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label fw-bold text-muted">Reviewed By</label>
                                    <p class="mb-0">
                                        <i class="fas fa-user-check me-1"></i>@Model.ReviewedBy
                                    </p>
                                </div>
                                @if (Model.ReviewDate.HasValue)
                                {
                                    <div class="col-md-6">
                                        <label class="form-label fw-bold text-muted">Review Date</label>
                                        <p class="mb-0">
                                            <i class="fas fa-calendar me-1"></i>@Model.ReviewDate.Value.ToString("MMMM dd, yyyy")
                                        </p>
                                    </div>
                                }
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(Model.ReviewComments))
                        {
                            <div>
                                <label class="form-label fw-bold text-muted">Review Comments</label>
                                <div class="border rounded p-3 bg-@GetStatusColor(Model.Status) bg-opacity-10">
                                    @Html.Raw(Model.ReviewComments.Replace("\n", "<br>"))
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Action Buttons -->
            <div class="card shadow">
                <div class="card-body">
                    <div class="d-flex gap-3 flex-wrap">
                        @{
                            var currentUserId = UserManager.GetUserId(User);
                            var isAdmin = User.IsInRole("Admin");
                            var canReview = User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager") || User.IsInRole("Admin");
                            var isAssignedToCurrentUser = Model.AssignedToUserId == currentUserId;
                        }

                        @* Old workflow - Review pending requests *@
                        @if ((Model.Status == CyberRiskApp.Models.RequestStatus.Pending || 
                              Model.Status == CyberRiskApp.Models.RequestStatus.PendingApproval) && canReview)
                        {
                            <a asp-action="Review" asp-route-id="@Model.Id" class="btn btn-warning">
                                <i class="fas fa-clipboard-check me-2"></i>Review Request
                            </a>
                        }

                        @* New workflow - Complete assigned requests *@
                        @if (Model.Status == CyberRiskApp.Models.RequestStatus.InProgress)
                        {
                            @if (isAssignedToCurrentUser || isAdmin)
                            {
                                <a asp-action="Complete" asp-route-id="@Model.Id" 
                                   class="btn @(isAdmin ? "btn-danger" : "btn-success")">
                                    @if (isAdmin && !isAssignedToCurrentUser)
                                    {
                                        <i class="fas fa-shield-alt me-2"></i><span>Admin Override - Complete Request</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-check-circle me-2"></i><span>Complete Request</span>
                                    }
                                </a>
                            }
                            else if (canReview)
                            {
                                <div class="alert alert-info mb-0">
                                    <i class="fas fa-info-circle me-2"></i>
                                    This request is assigned to <strong>@(Model.AssignedToUser?.FullName ?? Model.AssignedToUserId)</strong> and can only be completed by them or an administrator.
                                </div>
                            }
                        }

                        @* Assignment info display *@
                        @if (!string.IsNullOrEmpty(Model.AssignedToUserId))
                        {
                            <div class="d-flex align-items-center">
                                <span class="badge bg-info me-2">
                                    <i class="fas fa-user me-1"></i>Assigned to: @(Model.AssignedToUser?.FullName ?? Model.AssignedToUserId)
                                </span>
                                @if (Model.AssignmentDate.HasValue)
                                {
                                    <small class="text-muted">
                                        on @Model.AssignmentDate.Value.ToString("MMM dd, yyyy")
                                    </small>
                                }
                            </div>
                        }

                        <a asp-controller="Findings" asp-action="Details" asp-route-id="@Model.FindingId" class="btn btn-info">
                            <i class="fas fa-eye me-2"></i>View Finding
                        </a>

                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-list me-2"></i>Back to Requests
                        </a>

                        <button class="btn btn-outline-primary" onclick="window.print()">
                            <i class="fas fa-print me-2"></i>Print
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetStatusColor(CyberRiskApp.Models.RequestStatus status)
    {
        return status switch
        {
            CyberRiskApp.Models.RequestStatus.Pending => "warning",
            CyberRiskApp.Models.RequestStatus.PendingApproval => "warning",
            CyberRiskApp.Models.RequestStatus.InProgress => "info",
            CyberRiskApp.Models.RequestStatus.Completed => "success",
            CyberRiskApp.Models.RequestStatus.Approved => "success",
            CyberRiskApp.Models.RequestStatus.Rejected => "danger",
            _ => "secondary"
        };
    }

    private string GetStatusText(CyberRiskApp.Models.RequestStatus status)
    {
        return status switch
        {
            CyberRiskApp.Models.RequestStatus.Pending => "Pending Review",
            CyberRiskApp.Models.RequestStatus.PendingApproval => "Pending Assignment",
            CyberRiskApp.Models.RequestStatus.InProgress => "In Progress",
            CyberRiskApp.Models.RequestStatus.Completed => "Completed",
            CyberRiskApp.Models.RequestStatus.Approved => "Approved",
            CyberRiskApp.Models.RequestStatus.Rejected => "Rejected",
            _ => "Unknown"
        };
    }

    private string GetRiskColor(CyberRiskApp.Models.RiskRating rating)
    {
        return rating switch
        {
            CyberRiskApp.Models.RiskRating.High => "danger",
            CyberRiskApp.Models.RiskRating.Medium => "warning",
            CyberRiskApp.Models.RiskRating.Low => "success",
            CyberRiskApp.Models.RiskRating.Critical => "dark",
            _ => "secondary"
        };
    }
}