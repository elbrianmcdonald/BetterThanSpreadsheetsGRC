@using CyberRiskApp.Extensions
@using CyberRiskApp.Models
@model CyberRiskApp.Models.ThreatModel

@{
    ViewData["Title"] = "Threat Model Details";
    var scenarios = ViewBag.Scenarios as IEnumerable<CyberRiskApp.Models.AttackScenario> ?? new List<CyberRiskApp.Models.AttackScenario>();
}

@*
*@

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header Section -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a asp-action="Index">Threat Modeling</a></li>
                            <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
                        </ol>
                    </nav>
                    <h2 class="text-primary mb-0">
                        <i class="fas fa-crosshairs me-2"></i>@Model.Name
                    </h2>
                    <p class="text-muted">Advanced MITRE ATT&CK & Kill Chain Threat Model</p>
                </div>
                <div>
                    @if (User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager") || User.IsInRole("Admin"))
                    {
                        <a asp-action="CreateScenario" asp-route-id="@Model.Id" class="btn btn-success me-2">
                            <i class="fas fa-chess me-2"></i>Create Attack Scenario
                        </a>
                        
                        <div class="btn-group me-2" role="group">
                            <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown">
                                <i class="fas fa-cogs me-2"></i>Manage
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" asp-action="Scenarios" asp-route-id="@Model.Id">
                                    <i class="fas fa-chess me-2"></i>Attack Scenarios
                                </a></li>
                                <li><a class="dropdown-item" asp-action="Techniques">
                                    <i class="fas fa-shield-alt me-2"></i>MITRE Techniques
                                </a></li>
                                <li><a class="dropdown-item" asp-action="LockheedTechniqueMapper" asp-route-id="@Model.Id">
                                    <i class="fas fa-sitemap me-2"></i>Lockheed Technique Mapper
                                </a></li>
                            </ul>
                        </div>
                        
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-secondary me-2">
                            <i class="fas fa-edit me-2"></i>Edit
                        </a>
                    }
                    <a asp-action="Index" class="btn btn-outline-primary">
                        <i class="fas fa-arrow-left me-2"></i>Back to List
                    </a>
                </div>
            </div>

            <!-- Status and Overview Cards -->
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card bg-primary text-white h-100">
                        <div class="card-body text-center">
                            <i class="fas fa-crosshairs fa-2x mb-2"></i>
                            <h4 class="card-title">@Model.Status</h4>
                            <p class="card-text">Threat Model Status</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-success text-white h-100">
                        <div class="card-body text-center">
                            <i class="fas fa-chess fa-2x mb-2"></i>
                            <h4 class="card-title">@scenarios.Count()</h4>
                            <p class="card-text">Attack Scenarios</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-info text-white h-100">
                        <div class="card-body text-center">
                            <i class="fas fa-sitemap fa-2x mb-2"></i>
                            <h4 class="card-title">Framework</h4>
                            <p class="card-text">MITRE ATT&CK + Lockheed</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Threat Model Information -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header bg-secondary text-white">
                            <h6 class="mb-0"><i class="fas fa-info-circle me-2"></i>Model Information</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>Asset:</strong> @Model.Asset
                                </div>
                                <div class="col-md-3">
                                    <strong>Owner:</strong> @Model.AssetOwner
                                </div>
                                <div class="col-md-3">
                                    <strong>Business Unit:</strong> @Model.BusinessUnit
                                </div>
                                <div class="col-md-3">
                                    <strong>Created:</strong> @Model.CreatedAt.ToString("MMM dd, yyyy")
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(Model.Description))
                            {
                                <div class="mt-3">
                                    <strong>Description:</strong>
                                    <p class="mb-0">@Model.Description</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>



            <!-- Attack Scenarios Flow Visualization -->
            @if (scenarios.Any())
            {
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                                <h6 class="mb-0"><i class="fas fa-chess me-2"></i>Attack Scenarios Flow</h6>
                                <span class="badge bg-light text-dark">@scenarios.Count() scenarios</span>
                            </div>
                            <div class="card-body">
                                @foreach (var scenario in scenarios.OrderByDescending(s => s.UpdatedAt))
                                {
                                    <div class="scenario-flow-container mb-5" data-scenario-id="@scenario.Id">
                                        <div class="scenario-header mb-3">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h5 class="mb-0">
                                                    <span class="badge bg-@GetScenarioStatusColor(scenario.Status) me-2">@scenario.Status</span>
                                                    @scenario.Name
                                                </h5>
                                                <div class="btn-group btn-group-sm">
                                                    <a href="@Url.Action("ScenarioBuilder", new { id = Model.Id, scenarioId = scenario.Id })" 
                                                       class="btn btn-outline-primary btn-sm" title="Edit Scenario">
                                                        <i class="fas fa-edit"></i> Edit
                                                    </a>
                                                    <a href="@Url.Action("ScenarioDetails", new { id = scenario.Id })" 
                                                       class="btn btn-outline-info btn-sm" title="View Details">
                                                        <i class="fas fa-eye"></i> Details
                                                    </a>
                                                    @if (User.IsInRole("Admin"))
                                                    {
                                                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                                                onclick="deleteScenario(@scenario.Id)" title="Delete Scenario">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                            @if (!string.IsNullOrEmpty(scenario.Description))
                                            {
                                                <p class="text-muted mt-2 mb-0">@scenario.Description</p>
                                            }
                                        </div>
                                        
                                        <!-- Kill Chain Flow Visualization -->
                                        <div class="kill-chain-flow" id="flow-@scenario.Id">
                                            <div class="text-center">
                                                <i class="fas fa-spinner fa-spin"></i> Loading attack flow...
                                            </div>
                                        </div>
                                    </div>
                                    
                                    @if (!scenarios.Last().Equals(scenario))
                                    {
                                        <hr class="my-4">
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Get Started Section -->
                <div class="row">
                    <div class="col-12">
                        <div class="card border-primary">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">
                                    <i class="fas fa-rocket me-2"></i>Get Started with Threat Modeling
                                </h5>
                            </div>
                            <div class="card-body text-center">
                                <p class="lead">Ready to model potential attack scenarios using MITRE ATT&CK and Lockheed Kill Chain frameworks?</p>
                                <a asp-action="CreateScenario" asp-route-id="@Model.Id" class="btn btn-success btn-lg">
                                    <i class="fas fa-chess me-2"></i>Create Your First Attack Scenario
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Technique Details Modal -->
<div class="modal fade" id="techniqueDetailsModal" tabindex="-1" aria-labelledby="techniqueDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="techniqueDetailsModalLabel">
                    <i class="fas fa-info-circle me-2"></i>Technique Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="techniqueDetailsContent">
                <!-- Content will be loaded dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetStatusBadgeClass(ScenarioStatus status)
    {
        return status switch
        {
            ScenarioStatus.Draft => "bg-secondary",
            ScenarioStatus.UnderReview => "bg-warning",
            ScenarioStatus.Approved => "bg-success",
            ScenarioStatus.Archived => "bg-dark",
            _ => "bg-secondary"
        };
    }
    
    string GetScenarioStatusColor(ScenarioStatus status)
    {
        return status switch
        {
            ScenarioStatus.Draft => "secondary",
            ScenarioStatus.UnderReview => "warning",
            ScenarioStatus.Approved => "success", 
            ScenarioStatus.Archived => "dark",
            _ => "secondary"
        };
    }
    
    string GetComplexityColor(CyberRiskApp.Models.AttackComplexity complexity)
    {
        return complexity switch
        {
            CyberRiskApp.Models.AttackComplexity.Low => "success",
            CyberRiskApp.Models.AttackComplexity.Medium => "warning",
            CyberRiskApp.Models.AttackComplexity.High => "danger",
            _ => "secondary"
        };
    }
}

@section Styles {
<style>
.card-header {
    border: none;
}

.border-danger { border-color: #dc3545 !important; }
.border-warning { border-color: #ffc107 !important; }
.border-info { border-color: #17a2b8 !important; }
.border-success { border-color: #28a745 !important; }

/* Flow Visualization Styles */
.scenario-flow-container {
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 20px;
    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
}

.scenario-header {
    border-bottom: 2px solid #e9ecef;
    padding-bottom: 15px;
}

.kill-chain-flow {
    min-height: 200px;
    position: relative;
    overflow-x: auto;
    padding: 20px 0;
}

.flow-stage {
    display: inline-block;
    margin: 0 15px;
    text-align: center;
    position: relative;
    vertical-align: top;
}

.flow-stage:not(:last-child)::after {
    content: '';
    position: absolute;
    top: 50%;
    right: -25px;
    width: 20px;
    height: 2px;
    background: linear-gradient(to right, #6c757d, #007bff);
    z-index: 1;
}

.flow-stage:not(:last-child)::before {
    content: '▶';
    position: absolute;
    top: 50%;
    right: -30px;
    transform: translateY(-50%);
    color: #007bff;
    font-size: 12px;
    z-index: 2;
}

.stage-header {
    background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
    color: white;
    padding: 8px 16px;
    border-radius: 6px 6px 0 0;
    font-weight: bold;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 0;
    min-width: 150px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.stage-techniques {
    background: white;
    border: 2px solid #6c757d;
    border-top: none;
    border-radius: 0 0 6px 6px;
    min-height: 120px;
    min-width: 150px;
    max-width: 200px;
    width: 180px;
    padding: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    overflow: hidden;
    box-sizing: border-box;
}

.technique-box {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 8px;
    margin-bottom: 8px;
    font-size: 11px;
    line-height: 1.3;
    position: relative;
    transition: all 0.2s ease;
    cursor: pointer;
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
    width: 100%;
    box-sizing: border-box;
}

.technique-box:hover {
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    border-color: #2196f3;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.15);
}

.technique-box:last-child {
    margin-bottom: 0;
}

.technique-name {
    font-weight: 600;
    color: #495057;
    margin-bottom: 3px;
    display: block;
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
}

.technique-description {
    color: #6c757d;
    font-size: 10px;
    line-height: 1.2;
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
}

.mitre-technique {
    border-left: 4px solid #4caf50;
}

.killchain-technique {
    border-left: 4px solid #ff9800;
}

.empty-stage {
    color: #6c757d;
    font-style: italic;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 80px;
    text-align: center;
    font-size: 12px;
}

/* Stage Colors */
.stage-reconnaissance .stage-header { background: linear-gradient(135deg, #17a2b8 0%, #138496 100%); }
.stage-reconnaissance .stage-techniques { border-color: #17a2b8; }

.stage-weaponization .stage-header { background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%); }
.stage-weaponization .stage-techniques { border-color: #ffc107; }

.stage-delivery .stage-header { background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); }
.stage-delivery .stage-techniques { border-color: #dc3545; }

.stage-exploitation .stage-header { background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); }
.stage-exploitation .stage-techniques { border-color: #007bff; }

.stage-installation .stage-header { background: linear-gradient(135deg, #6f42c1 0%, #59359a 100%); }
.stage-installation .stage-techniques { border-color: #6f42c1; }

.stage-commandandcontrol .stage-header { background: linear-gradient(135deg, #343a40 0%, #23272b 100%); }
.stage-commandandcontrol .stage-techniques { border-color: #343a40; }

.stage-actionsonobjectives .stage-header { background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%); }
.stage-actionsonobjectives .stage-techniques { border-color: #28a745; }

@@media (max-width: 768px) {
    .kill-chain-flow {
        white-space: nowrap;
    }
    
    .flow-stage {
        margin: 0 10px;
    }
    
    .stage-techniques {
        min-width: 120px;
        max-width: 140px;
        width: 130px;
    }
    
    .technique-box {
        font-size: 10px;
        padding: 6px;
    }
    
    .technique-name {
        font-size: 10px;
    }
    
    .technique-description {
        font-size: 9px;
        -webkit-line-clamp: 3;
    }
}
</style>
}

@section Scripts {
<script>
// Load attack scenario flows when page loads
$(document).ready(function() {
    $('.scenario-flow-container').each(function() {
        const scenarioId = $(this).data('scenario-id');
        loadScenarioFlow(scenarioId);
    });
});

function loadScenarioFlow(scenarioId) {
    const flowContainer = $('#flow-' + scenarioId);
    
    // Fetch scenario steps from API
    fetch(`/api/ThreatModeling/GetAttackScenarioSteps/${scenarioId}`)
        .then(response => response.json())
        .then(steps => {
            renderFlowVisualization(flowContainer, steps);
        })
        .catch(error => {
            console.error('Error loading scenario flow:', error);
            flowContainer.html('<div class="text-center text-muted"><i class="fas fa-exclamation-triangle"></i> Error loading attack flow</div>');
        });
}

function renderFlowVisualization(container, steps) {
    if (!steps || steps.length === 0) {
        container.html('<div class="text-center text-muted"><i class="fas fa-info-circle"></i> No techniques defined for this scenario</div>');
        return;
    }
    
    // Group steps by kill chain phase
    const phases = [
        { key: 'Reconnaissance', name: 'Reconnaissance', steps: [] },
        { key: 'Weaponization', name: 'Weaponization', steps: [] },
        { key: 'Delivery', name: 'Delivery', steps: [] },
        { key: 'Exploitation', name: 'Exploitation', steps: [] },
        { key: 'Installation', name: 'Installation', steps: [] },
        { key: 'CommandAndControl', name: 'Command & Control', steps: [] },
        { key: 'ActionsOnObjectives', name: 'Actions on Objectives', steps: [] }
    ];
    
    // Organize steps by phase
    steps.forEach(step => {
        if (step.killChainActivity && step.killChainActivity.phase) {
            const phaseKey = step.killChainActivity.phase;
            const phase = phases.find(p => p.key === phaseKey);
            if (phase) {
                phase.steps.push(step);
            }
        } else if (step.mitreTechnique) {
            // For MITRE techniques without kill chain mapping, try to infer phase or put in general category
            phases[0].steps.push(step); // Default to reconnaissance for unmapped MITRE techniques
        }
    });
    
    // Build HTML
    let html = '<div class="d-flex justify-content-start align-items-start" style="white-space: nowrap;">';
    
    phases.forEach((phase, index) => {
        const phaseClass = 'stage-' + phase.key.toLowerCase();
        
        html += `
            <div class="flow-stage ${phaseClass}">
                <div class="stage-header">${phase.name}</div>
                <div class="stage-techniques">`;
        
        if (phase.steps.length === 0) {
            html += '<div class="empty-stage">No techniques</div>';
        } else {
            phase.steps.forEach(step => {
                const isKillChain = step.killChainActivity != null;
                const techniqueClass = isKillChain ? 'killchain-technique' : 'mitre-technique';
                
                let techniqueName, techniqueDesc;
                
                if (isKillChain) {
                    techniqueName = step.killChainActivity.name || 'Custom Technique';
                    techniqueDesc = step.killChainActivity.description || step.description || '';
                } else if (step.mitreTechnique) {
                    techniqueName = step.mitreTechnique.name || step.mitreTechnique.techniqueId || 'MITRE Technique';
                    techniqueDesc = step.mitreTechnique.description || step.description || '';
                } else {
                    techniqueName = 'Technique';
                    techniqueDesc = step.description || '';
                }
                
                // Truncate description if too long
                if (techniqueDesc.length > 80) {
                    techniqueDesc = techniqueDesc.substring(0, 80) + '...';
                }
                
                html += `
                    <div class="technique-box ${techniqueClass}" title="${techniqueDesc}" onclick="showTechniqueDetails(${JSON.stringify(step).replace(/"/g, '&quot;')})">
                        <span class="technique-name">${techniqueName}</span>
                        <div class="technique-description">${techniqueDesc}</div>
                    </div>`;
            });
        }
        
        html += '</div></div>';
    });
    
    html += '</div>';
    
    container.html(html);
}

function showTechniqueDetails(step) {
    const modalTitle = document.getElementById('techniqueDetailsModalLabel');
    const modalContent = document.getElementById('techniqueDetailsContent');
    
    let techniqueType = '';
    let techniqueName = '';
    let techniqueId = '';
    let description = '';
    let additionalInfo = '';
    
    if (step.killChainActivity) {
        // Kill Chain Activity
        techniqueType = 'Kill Chain Activity';
        techniqueName = step.killChainActivity.name;
        techniqueId = `KC-${step.killChainActivity.id}`;
        description = step.killChainActivity.description;
        
        additionalInfo = `
            <div class="row">
                <div class="col-md-6">
                    <h6><i class="fas fa-layer-group me-2"></i>Phase</h6>
                    <p class="text-muted">${step.killChainActivity.phase.replace(/([A-Z])/g, ' $1').trim()}</p>
                </div>
                <div class="col-md-6">
                    <h6><i class="fas fa-chart-line me-2"></i>Complexity</h6>
                    <p class="text-muted">${step.killChainActivity.complexity}</p>
                </div>
            </div>
            ${step.killChainActivity.environmentType ? `
            <div class="mb-3">
                <h6><i class="fas fa-server me-2"></i>Environment Type</h6>
                <p class="text-muted">${step.killChainActivity.environmentType}</p>
            </div>` : ''}
        `;
    } else if (step.mitreTechnique) {
        // MITRE ATT&CK Technique
        techniqueType = 'MITRE ATT&CK Technique';
        techniqueName = step.mitreTechnique.name;
        techniqueId = step.mitreTechnique.techniqueId;
        description = step.mitreTechnique.description;
        
        additionalInfo = `
            <div class="row">
                <div class="col-md-6">
                    <h6><i class="fas fa-bullseye me-2"></i>Tactic</h6>
                    <p class="text-muted">${step.mitreTechnique.tactic}</p>
                </div>
                <div class="col-md-6">
                    <h6><i class="fas fa-hashtag me-2"></i>Technique ID</h6>
                    <p class="text-muted">${step.mitreTechnique.techniqueId}</p>
                </div>
            </div>
        `;
    } else {
        // Generic technique
        techniqueType = 'Custom Technique';
        techniqueName = step.name || 'Unnamed Technique';
        description = step.description || 'No description available.';
    }
    
    // Update modal title
    modalTitle.innerHTML = `<i class="fas fa-info-circle me-2"></i>${techniqueName}`;
    
    // Update modal content
    modalContent.innerHTML = `
        <div class="technique-details">
            <div class="mb-3">
                <span class="badge bg-${step.killChainActivity ? 'warning' : 'success'} mb-2">${techniqueType}</span>
                ${techniqueId ? `<span class="badge bg-secondary mb-2 ms-2">${techniqueId}</span>` : ''}
            </div>
            
            <div class="mb-3">
                <h6><i class="fas fa-align-left me-2"></i>Description</h6>
                <p class="text-muted">${description}</p>
            </div>
            
            ${additionalInfo}
            
            ${step.detectionMethods ? `
            <div class="mb-3">
                <h6><i class="fas fa-search me-2"></i>Detection Methods</h6>
                <p class="text-muted">${step.detectionMethods}</p>
            </div>` : ''}
            
            <div class="mb-3">
                <h6><i class="fas fa-list-ol me-2"></i>Step Information</h6>
                <div class="row">
                    <div class="col-md-6">
                        <small class="text-muted">Step Number:</small>
                        <p class="text-muted mb-1">#${step.stepNumber}</p>
                    </div>
                    <div class="col-md-6">
                        <small class="text-muted">Kill Chain Phase:</small>
                        <p class="text-muted mb-1">${step.killChainPhase?.replace(/([A-Z])/g, ' $1').trim() || 'Not specified'}</p>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('techniqueDetailsModal'));
    modal.show();
}

function deleteScenario(scenarioId) {
    if (confirm('Are you sure you want to delete this attack scenario? This action cannot be undone.')) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '@Url.Action("DeleteScenario")';
        
        const idInput = document.createElement('input');
        idInput.type = 'hidden';
        idInput.name = 'id';
        idInput.value = scenarioId;
        form.appendChild(idInput);
        
        const tokenInput = document.createElement('input');
        tokenInput.type = 'hidden';
        tokenInput.name = '__RequestVerificationToken';
        tokenInput.value = $('input[name="__RequestVerificationToken"]').val();
        form.appendChild(tokenInput);
        
        document.body.appendChild(form);
        form.submit();
    }
}
</script>
}