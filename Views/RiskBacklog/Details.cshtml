@model CyberRiskApp.ViewModels.BacklogDetailsViewModel
@{
    ViewData["Title"] = $"Backlog Entry - {Model.Entry.BacklogNumber}";
}

@Html.AntiForgeryToken()

<div class="container-fluid">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="RiskBacklog" asp-action="Index">Risk & Finding Workflow</a></li>
                    <li class="breadcrumb-item active">@Model.Entry.BacklogNumber</li>
                </ol>
            </nav>
            <h2><i class="fas fa-inbox me-2 text-primary"></i>@Model.Entry.BacklogNumber</h2>
            <p class="text-muted mb-0">@Model.Entry.ActionType - @Model.Entry.Priority Priority</p>
            
            @if (User.IsInRole("ITUser"))
            {
                <div class="alert alert-info mt-2 mb-0 p-2">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-eye me-2"></i>
                        <small>
                            <strong>View-Only Access:</strong> You can view this entry but cannot make changes. Contact GRC team for modifications.
                        </small>
                    </div>
                </div>
            }
        </div>
        
        <!-- DEBUG INFO - Shows values for troubleshooting approve button visibility -->
        @if (User.IsInRole("Admin"))
        {
            <div class="alert alert-info mt-2 mb-2">
                <strong>üêõ DEBUG INFO (Admin Only):</strong><br/>
                <small>
                    <strong>Model.CanApprove:</strong> @Model.CanApprove<br/>
                    <strong>Entry.Status:</strong> @Model.Entry.Status (@((int)Model.Entry.Status))<br/>
                    <strong>User Roles:</strong> @string.Join(", ", User.Claims.Where(c => c.Type == "role" || c.Type == System.Security.Claims.ClaimTypes.Role).Select(c => c.Value))<br/>
                    <strong>User ID:</strong> @User.Identity.Name<br/>
                    <strong>AssignedToAnalyst:</strong> @(Model.Entry.AssignedToAnalyst ?? "null")<br/>
                    <strong>AssignedToManager:</strong> @(Model.Entry.AssignedToManager ?? "null")<br/>
                    <strong>IsITUser:</strong> @(User.IsInRole("ITUser"))<br/>
                    <strong>Status Check:</strong> @(Model.Entry.Status == CyberRiskApp.Models.RiskBacklogStatus.Unassigned || Model.Entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToAnalyst || Model.Entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToManager)
                </small>
            </div>
        }
        
        <div class="d-flex gap-2">
            <a asp-controller="RiskBacklog" asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i>Back to Backlog
            </a>
        </div>
    </div>


    <!-- Main Content Row -->
    <div class="row">
        <!-- Left Column - Entry Details -->
        <div class="col-lg-8">
            <!-- Entry Information -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0"><i class="fas fa-info-circle me-2"></i>Entry Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label text-muted">Status</label>
                                <div>
                                    <span class="badge bg-@(Model.Entry.Status switch 
                                    { 
                                        CyberRiskApp.Models.RiskBacklogStatus.Unassigned => "secondary",
                                        CyberRiskApp.Models.RiskBacklogStatus.AssignedToAnalyst => "primary", 
                                        CyberRiskApp.Models.RiskBacklogStatus.AssignedToManager => "info",
                                        CyberRiskApp.Models.RiskBacklogStatus.Approved => "success",
                                        CyberRiskApp.Models.RiskBacklogStatus.Rejected => "danger",
                                        CyberRiskApp.Models.RiskBacklogStatus.Escalated => "warning",
                                        _ => "secondary"
                                    }) fs-6">@Model.Entry.Status</span>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted">Priority</label>
                                <div>
                                    <span class="badge bg-@(Model.Entry.Priority switch 
                                    { 
                                        CyberRiskApp.Models.BacklogPriority.Low => "secondary",
                                        CyberRiskApp.Models.BacklogPriority.Medium => "primary", 
                                        CyberRiskApp.Models.BacklogPriority.High => "warning",
                                        CyberRiskApp.Models.BacklogPriority.Critical => "danger",
                                        _ => "secondary"
                                    }) fs-6">@Model.Entry.Priority</span>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted">Action Type</label>
                                <div>
                                    <span class="badge bg-info fs-6">@Model.Entry.ActionType</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label text-muted">Current Assignee</label>
                                <div>
                                    @{
                                        var currentAssignee = Model.Entry.GetCurrentAssignee();
                                        var assigneeName = Model.AvailableAnalysts.FirstOrDefault(a => a.Id == currentAssignee)?.FullName ??
                                                          Model.AvailableManagers.FirstOrDefault(m => m.Id == currentAssignee)?.FullName ??
                                                          currentAssignee;
                                    }
                                    @if (!string.IsNullOrEmpty(assigneeName) && assigneeName != "Unassigned")
                                    {
                                        <span class="badge bg-primary">@assigneeName</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Unassigned</span>
                                    }
                                </div>
                            </div>
                            @if (Model.Entry.DueDate.HasValue)
                            {
                                <div class="mb-3">
                                    <label class="form-label text-muted">Due Date</label>
                                    <div class="@(Model.Entry.IsOverdue() ? "text-danger fw-bold" : "")">
                                        @Model.Entry.DueDate.Value.ToString("MMMM dd, yyyy 'at' HH:mm")
                                        @if (Model.Entry.IsOverdue())
                                        {
                                            <i class="fas fa-exclamation-triangle ms-1"></i>
                                            <small class="text-danger">(Overdue)</small>
                                        }
                                    </div>
                                </div>
                            }
                            <div class="mb-3">
                                <label class="form-label text-muted">Requested By</label>
                                <div>
                                    @{
                                        var requesterName = Model.AvailableAnalysts.FirstOrDefault(a => a.Id == Model.Entry.RequesterUserId)?.FullName ??
                                                          Model.AvailableManagers.FirstOrDefault(m => m.Id == Model.Entry.RequesterUserId)?.FullName ??
                                                          Model.Entry.RequesterUserId;
                                    }
                                    <span class="fw-semibold">@requesterName</span>
                                </div>
                                <small class="text-muted">@Model.Entry.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label text-muted">Description</label>
                        <div class="p-3 bg-light rounded">
                            @Model.Entry.RequestDescription
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(Model.Entry.RequestJustification))
                    {
                        <div class="mb-3">
                            <label class="form-label text-muted">Justification</label>
                            <div class="p-3 bg-light rounded">
                                @Model.Entry.RequestJustification
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Source Risk Assessment -->
            @if (Model.Entry.Risk?.LinkedAssessment != null)
            {
                <div class="card mb-4 border-info">
                    <div class="card-header bg-info text-white">
                        <h5 class="card-title mb-0"><i class="fas fa-clipboard-list me-2"></i>Source Risk Assessment</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h6 class="mb-2">
                                    <a asp-controller="RiskAssessments" asp-action="Details" asp-route-id="@Model.Entry.Risk.LinkedAssessment.Id" class="text-decoration-none">
                                        @Model.Entry.Risk.LinkedAssessment.Title
                                        <i class="fas fa-external-link-alt ms-2"></i>
                                    </a>
                                </h6>
                                <p class="text-muted mb-2 small">@Model.Entry.Risk.LinkedAssessment.Description</p>
                                <div class="row">
                                    <div class="col-md-6">
                                        <small class="text-muted">Assessment Type:</small>
                                        <div><span class="badge bg-secondary">@Model.Entry.Risk.LinkedAssessment.AssessmentType</span></div>
                                    </div>
                                    <div class="col-md-6">
                                        <small class="text-muted">Assessment Status:</small>
                                        <div>
                                            <span class="badge bg-@(Model.Entry.Risk.LinkedAssessment.Status switch 
                                            { 
                                                CyberRiskApp.Models.AssessmentStatus.Draft => "secondary",
                                                CyberRiskApp.Models.AssessmentStatus.InProgress => "warning", 
                                                CyberRiskApp.Models.AssessmentStatus.Completed => "success",
                                                CyberRiskApp.Models.AssessmentStatus.Approved => "primary",
                                                _ => "secondary"
                                            })">@Model.Entry.Risk.LinkedAssessment.Status</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 text-end">
                                <div class="mb-2">
                                    <small class="text-muted">Date Completed:</small>
                                    <div>@(Model.Entry.Risk.LinkedAssessment.DateCompleted?.ToString("MMM dd, yyyy") ?? "In Progress")</div>
                                </div>
                                <a asp-controller="RiskAssessments" asp-action="Details" asp-route-id="@Model.Entry.Risk.LinkedAssessment.Id" class="btn btn-outline-info btn-sm">
                                    <i class="fas fa-eye me-1"></i>View Full Assessment
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Related Risk Information -->
            @if (Model.Entry.Risk != null)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><i class="fas fa-shield-alt me-2"></i>Related Risk - Detailed Analysis</h5>
                    </div>
                    <div class="card-body">
                        <!-- Risk Overview -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label text-muted">Risk Identification</label>
                                    <div class="p-3 bg-light rounded">
                                        <div class="mb-2">
                                            <strong>Risk ID:</strong> 
                                            <a asp-controller="Risks" asp-action="Details" asp-route-id="@Model.Entry.Risk.Id" class="text-decoration-none">
                                                @Model.Entry.Risk.RiskNumber <i class="fas fa-external-link-alt ms-1 small"></i>
                                            </a>
                                        </div>
                                        <div class="mb-2">
                                            <strong>Title:</strong> @Model.Entry.Risk.Title
                                        </div>
                                        <div class="mb-2">
                                            <strong>Current Status:</strong> 
                                            <span class="badge bg-@(Model.Entry.Risk.Status switch 
                                            { 
                                                CyberRiskApp.Models.RiskStatus.UnderReview => "warning",
                                                CyberRiskApp.Models.RiskStatus.Open => "danger", 
                                                CyberRiskApp.Models.RiskStatus.Closed => "success",
                                                CyberRiskApp.Models.RiskStatus.Accepted => "primary",
                                                _ => "secondary"
                                            })">@Model.Entry.Risk.Status</span>
                                        </div>
                                        @if (Model.Entry.Risk.NextReviewDate.HasValue)
                                        {
                                            <div class="mb-2">
                                                <strong>Next Review:</strong> @Model.Entry.Risk.NextReviewDate.Value.ToString("MMM dd, yyyy")
                                                @if (Model.Entry.Risk.NextReviewDate.Value < DateTime.UtcNow)
                                                {
                                                    <span class="badge bg-warning ms-1">Overdue</span>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label text-muted">Risk Assessment</label>
                                    <div class="p-3 bg-light rounded">
                                        <div class="mb-2">
                                            <strong>Inherent Risk Level:</strong> 
                                            <span class="badge bg-@(Model.Entry.Risk.InherentRiskLevel switch 
                                            { 
                                                CyberRiskApp.Models.RiskLevel.Low => "success",
                                                CyberRiskApp.Models.RiskLevel.Medium => "warning", 
                                                CyberRiskApp.Models.RiskLevel.High => "danger",
                                                CyberRiskApp.Models.RiskLevel.Critical => "dark",
                                                _ => "secondary"
                                            }) fs-6">@Model.Entry.Risk.InherentRiskLevel</span>
                                        </div>
                                        @if (Model.Entry.Risk.ResidualRiskLevel != Model.Entry.Risk.InherentRiskLevel)
                                        {
                                            <div class="mb-2">
                                                <strong>Residual Risk Level:</strong> 
                                                <span class="badge bg-@(Model.Entry.Risk.ResidualRiskLevel switch 
                                                { 
                                                    CyberRiskApp.Models.RiskLevel.Low => "success",
                                                    CyberRiskApp.Models.RiskLevel.Medium => "warning", 
                                                    CyberRiskApp.Models.RiskLevel.High => "danger",
                                                    CyberRiskApp.Models.RiskLevel.Critical => "dark",
                                                    _ => "secondary"
                                                }) fs-6">@Model.Entry.Risk.ResidualRiskLevel</span>
                                            </div>
                                        }
                                        <div class="mb-2">
                                            <strong>Treatment Strategy:</strong> 
                                            <span class="badge bg-info">@Model.Entry.Risk.Treatment</span>
                                        </div>
                                        @if (Model.Entry.Risk.LinkedAssessment != null)
                                        {
                                            <div class="mb-0">
                                                <strong>Source Assessment:</strong> 
                                                <a asp-controller="RiskAssessments" asp-action="Details" asp-route-id="@Model.Entry.Risk.LinkedAssessment.Id" class="text-decoration-none">
                                                    @Model.Entry.Risk.LinkedAssessment.Title <i class="fas fa-external-link-alt ms-1 small"></i>
                                                </a>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Business Context -->
                        @if (!string.IsNullOrEmpty(Model.Entry.Risk.Description) || !string.IsNullOrEmpty(Model.Entry.BusinessUnit) || !string.IsNullOrEmpty(Model.Entry.BusinessOwner))
                        {
                            <div class="mb-4">
                                <h6 class="text-muted mb-3"><i class="fas fa-building me-2"></i>Business Context</h6>
                                <div class="row">
                                    @if (!string.IsNullOrEmpty(Model.Entry.Risk.Description))
                                    {
                                        <div class="col-12 mb-3">
                                            <label class="form-label text-muted small">Risk Description</label>
                                            <div class="p-2 bg-light rounded small">@Model.Entry.Risk.Description</div>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.Entry.BusinessUnit))
                                    {
                                        <div class="col-md-4 mb-2">
                                            <label class="form-label text-muted small">Business Unit</label>
                                            <div><span class="badge bg-secondary">@Model.Entry.BusinessUnit</span></div>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.Entry.BusinessOwner))
                                    {
                                        <div class="col-md-4 mb-2">
                                            <label class="form-label text-muted small">Business Owner</label>
                                            <div>@Model.Entry.BusinessOwner</div>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.Entry.Asset))
                                    {
                                        <div class="col-md-4 mb-2">
                                            <label class="form-label text-muted small">Affected Asset</label>
                                            <div>@Model.Entry.Asset</div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Decision Impact Analysis -->
                        <div class="alert alert-light border">
                            <h6 class="alert-heading text-primary"><i class="fas fa-lightbulb me-2"></i>Decision Impact Analysis</h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <strong class="text-success">If Approved:</strong>
                                    <ul class="mb-0 mt-1 small">
                                        @if (Model.Entry.ActionType == CyberRiskApp.Models.RiskBacklogAction.NewRisk)
                                        {
                                            <li>Risk will be added to the official risk register</li>
                                            <li>Risk owner will be assigned and notified</li>
                                            <li>Treatment plan implementation will begin</li>
                                        }
                                        @if (Model.Entry.ActionType == CyberRiskApp.Models.RiskBacklogAction.RiskAcceptance)
                                        {
                                            <li>Risk will be formally accepted</li>
                                            <li>No further mitigation required</li>
                                            <li>Regular review cycles will continue</li>
                                        }
                                        @if (Model.Entry.ActionType == CyberRiskApp.Models.RiskBacklogAction.RiskReassessment)
                                        {
                                            <li>Risk assessment will be updated</li>
                                            <li>Risk level may change</li>
                                            <li>Treatment strategy may be revised</li>
                                        }
                                        <li>Compliance with risk management framework maintained</li>
                                    </ul>
                                </div>
                                <div class="col-md-6">
                                    <strong class="text-warning">If Rejected:</strong>
                                    <ul class="mb-0 mt-1 small">
                                        <li>Request will be returned to requester</li>
                                        <li>Additional justification may be required</li>
                                        @if (Model.Entry.Risk.InherentRiskLevel >= CyberRiskApp.Models.RiskLevel.High)
                                        {
                                            <li class="text-danger">High/Critical risk may remain unaddressed</li>
                                        }
                                        <li>SLA timers may be reset</li>
                                        <li>Process workflow will be delayed</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Finding Information -->
            @if (Model.Entry.IsFindingWorkflow())
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><i class="fas fa-search me-2"></i>Finding Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label text-muted">Finding Title</label>
                                    <div class="p-2 bg-light rounded">
                                        @(Model.Entry.FindingTitle ?? "Unnamed Finding")
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(Model.Entry.FindingSource))
                                {
                                    <div class="mb-3">
                                        <label class="form-label text-muted">Source</label>
                                        <div>
                                            <span class="badge bg-success">@Model.Entry.FindingSource</span>
                                        </div>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(Model.Entry.Asset))
                                {
                                    <div class="mb-3">
                                        <label class="form-label text-muted">Asset</label>
                                        <div>@Model.Entry.Asset</div>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(Model.Entry.Domain))
                                {
                                    <div class="mb-3">
                                        <label class="form-label text-muted">Domain</label>
                                        <div>@Model.Entry.Domain</div>
                                    </div>
                                }
                            </div>
                            <div class="col-md-6">
                                @if (Model.Entry.RiskRating.HasValue)
                                {
                                    <div class="mb-3">
                                        <label class="form-label text-muted">Risk Rating</label>
                                        <div>
                                            <span class="badge bg-@(Model.Entry.RiskRating.Value switch 
                                            { 
                                                CyberRiskApp.Models.RiskRating.Low => "secondary",
                                                CyberRiskApp.Models.RiskRating.Medium => "primary", 
                                                CyberRiskApp.Models.RiskRating.High => "warning",
                                                CyberRiskApp.Models.RiskRating.Critical => "danger",
                                                _ => "secondary"
                                            }) fs-6">@Model.Entry.RiskRating</span>
                                        </div>
                                    </div>
                                }
                                <div class="row">
                                    @if (Model.Entry.Impact.HasValue)
                                    {
                                        <div class="col-4">
                                            <div class="mb-3">
                                                <label class="form-label text-muted small">Impact</label>
                                                <div>
                                                    <span class="badge bg-info">@Model.Entry.Impact</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.Entry.Likelihood.HasValue)
                                    {
                                        <div class="col-4">
                                            <div class="mb-3">
                                                <label class="form-label text-muted small">Likelihood</label>
                                                <div>
                                                    <span class="badge bg-info">@Model.Entry.Likelihood</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.Entry.Exposure.HasValue)
                                    {
                                        <div class="col-4">
                                            <div class="mb-3">
                                                <label class="form-label text-muted small">Exposure</label>
                                                <div>
                                                    <span class="badge bg-info">@Model.Entry.Exposure</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                @if (!string.IsNullOrEmpty(Model.Entry.BusinessUnit))
                                {
                                    <div class="mb-3">
                                        <label class="form-label text-muted">Business Unit</label>
                                        <div>@Model.Entry.BusinessUnit</div>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(Model.Entry.BusinessOwner))
                                {
                                    <div class="mb-3">
                                        <label class="form-label text-muted">Business Owner</label>
                                        <div>@Model.Entry.BusinessOwner</div>
                                    </div>
                                }
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.Entry.FindingDetails))
                        {
                            <div class="mt-3">
                                <label class="form-label text-muted">Finding Details</label>
                                <div class="p-3 bg-light rounded">
                                    @Model.Entry.FindingDetails
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Comments Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0"><i class="fas fa-comments me-2"></i>Comments (@Model.Comments.Count)</h5>
                </div>
                <div class="card-body">
                    @if (Model.Comments.Any())
                    {
                        <div class="comments-list">
                            @foreach (var comment in Model.Comments.OrderBy(c => c.CreatedAt))
                            {
                                <div class="comment mb-3 p-3 @(comment.IsInternal ? "bg-warning bg-opacity-10 border-warning" : "bg-light") rounded">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <div>
                                            <strong>@comment.CreatedBy</strong>
                                            <span class="badge bg-info ms-2">@comment.CommentType</span>
                                            @if (comment.IsInternal)
                                            {
                                                <span class="badge bg-warning ms-1">Internal</span>
                                            }
                                        </div>
                                        <small class="text-muted">@comment.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</small>
                                    </div>
                                    <div>@comment.Comment</div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No comments yet.</p>
                    }

                    @if (Model.CanComment)
                    {
                        <hr>
                        <form asp-action="AddComment" method="post">
                            <input type="hidden" name="backlogId" value="@Model.Entry.Id" />
                            <div class="mb-3">
                                <label class="form-label">Add Comment</label>
                                <textarea name="comment" class="form-control" rows="3" required></textarea>
                            </div>
                            @if (User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))
                            {
                                <div class="form-check mb-3">
                                    <input type="checkbox" name="isInternal" value="true" class="form-check-input" id="isInternal">
                                    <label class="form-check-label" for="isInternal">
                                        Internal comment (not visible to requester)
                                    </label>
                                </div>
                            }
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-plus me-1"></i>Add Comment
                            </button>
                        </form>
                    }
                </div>
            </div>

            <!-- Activity Timeline -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0"><i class="fas fa-history me-2"></i>Activity Timeline</h5>
                </div>
                <div class="card-body">
                    @if (Model.Activities.Any())
                    {
                        <div class="timeline">
                            @foreach (var activity in Model.Activities.OrderByDescending(a => a.CreatedAt))
                            {
                                <div class="timeline-item mb-3">
                                    <div class="d-flex">
                                        <div class="timeline-marker me-3">
                                            <i class="fas fa-@(activity.ActivityType switch 
                                            { 
                                                "Created" => "plus-circle text-success",
                                                "Assigned" => "user-plus text-primary", 
                                                "Approved" => "check-circle text-success",
                                                "Rejected" => "times-circle text-danger",
                                                "Escalated" => "exclamation-triangle text-warning",
                                                "PriorityChanged" => "flag text-info",
                                                _ => "circle text-secondary"
                                            })"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <div class="d-flex justify-content-between">
                                                <div>
                                                    <strong>@activity.ActivityType</strong>
                                                    @if (!string.IsNullOrEmpty(activity.AdditionalDetails))
                                                    {
                                                        <span class="text-muted">- @activity.AdditionalDetails</span>
                                                    }
                                                </div>
                                                <small class="text-muted">@activity.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</small>
                                            </div>
                                            <small class="text-muted">by @activity.CreatedBy</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No activity recorded yet.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column - Actions -->
        <div class="col-lg-4">
            <!-- Decision Summary Card -->
            @if (Model.CanApprove && (Model.Entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToAnalyst || Model.Entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToManager))
            {
                <div class="card mb-4 border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title mb-0"><i class="fas fa-gavel me-2"></i>Decision Center</h5>
                    </div>
                    <div class="card-body">
                        <!-- Risk Assessment Quick View -->
                        @if (Model.Entry.Risk != null)
                        {
                            <div class="alert alert-light mb-3">
                                <h6 class="mb-2"><i class="fas fa-chart-line me-2"></i>Risk Profile</h6>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span>Risk Level:</span>
                                    <span class="badge bg-@(Model.Entry.Risk.InherentRiskLevel switch 
                                    { 
                                        CyberRiskApp.Models.RiskLevel.Low => "success",
                                        CyberRiskApp.Models.RiskLevel.Medium => "warning", 
                                        CyberRiskApp.Models.RiskLevel.High => "danger",
                                        CyberRiskApp.Models.RiskLevel.Critical => "dark",
                                        _ => "secondary"
                                    })">@Model.Entry.Risk.InherentRiskLevel</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span>Treatment:</span>
                                    <span class="badge bg-info">@Model.Entry.Risk.Treatment</span>
                                </div>
                                @if (!string.IsNullOrEmpty(Model.Entry.BusinessUnit))
                                {
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>Business Unit:</span>
                                        <span class="badge bg-secondary">@Model.Entry.BusinessUnit</span>
                                    </div>
                                }
                            </div>
                        }


                        <!-- Quick Decision Actions -->
                        @if (Model.CanApprove && (Model.Entry.Status == CyberRiskApp.Models.RiskBacklogStatus.Unassigned || 
                                                  Model.Entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToAnalyst || 
                                                  Model.Entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToManager))
                        {
                            <div class="d-grid gap-2">
                                <button type="button" class="btn btn-success" onclick="showApproveModal(@Model.Entry.Id)">
                                    <i class="fas fa-check me-1"></i>Approve with Comments
                                </button>
                                <button type="button" class="btn btn-warning" onclick="showRejectModal(@Model.Entry.Id)">
                                    <i class="fas fa-times me-1"></i>Request Changes
                                </button>
                                <button type="button" class="btn btn-outline-danger" onclick="showEscalateModal(@Model.Entry.Id)">
                                    <i class="fas fa-exclamation-triangle me-1"></i>Escalate
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }


            <!-- Entry Summary -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0"><i class="fas fa-chart-pie me-2"></i>Summary</h5>
                </div>
                <div class="card-body">
                    <div class="mb-2">
                        <small class="text-muted">Entry ID:</small>
                        <div>@Model.Entry.BacklogNumber</div>
                    </div>
                    <div class="mb-2">
                        <small class="text-muted">Created:</small>
                        <div>@Model.Entry.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</div>
                    </div>
                    <div class="mb-2">
                        <small class="text-muted">Last Updated:</small>
                        <div>@Model.Entry.UpdatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</div>
                    </div>
                    @if (Model.Entry.AssignedDate.HasValue)
                    {
                        <div class="mb-2">
                            <small class="text-muted">Assigned:</small>
                            <div>@Model.Entry.AssignedDate.Value.ToString("MMM dd, yyyy 'at' HH:mm")</div>
                        </div>
                    }
                    @if (Model.Entry.CompletedDate.HasValue)
                    {
                        <div class="mb-2">
                            <small class="text-muted">Completed:</small>
                            <div>@Model.Entry.CompletedDate.Value.ToString("MMM dd, yyyy 'at' HH:mm")</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Approval Modal -->
<div class="modal fade" id="approveModal" tabindex="-1" aria-labelledby="approveModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="approveModalLabel">
                    <i class="fas fa-check-circle me-2"></i>Approve Entry
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-success">
                    <h6 class="alert-heading">Approval Impact</h6>
                    <p class="mb-0">Approving this entry will:</p>
                    <ul class="mb-0 mt-2">
                        <li id="approval-impact-list">
                            <!-- Impact will be populated based on entry type -->
                        </li>
                    </ul>
                </div>
                <div class="mb-3">
                    <label for="approvalJustification" class="form-label">Approval Justification <span class="text-danger">*</span></label>
                    <textarea class="form-control" id="approvalJustification" rows="4" required 
                              placeholder="Please provide justification for approving this entry. Include any relevant business context, risk considerations, or approval criteria..."></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label">Common Approval Justifications</label>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="meets-criteria" id="approve1">
                                <label class="form-check-label small" for="approve1">
                                    Meets all approval criteria
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="acceptable-risk" id="approve2">
                                <label class="form-check-label small" for="approve2">
                                    Risk level is acceptable
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="adequate-controls" id="approve3">
                                <label class="form-check-label small" for="approve3">
                                    Adequate controls in place
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="business-approved" id="approve4">
                                <label class="form-check-label small" for="approve4">
                                    Business stakeholders approved
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="compliance-aligned" id="approve5">
                                <label class="form-check-label small" for="approve5">
                                    Aligns with compliance requirements
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="sla-compliant" id="approve6">
                                <label class="form-check-label small" for="approve6">
                                    Within SLA timeframes
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="confirmApproval()">
                    <i class="fas fa-check me-1"></i>Confirm Approval
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1" aria-labelledby="rejectModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="rejectModalLabel">
                    <i class="fas fa-times-circle me-2"></i>Request Changes
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <h6 class="alert-heading">Rejection Impact</h6>
                    <p class="mb-0">Rejecting this request will:</p>
                    <ul class="mb-0 mt-2">
                        <li>Return the request to the requester</li>
                        <li>Reset SLA timers</li>
                        <li>Require additional justification or changes</li>
                        <li>Delay risk management process</li>
                    </ul>
                </div>
                <div class="mb-3">
                    <label for="rejectionReason" class="form-label">Reason for Rejection <span class="text-danger">*</span></label>
                    <textarea class="form-control" id="rejectionReason" rows="4" required 
                              placeholder="Please provide a detailed reason for rejecting this entry. Be specific about what changes are needed..."></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label">Common Rejection Reasons</label>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="insufficient-justification" id="reason1">
                                <label class="form-check-label small" for="reason1">
                                    Insufficient justification
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="missing-information" id="reason2">
                                <label class="form-check-label small" for="reason2">
                                    Missing required information
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="risk-level-inappropriate" id="reason3">
                                <label class="form-check-label small" for="reason3">
                                    Risk level inappropriate
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="business-impact-unclear" id="reason4">
                                <label class="form-check-label small" for="reason4">
                                    Business impact unclear
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="alternative-required" id="reason5">
                                <label class="form-check-label small" for="reason5">
                                    Alternative approach required
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="stakeholder-consultation" id="reason6">
                                <label class="form-check-label small" for="reason6">
                                    Additional stakeholder consultation needed
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="confirmRejection()">
                    <i class="fas fa-times-circle me-1"></i>Request Changes
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Escalation Modal -->
<div class="modal fade" id="escalateModal" tabindex="-1" aria-labelledby="escalateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="escalateModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Escalate Request
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <h6 class="alert-heading">Escalation Notice</h6>
                    <p class="mb-0">This request will be escalated to senior management for review due to:</p>
                </div>
                <div class="mb-3">
                    <label for="escalationReason" class="form-label">Escalation Reason <span class="text-danger">*</span></label>
                    <textarea class="form-control" id="escalationReason" rows="3" required 
                              placeholder="Explain why this request requires escalation..."></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label">Escalation Category</label>
                    <select class="form-select" id="escalationCategory">
                        <option value="">Select reason...</option>
                        <option value="high-risk">High/Critical Risk Level</option>
                        <option value="policy-exception">Policy Exception Required</option>
                        <option value="significant-impact">Significant Business Impact</option>
                        <option value="regulatory-concern">Regulatory Concern</option>
                        <option value="resource-constraint">Resource Constraint</option>
                        <option value="stakeholder-conflict">Stakeholder Conflict</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmEscalation()">
                    <i class="fas fa-exclamation-triangle me-1"></i>Escalate
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentEntryId = null;


    // Show Escalation Modal
    function showEscalateModal(entryId) {
        currentEntryId = entryId;
        document.getElementById('escalationReason').value = '';
        document.getElementById('escalationCategory').value = '';
        const modal = new bootstrap.Modal(document.getElementById('escalateModal'));
        modal.show();
    }



    // Confirm Escalation
    async function confirmEscalation() {
        const reason = document.getElementById('escalationReason').value.trim();
        const category = document.getElementById('escalationCategory').value;
        
        if (!reason) {
            toastr.error('Please provide an escalation reason.');
            return;
        }

        try {
            const response = await fetch(`/RiskBacklog/Escalate/${currentEntryId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({ 
                    reason: reason,
                    category: category 
                })
            });

            const result = await response.json();
            
            if (result.success) {
                toastr.warning('Request escalated successfully.');
                bootstrap.Modal.getInstance(document.getElementById('escalateModal')).hide();
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                toastr.error(result.message || 'Failed to escalate request.');
            }
        } catch (error) {
            console.error('Error escalating request:', error);
            toastr.error('An error occurred while escalating the request.');
        }
    }

    // Enhanced Rejection Handling
    function showRejectModal(entryId) {
        currentEntryId = entryId;
        document.getElementById('rejectionReason').value = '';
        // Clear all checkboxes
        document.querySelectorAll('#rejectModal input[type="checkbox"]').forEach(cb => cb.checked = false);
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
    }

    // Auto-populate rejection reason based on selected checkboxes
    document.addEventListener('DOMContentLoaded', function() {
        const checkboxes = document.querySelectorAll('#rejectModal input[type="checkbox"]');
        const reasonTextarea = document.getElementById('rejectionReason');
        
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const checkedReasons = Array.from(checkboxes)
                    .filter(cb => cb.checked)
                    .map(cb => cb.nextElementSibling.textContent.trim());
                
                if (checkedReasons.length > 0) {
                    const currentText = reasonTextarea.value.trim();
                    const newText = checkedReasons.join(', ') + (currentText ? '. ' + currentText : '');
                    reasonTextarea.value = newText;
                }
            });
        });
    });

    // Approve Risk Assessment
    async function approveRiskAssessment(entryId) {
        if (!confirm('Are you sure you want to approve this risk assessment? This will update its status and may trigger additional workflows.')) {
            return;
        }

        try {
            const response = await fetch(`/RiskBacklog/ApproveRiskAssessment/${entryId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            });

            const result = await response.json();
            
            if (result.success) {
                toastr.success('Risk assessment approved successfully!');
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                toastr.error(result.message || 'Failed to approve risk assessment.');
            }
        } catch (error) {
            console.error('Error approving risk assessment:', error);
            toastr.error('An error occurred while approving the risk assessment.');
        }
    }

    // Approve and Add to Risk Register
    async function approveAndAddToRegister(entryId) {
        if (!confirm('Are you sure you want to approve this risk and add it to the risk register? This action cannot be undone.')) {
            return;
        }

        try {
            const response = await fetch(`/RiskBacklog/ApproveAndAddToRegister/${entryId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            });

            const result = await response.json();
            
            if (result.success) {
                toastr.success('Risk approved and added to register successfully!');
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                toastr.error(result.message || 'Failed to approve and add risk to register.');
            }
        } catch (error) {
            console.error('Error approving and adding to register:', error);
            toastr.error('An error occurred while processing the approval.');
        }
    }

    // Show Rejection Modal
    function showRejectModal(entryId) {
        currentEntryId = entryId;
        document.getElementById('rejectionReason').value = '';
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
    }

    // Confirm Rejection
    async function confirmRejection() {
        const reason = document.getElementById('rejectionReason').value.trim();
        
        if (!reason) {
            toastr.error('Please provide a reason for rejection.');
            return;
        }

        try {
            const response = await fetch(`/RiskBacklog/RejectEntry/${currentEntryId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({ reason: reason })
            });

            const result = await response.json();
            
            if (result.success) {
                toastr.success('Entry rejected successfully.');
                bootstrap.Modal.getInstance(document.getElementById('rejectModal')).hide();
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                toastr.error(result.message || 'Failed to reject entry.');
            }
        } catch (error) {
            console.error('Error rejecting entry:', error);
            toastr.error('An error occurred while rejecting the entry.');
        }
    }

    // Show Approval Modal
    function showApproveModal(entryId) {
        console.log('showApproveModal called with entryId:', entryId);
        currentEntryId = entryId;
        console.log('currentEntryId set to:', currentEntryId);
        
        document.getElementById('approvalJustification').value = '';
        
        // Clear all checkboxes
        document.querySelectorAll('#approveModal input[type="checkbox"]').forEach(cb => cb.checked = false);
        
        // Set approval impact based on entry type
        updateApprovalImpact();
        
        const modal = new bootstrap.Modal(document.getElementById('approveModal'));
        modal.show();
    }

    // Update approval impact text based on entry type
    function updateApprovalImpact() {
        const entryType = '@Model.Entry.ActionType';
        const impactList = document.getElementById('approval-impact-list');
        let impacts = [];

        switch(entryType) {
            case 'AssessmentApproval':
                impacts = [
                    'Add identified risks to the risk register',
                    'Update assessment status to Approved',
                    'Trigger risk management workflows',
                    'Generate risk register entries for tracking'
                ];
                break;
            case 'NewRisk':
                impacts = [
                    'Add the risk to the official risk register',
                    'Assign risk owner and tracking details',
                    'Start SLA tracking for risk management',
                    'Make risk visible to business stakeholders'
                ];
                break;
            case 'RiskAcceptance':
                impacts = [
                    'Accept the risk with documented justification',
                    'Update risk status to Accepted',
                    'Set acceptance expiration date',
                    'Notify relevant stakeholders'
                ];
                break;
            case 'FindingClosure':
                impacts = [
                    'Close the finding as resolved',
                    'Update finding status to Closed',
                    'Archive finding documentation',
                    'Remove from active monitoring'
                ];
                break;
            default:
                impacts = [
                    'Process the request as approved',
                    'Update entry status',
                    'Complete the associated workflow',
                    'Notify relevant parties'
                ];
        }

        impactList.innerHTML = impacts.map(impact => `<li>${impact}</li>`).join('');
    }

    // Auto-populate approval justification based on selected checkboxes
    document.addEventListener('DOMContentLoaded', function() {
        const approveCheckboxes = document.querySelectorAll('#approveModal input[type="checkbox"]');
        const approveTextarea = document.getElementById('approvalJustification');
        
        approveCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const checkedReasons = Array.from(approveCheckboxes)
                    .filter(cb => cb.checked)
                    .map(cb => cb.nextElementSibling.textContent.trim());
                
                if (checkedReasons.length > 0) {
                    const currentText = approveTextarea.value.trim();
                    const newText = checkedReasons.join(', ') + (currentText ? '. ' + currentText : '');
                    approveTextarea.value = newText;
                }
            });
        });
    });

    // Confirm Approval
    async function confirmApproval() {
        console.log('confirmApproval() called');
        console.log('currentEntryId:', currentEntryId);
        
        const justification = document.getElementById('approvalJustification').value.trim();
        console.log('justification:', justification);
        
        if (!justification) {
            toastr.error('Please provide justification for approval.');
            return;
        }

        try {
            const url = `/RiskBacklog/ApproveEntryJson`;
            console.log('Fetching URL:', url);
            
            // Create form data
            const formData = new FormData();
            formData.append('entryId', currentEntryId);
            formData.append('comments', justification);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');
            
            console.log('Form data:', {
                entryId: currentEntryId,
                comments: justification
            });
            
            const response = await fetch(url, {
                method: 'POST',
                body: formData
            });

            console.log('Response status:', response.status);
            const result = await response.json();
            console.log('Response result:', result);
            
            if (result.success) {
                toastr.success(result.message || 'Entry approved successfully.');
                bootstrap.Modal.getInstance(document.getElementById('approveModal')).hide();
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                toastr.error(result.error || 'Failed to approve entry.');
            }
        } catch (error) {
            console.error('Error approving entry:', error);
            toastr.error('An error occurred while approving the entry.');
        }
    }
</script>

<style>
    .timeline-marker {
        width: 20px;
        text-align: center;
    }
    
    .timeline-item {
        position: relative;
    }
    
    .timeline-item:not(:last-child)::after {
        content: '';
        position: absolute;
        left: 9px;
        top: 20px;
        bottom: -15px;
        width: 2px;
        background: #dee2e6;
    }
    
    .comment {
        border-left: 3px solid #007bff;
    }
    
    .comment.bg-warning {
        border-left-color: #ffc107;
    }
</style>