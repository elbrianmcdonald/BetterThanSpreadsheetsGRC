@model CyberRiskApp.ViewModels.BacklogDashboardViewModel
@{
    ViewData["Title"] = "Risk & Finding Workflow Dashboard";

    // Helper function to get user display name from ID
    string GetUserDisplayName(string userId)
    {
        if (string.IsNullOrEmpty(userId)) return "Unassigned";
        
        var user = Model.AvailableAnalysts.FirstOrDefault(a => a.Id == userId) ?? 
                   Model.AvailableManagers.FirstOrDefault(m => m.Id == userId);
        
        return user != null ? $"{user.FirstName} {user.LastName}" : userId;
    }
}

@Html.AntiForgeryToken()

<div class="container-fluid">
    <!-- Enhanced Header with Navigation Context -->
    <div class="mb-4">
        <!-- Breadcrumb Navigation -->
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a asp-controller="Dashboard" asp-action="Index" class="text-decoration-none">
                        <i class="fas fa-home me-1"></i>Home Dashboard
                    </a>
                </li>
                <li class="breadcrumb-item">
                    <a asp-controller="Risks" asp-action="Index" class="text-decoration-none">
                        <i class="fas fa-bullseye me-1"></i>Risk Management
                    </a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">
                    <i class="fas fa-tasks me-1"></i>Risk & Finding Workflow
                </li>
            </ol>
        </nav>

        <!-- Main Header -->
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2><i class="fas fa-inbox me-2 text-primary"></i>Risk & Finding Workflow Dashboard</h2>
                <p class="text-muted mb-0">Centralized triage queue for risk and finding management workflows</p>
            </div>
            <div class="btn-toolbar" role="toolbar">
                <!-- Quick Navigation -->
                <div class="btn-group me-2" role="group" aria-label="Quick Navigation">
                    <a asp-controller="Dashboard" asp-action="Index" class="btn btn-outline-secondary" title="Return to main dashboard">
                        <i class="fas fa-home me-1"></i>Dashboard
                    </a>
                    <a asp-controller="Risks" asp-action="Index" class="btn btn-outline-secondary" title="View risk register">
                        <i class="fas fa-clipboard-list me-1"></i>Risk Register
                    </a>
                    <a asp-controller="RiskAssessments" asp-action="Index" class="btn btn-outline-secondary" title="View risk assessments">
                        <i class="fas fa-chart-bar me-1"></i>Assessments
                    </a>
                </div>

                <!-- Action Buttons -->
                <div class="btn-group" role="group" aria-label="Actions">
                    @if (Model.CanAssign)
                    {
                        <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#bulkActionsModal" title="Perform bulk operations">
                            <i class="fas fa-tasks me-1"></i>Bulk Actions
                        </button>
                    }
                    <a asp-controller="RiskBacklog" asp-action="Reports" class="btn btn-outline-info" title="View detailed reports">
                        <i class="fas fa-chart-bar me-1"></i>Reports
                    </a>
                    @if (User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager") || User.IsInRole("Admin"))
                    {
                        <button class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#createFindingModal" title="Create new finding entry">
                            <i class="fas fa-plus me-1"></i>New Finding
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (User.IsInRole("Admin"))
    {
        <!-- Admin Overview Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-danger">
                    <div class="card-header bg-danger text-white">
                        <h5 class="mb-0"><i class="fas fa-shield-alt me-2"></i>Admin Overview</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3 class="text-danger">@((ViewBag.OrphanedCount ?? 0))</h3>
                                    <small>Orphaned Entries<br/><span class="text-muted">(RiskId = null)</span></small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3 class="text-warning">@((ViewBag.StuckCount ?? 0))</h3>
                                    <small>Stuck in Workflow<br/><span class="text-muted">(&gt;7 days assigned)</span></small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3 class="text-info">@((ViewBag.RecentErrors ?? 0))</h3>
                                    <small>Recent Errors<br/><span class="text-muted">(Last 24h)</span></small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3 class="text-success">@((ViewBag.SystemHealth ?? 100))%</h3>
                                    <small>System Health<br/><span class="text-muted">Score</span></small>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="btn-group" role="group">
                                    <a href="@Url.Action("SystemHealth")" class="btn btn-outline-info btn-sm">
                                        <i class="fas fa-heartbeat me-1"></i>System Health
                                    </a>
                                    <a href="@Url.Action("AdminWorkflow")" class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-sitemap me-1"></i>Workflow Pipeline
                                    </a>
                                    <button type="button" class="btn btn-outline-success btn-sm" onclick="testBacklogCreation()">
                                        <i class="fas fa-vial me-1"></i>Test Backlog Creation
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Enhanced Statistics Cards with Finding/Risk Breakdown -->
    <div class="row mb-4">
        <!-- Total Entries -->
        <div class="col-lg-3 col-md-6 mb-3">
            <a asp-action="Index" asp-route-filter="all" class="text-decoration-none">
                <div class="metric-card bg-primary clickable-metric @((ViewBag.CurrentFilter == "all" || string.IsNullOrEmpty(ViewBag.CurrentFilter as string)) ? "active-filter" : "")">
                    <div class="metric-icon">
                        <i class="fas fa-inbox"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@Model.Statistics.TotalEntries</div>
                        <div class="metric-label">Total Entries</div>
                        <small class="metric-hint">
                            <i class="fas fa-mouse-pointer me-1"></i>Click to view all
                            <div class="metric-breakdown mt-1">
                                <span class="badge badge-finding me-1">üîç @(Model.Statistics.TotalFindings)</span>
                                <span class="badge badge-risk">‚ö†Ô∏è @(Model.Statistics.TotalRisks)</span>
                            </div>
                        </small>
                    </div>
                    @if ((ViewBag.CurrentFilter == "all" || string.IsNullOrEmpty(ViewBag.CurrentFilter as string)) && string.IsNullOrEmpty(ViewBag.CurrentStatus as string))
                    {
                        <div class="filter-indicator"></div>
                    }
                </div>
            </a>
        </div>

        <!-- Findings Only -->
        <div class="col-lg-3 col-md-6 mb-3">
            <a asp-action="Index" asp-route-filter="findings" class="text-decoration-none">
                <div class="metric-card bg-info clickable-metric @(ViewBag.CurrentFilter == "findings" ? "active-filter" : "")">
                    <div class="metric-icon">
                        üîç
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@(Model.Statistics.TotalFindings)</div>
                        <div class="metric-label">Findings</div>
                        <small class="metric-hint">
                            <i class="fas fa-mouse-pointer me-1"></i>Click to view findings only
                        </small>
                    </div>
                    @if (ViewBag.CurrentFilter == "findings")
                    {
                        <div class="filter-indicator"></div>
                    }
                </div>
            </a>
        </div>

        <!-- Risks Only -->
        <div class="col-lg-3 col-md-6 mb-3">
            <a asp-action="Index" asp-route-filter="risks" class="text-decoration-none">
                <div class="metric-card bg-warning clickable-metric @(ViewBag.CurrentFilter == "risks" ? "active-filter" : "")">
                    <div class="metric-icon">
                        ‚ö†Ô∏è
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@(Model.Statistics.TotalRisks)</div>
                        <div class="metric-label">Risks</div>
                        <small class="metric-hint">
                            <i class="fas fa-mouse-pointer me-1"></i>Click to view risks only
                        </small>
                    </div>
                    @if (ViewBag.CurrentFilter == "risks")
                    {
                        <div class="filter-indicator"></div>
                    }
                </div>
            </a>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-3">
            <a asp-action="Index" asp-route-status="Unassigned" class="text-decoration-none">
                <div class="metric-card bg-warning clickable-metric @(ViewBag.CurrentStatus == "Unassigned" ? "active-filter" : "")">
                    <div class="metric-icon">
                        <i class="fas fa-user-clock"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@Model.Statistics.Unassigned</div>
                        <div class="metric-label">Unassigned</div>
                        <small class="metric-hint">
                            <i class="fas fa-mouse-pointer me-1"></i>Click to view unassigned
                        </small>
                    </div>
                    @if (ViewBag.CurrentStatus == "Unassigned")
                    {
                        <div class="filter-indicator"></div>
                    }
                </div>
            </a>
        </div>

        <div class="col-lg-3 col-md-6 mb-3">
            <a asp-action="Index" asp-route-filter="overdue" class="text-decoration-none">
                <div class="metric-card bg-danger clickable-metric @(ViewBag.CurrentFilter == "overdue" ? "active-filter" : "")">
                    <div class="metric-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@Model.Statistics.OverdueSLA</div>
                        <div class="metric-label">Overdue SLA</div>
                        <small class="metric-hint">
                            <i class="fas fa-mouse-pointer me-1"></i>Click to view overdue
                        </small>
                    </div>
                    @if (ViewBag.CurrentFilter == "overdue")
                    {
                        <div class="filter-indicator"></div>
                    }
                </div>
            </a>
        </div>

        <div class="col-lg-3 col-md-6 mb-3">
            <a asp-action="Index" asp-route-filter="completed-this-week" class="text-decoration-none">
                <div class="metric-card bg-success clickable-metric @(ViewBag.CurrentFilter == "completed-this-week" ? "active-filter" : "")">
                    <div class="metric-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="metric-content">
                        <div class="metric-value">@Model.Statistics.CompletedThisWeek</div>
                        <div class="metric-label">Completed This Week</div>
                        <small class="metric-hint">
                            <i class="fas fa-mouse-pointer me-1"></i>Click to view completed
                        </small>
                    </div>
                    @if (ViewBag.CurrentFilter == "completed-this-week")
                    {
                        <div class="filter-indicator"></div>
                    }
                </div>
            </a>
        </div>
    </div>

    <!-- Enhanced SLA Status Breakdown -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-clock me-2"></i>SLA Status Overview
                        <small class="ms-2 opacity-75">Real-time tracking of service level agreements</small>
                    </h6>
                </div>
                <div class="card-body py-3">
                    <div class="row g-2" id="slaStatusBreakdown">
                        <!-- SLA Status widgets will be loaded here via JavaScript -->
                        <div class="col text-center">
                            <div class="d-flex align-items-center justify-content-center">
                                <div class="spinner-border spinner-border-sm text-info me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <small class="text-muted">Loading SLA status...</small>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <div class="progress" style="height: 8px;">
                                <div class="progress-bar bg-danger" style="width: 0%" id="slaOverdueBar"></div>
                                <div class="progress-bar bg-warning" style="width: 0%" id="slaDueSoonBar"></div>
                                <div class="progress-bar bg-info" style="width: 0%" id="slaApproachingBar"></div>
                                <div class="progress-bar bg-success" style="width: 0%" id="slaOnTrackBar"></div>
                            </div>
                            <div class="d-flex justify-content-between mt-1">
                                <small class="text-danger">Overdue</small>
                                <small class="text-warning">Due Soon</small>
                                <small class="text-info">Approaching</small>
                                <small class="text-success">On Track</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Active Filter Status -->
    @{
        var hasActiveFilter = !string.IsNullOrEmpty(ViewBag.CurrentFilter as string) || 
                             !string.IsNullOrEmpty(ViewBag.CurrentStatus as string) || 
                             !string.IsNullOrEmpty(ViewBag.CurrentAction as string);
        var filterDescription = "";
        
        if (!string.IsNullOrEmpty(ViewBag.CurrentStatus as string))
        {
            filterDescription = $"Status: {ViewBag.CurrentStatus}";
        }
        else if (!string.IsNullOrEmpty(ViewBag.CurrentFilter as string))
        {
            filterDescription = ViewBag.CurrentFilter switch 
            {
                "overdue" => "Showing: Overdue SLA entries",
                "completed-this-week" => "Showing: Completed this week",
                "all" => "Showing: All entries",
                _ => $"Filter: {ViewBag.CurrentFilter}"
            };
        }
        else if (!string.IsNullOrEmpty(ViewBag.CurrentAction as string))
        {
            filterDescription = $"Action: {ViewBag.CurrentAction}";
        }
    }

    @if (hasActiveFilter && !string.IsNullOrEmpty(filterDescription))
    {
        <div class="row mb-3">
            <div class="col-12">
                <div class="alert alert-info d-flex justify-content-between align-items-center">
                    <div>
                        <i class="fas fa-filter me-2"></i>
                        <strong>Active Filter:</strong> @filterDescription
                        <small class="text-muted ms-2">(@Model.AllEntries.Count() entries shown)</small>
                    </div>
                    <a asp-action="Index" class="btn btn-outline-secondary btn-sm">
                        <i class="fas fa-times me-1"></i>Clear Filter
                    </a>
                </div>
            </div>
        </div>
    }

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0"><i class="fas fa-filter me-2"></i>Filters</h5>
        </div>
        <div class="card-body">
            <form method="get" asp-action="Index">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Status</label>
                        <select name="status" class="form-select">
                            <option value="">All Statuses</option>
                            <option value="Unassigned">Unassigned</option>
                            <option value="AssignedToAnalyst">Assigned to Analyst</option>
                            <option value="AssignedToManager">Assigned to Manager</option>
                            <option value="Approved">Approved</option>
                            <option value="Rejected">Rejected</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Action Type</label>
                        <select name="action" class="form-select">
                            <option value="">All Actions</option>
                            <optgroup label="Risk Actions">
                                <option value="NewRisk">New Risk</option>
                                <option value="RiskAcceptance">Risk Acceptance</option>
                                <option value="RiskExtension">Risk Extension</option>
                                <option value="RiskReview">Risk Review</option>
                                <option value="RiskReassessment">Risk Reassessment</option>
                            </optgroup>
                            <optgroup label="Finding Actions">
                                <option value="NewFinding">New Finding</option>
                                <option value="FindingReview">Finding Review</option>
                                <option value="FindingClosure">Finding Closure</option>
                            </optgroup>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Priority</label>
                        <select name="priority" class="form-select">
                            <option value="">All Priorities</option>
                            <option value="Low">Low</option>
                            <option value="Medium">Medium</option>
                            <option value="High">High</option>
                            <option value="Critical">Critical</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">&nbsp;</label>
                        <div class="d-flex">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="fas fa-search me-1"></i>Filter
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                                <i class="fas fa-times me-1"></i>Clear
                            </a>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- My Backlog Section -->
    @if (Model.MyBacklogEntries.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0"><i class="fas fa-user me-2"></i>My Assignments (@Model.MyBacklogEntries.Count)</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Backlog #</th>
                                <th>Action</th>
                                <th>Priority</th>
                                <th>Description</th>
                                <th>Source</th>
                                <th>SLA Status</th>
                                <th>Aging</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entry in Model.MyBacklogEntries)
                            {
                                <tr class="@(entry.IsOverdue() ? "table-danger" : "")">
                                    <td>
                                        <a asp-action="Details" asp-route-id="@entry.Id" class="fw-bold">
                                            @entry.BacklogNumber
                                        </a>
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@entry.ActionType</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-@(entry.Priority switch 
                                        { 
                                            CyberRiskApp.Models.BacklogPriority.Low => "secondary",
                                            CyberRiskApp.Models.BacklogPriority.Medium => "primary", 
                                            CyberRiskApp.Models.BacklogPriority.High => "warning",
                                            CyberRiskApp.Models.BacklogPriority.Critical => "danger",
                                            _ => "secondary"
                                        })">@entry.Priority</span>
                                    </td>
                                    <td>
                                        <div class="text-truncate" style="max-width: 300px;" title="@entry.RequestDescription">
                                            @entry.RequestDescription
                                        </div>
                                    </td>
                                    <td>
                                        @if (entry.IsFindingWorkflow())
                                        {
                                            <div>
                                                <span class="badge bg-success">Finding Workflow</span>
                                                <br><small class="text-muted">@entry.FindingSource</small>
                                            </div>
                                        }
                                        else if (entry.Risk?.LinkedAssessment != null)
                                        {
                                            <div>
                                                <span class="badge bg-info">Assessment</span>
                                                <br><small class="text-muted">@entry.Risk.LinkedAssessment.Title</small>
                                            </div>
                                        }
                                        else if (entry.Risk?.LinkedFinding != null)
                                        {
                                            <div>
                                                <span class="badge bg-warning">Finding</span>
                                                <br><small class="text-muted">@entry.Risk.LinkedFinding.FindingNumber</small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Manual</span>
                                        }
                                    </td>
                                    <td>
                                        <!-- SLA Status with visual indicators -->
                                        <div class="d-flex align-items-center">
                                            <span class="me-1">@entry.GetSLAIcon()</span>
                                            <span class="@entry.GetSLAStatusBadgeClass()">@entry.GetSLAStatus()</span>
                                            @if (entry.RequiresEscalation())
                                            {
                                                <span class="ms-2 text-danger" title="@entry.GetEscalationReason()">
                                                    <i class="fas fa-exclamation-triangle"></i>
                                                </span>
                                            }
                                        </div>
                                        @if (entry.DueDate.HasValue)
                                        {
                                            <small class="text-muted d-block">Due: @entry.DueDate.Value.ToString("MMM dd")</small>
                                        }
                                    </td>
                                    <td>
                                        <!-- Aging Information -->
                                        <div class="text-center">
                                            <span class="@(entry.GetDaysOverdue() > 0 ? "text-danger fw-bold" : (entry.GetDaysOld() > 7 ? "text-warning" : "text-muted"))">
                                                @entry.GetAgingDisplayText()
                                            </span>
                                            <small class="text-muted d-block">(@entry.GetDaysOld() days old)</small>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-@(entry.Status switch 
                                        { 
                                            CyberRiskApp.Models.RiskBacklogStatus.Unassigned => "secondary",
                                            CyberRiskApp.Models.RiskBacklogStatus.AssignedToAnalyst => "primary", 
                                            CyberRiskApp.Models.RiskBacklogStatus.AssignedToManager => "info",
                                            CyberRiskApp.Models.RiskBacklogStatus.Approved => "success",
                                            CyberRiskApp.Models.RiskBacklogStatus.Rejected => "danger",
                                            _ => "secondary"
                                        })">@entry.Status</span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <a asp-action="Details" asp-route-id="@entry.Id" class="btn btn-outline-primary btn-sm">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            @if (Model.CanApprove && (entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToAnalyst || entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToManager))
                                            {
                                                <a asp-action="Details" asp-route-id="@entry.Id" class="btn btn-outline-success btn-sm">
                                                    <i class="fas fa-check"></i>
                                                </a>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <!-- Unassigned Entries (Managers Only) -->
    @if (Model.CanAssign && Model.UnassignedEntries.Any())
    {
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0"><i class="fas fa-user-times me-2"></i>Unassigned Entries (@Model.UnassignedEntries.Count)</h5>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#quickAssignModal" title="Quick Assign Selected">
                        <i class="fas fa-bolt me-1"></i>Quick Assign
                    </button>
                    <button class="btn btn-outline-secondary" onclick="toggleDetailedView()" id="viewToggle" title="Toggle detailed view">
                        <i class="fas fa-expand me-1"></i>Expand All
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <!-- Simplified List View -->
                <div id="simpleView">
                    @foreach (var entry in Model.UnassignedEntries.Take(10))
                    {
                        <div class="assignment-item p-3 border-bottom @entry.GetRowClass()" data-entry-id="@entry.Id" data-entry-type="@(entry.IsFindingWorkflow() ? "finding" : "risk")">
                            <div class="d-flex align-items-start gap-3">
                                <!-- Checkbox -->
                                <div class="flex-shrink-0 pt-1">
                                    <input type="checkbox" name="selectedEntries" value="@entry.Id" class="form-check-input entry-checkbox">
                                </div>
                                
                                <!-- Type Icon -->
                                <div class="flex-shrink-0 pt-1">
                                    <span class="type-icon fs-4">@entry.GetTypeIcon()</span>
                                </div>
                                
                                <!-- Entry Info -->
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <div>
                                            <h6 class="mb-1">
                                                <span class="badge @entry.GetTypeBadgeClass() me-2">@entry.GetTypeDisplayName()</span>
                                                <a asp-action="Details" asp-route-id="@entry.Id" class="text-decoration-none fw-bold">
                                                    @entry.BacklogNumber
                                                </a>
                                                <span class="priority-badge">@entry.GetPriorityIcon()</span>
                                                <span class="badge bg-@(entry.Priority switch 
                                                { 
                                                    CyberRiskApp.Models.BacklogPriority.Low => "secondary",
                                                    CyberRiskApp.Models.BacklogPriority.Medium => "primary", 
                                                    CyberRiskApp.Models.BacklogPriority.High => "warning",
                                                    CyberRiskApp.Models.BacklogPriority.Critical => "danger",
                                                    _ => "secondary"
                                                }) ms-1">@entry.Priority</span>
                                            </h6>
                                            <small class="text-muted">
                                                <i class="fas fa-calendar me-1"></i>@entry.CreatedAt.ToString("MMM dd, yyyy")
                                                <span class="mx-2">‚Ä¢</span>
                                                <i class="fas fa-user me-1"></i>@entry.CreatedBy
                                                <span class="mx-2">‚Ä¢</span>
                                                <span class="badge badge-outline">@entry.GetSourceDescription()</span>
                                            </small>
                                        </div>
                                    </div>
                                    
                                    <!-- Description -->
                                    <div class="description-content mb-2">
                                        <p class="mb-1 text-body"><strong>@entry.GetTitle()</strong></p>
                                        <p class="mb-1 text-muted">@entry.GetDescription()</p>
                                        <div class="d-flex flex-wrap gap-1">
                                            <span class="badge badge-status">@entry.GetStatusDisplayName()</span>
                                            @if (entry.IsFindingWorkflow())
                                            {
                                                <span class="badge bg-success text-white">
                                                    <i class="fas fa-search me-1"></i>@entry.FindingSource
                                                </span>
                                                @if (entry.RiskRating.HasValue)
                                                {
                                                    <span class="badge bg-@(entry.RiskRating.Value switch 
                                                    { 
                                                        CyberRiskApp.Models.RiskRating.Low => "secondary",
                                                        CyberRiskApp.Models.RiskRating.Medium => "primary", 
                                                        CyberRiskApp.Models.RiskRating.High => "warning",
                                                        CyberRiskApp.Models.RiskRating.Critical => "danger",
                                                        _ => "secondary"
                                                    })">@entry.RiskRating Risk</span>
                                                }
                                            }
                                            else if (entry.Risk?.LinkedAssessment != null)
                                            {
                                                <span class="badge bg-light text-dark">
                                                    <i class="fas fa-chart-bar me-1"></i>@entry.Risk.LinkedAssessment.Title
                                                </span>
                                            }
                                            else if (entry.Risk?.LinkedFinding != null)
                                            {
                                                <span class="badge bg-warning text-dark">
                                                    <i class="fas fa-exclamation-triangle me-1"></i>@entry.Risk.LinkedFinding.FindingNumber
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    
                                    <!-- Assignment Controls -->
                                    <div class="assignment-controls-simple">
                                        <div class="d-flex gap-2 align-items-center">
                                            <select class="form-select form-select-sm analyst-select" data-entry-id="@entry.Id" style="max-width: 200px;">
                                                <option value="">Select Analyst...</option>
                                                @foreach (var analyst in Model.AvailableAnalysts.Where(u => u.Role == CyberRiskApp.Models.UserRole.GRCAnalyst || u.Role == CyberRiskApp.Models.UserRole.GRCManager || u.Role == CyberRiskApp.Models.UserRole.Admin))
                                                {
                                                    <option value="@analyst.Id">@analyst.FirstName @analyst.LastName</option>
                                                }
                                            </select>
                                            <button class="btn btn-success btn-sm" onclick="quickAssignSingle(@entry.Id)">
                                                <i class="fas fa-user-plus me-1"></i>Assign
                                            </button>
                                            <a asp-action="Details" asp-route-id="@entry.Id" class="btn btn-outline-secondary btn-sm">
                                                <i class="fas fa-eye me-1"></i>Details
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (Model.UnassignedEntries.Count > 10)
                    {
                        <div class="p-3 text-center border-top bg-light">
                            <button class="btn btn-outline-primary" onclick="loadMoreUnassigned()">
                                <i class="fas fa-plus me-1"></i>Load More (@(Model.UnassignedEntries.Count - 10) remaining)
                            </button>
                        </div>
                    }
                </div>

                <!-- Detailed Table View (Hidden by default) -->
                <div id="detailedView" style="display: none;">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th width="50">
                                        <input type="checkbox" id="selectAllUnassigned" class="form-check-input">
                                    </th>
                                    <th width="120">Backlog #</th>
                                    <th width="100">Priority</th>
                                    <th width="120">Action</th>
                                    <th>Description & Context</th>
                                    <th width="150">Requested</th>
                                    <th width="200">Quick Assign</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var entry in Model.UnassignedEntries)
                                {
                                    <tr class="@entry.GetRowClass()" data-entry-type="@(entry.IsFindingWorkflow() ? "finding" : "risk")">
                                        <td>
                                            <input type="checkbox" name="selectedEntries" value="@entry.Id" class="form-check-input entry-checkbox">
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <span class="type-icon me-2">@entry.GetTypeIcon()</span>
                                                <a asp-action="Details" asp-route-id="@entry.Id" class="fw-bold text-primary">
                                                    @entry.BacklogNumber
                                                </a>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="priority-icon me-1">@entry.GetPriorityIcon()</span>
                                            <span class="badge bg-@(entry.Priority switch 
                                            { 
                                                CyberRiskApp.Models.BacklogPriority.Low => "secondary",
                                                CyberRiskApp.Models.BacklogPriority.Medium => "primary", 
                                                CyberRiskApp.Models.BacklogPriority.High => "warning",
                                                CyberRiskApp.Models.BacklogPriority.Critical => "danger",
                                                _ => "secondary"
                                            })">@entry.Priority</span>
                                        </td>
                                        <td>
                                            <span class="badge @entry.GetTypeBadgeClass()">@entry.GetTypeDisplayName()</span>
                                        </td>
                                        <td>
                                            <div class="description-cell">
                                                <p class="mb-1">@entry.RequestDescription</p>
                                                @if (entry.IsFindingWorkflow())
                                                {
                                                    <small class="text-success">
                                                        <i class="fas fa-search me-1"></i>Finding Source: @entry.FindingSource
                                                    </small>
                                                    @if (entry.RiskRating.HasValue)
                                                    {
                                                        <br><small class="text-muted"><strong>Risk Rating:</strong> @entry.RiskRating</small>
                                                    }
                                                    @if (!string.IsNullOrEmpty(entry.Asset))
                                                    {
                                                        <br><small class="text-muted"><strong>Asset:</strong> @entry.Asset</small>
                                                    }
                                                    @if (!string.IsNullOrEmpty(entry.Domain))
                                                    {
                                                        <br><small class="text-muted"><strong>Domain:</strong> @entry.Domain</small>
                                                    }
                                                }
                                                else if (entry.Risk?.LinkedAssessment != null)
                                                {
                                                    <small class="text-muted">
                                                        <i class="fas fa-chart-bar me-1"></i>Assessment: @entry.Risk.LinkedAssessment.Title
                                                    </small>
                                                }
                                                else if (entry.Risk?.LinkedFinding != null)
                                                {
                                                    <small class="text-muted">
                                                        <i class="fas fa-exclamation-triangle me-1"></i>Finding: @entry.Risk.LinkedFinding.FindingNumber
                                                    </small>
                                                }
                                                @if (!string.IsNullOrEmpty(entry.RequestJustification))
                                                {
                                                    <br><small class="text-muted"><strong>Justification:</strong> @entry.RequestJustification</small>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                @entry.CreatedAt.ToString("MMM dd, yyyy")
                                                <br>by @entry.CreatedBy
                                            </small>
                                        </td>
                                        <td>
                                            <div class="quick-assign-controls">
                                                <select class="form-select form-select-sm mb-1 analyst-select" data-entry-id="@entry.Id">
                                                    <option value="">Select Analyst...</option>
                                                    @foreach (var analyst in Model.AvailableAnalysts.Where(u => u.Role == CyberRiskApp.Models.UserRole.GRCAnalyst || u.Role == CyberRiskApp.Models.UserRole.GRCManager || u.Role == CyberRiskApp.Models.UserRole.Admin))
                                                    {
                                                        <option value="@analyst.Id">@analyst.FirstName @analyst.LastName</option>
                                                    }
                                                </select>
                                                <button class="btn btn-success btn-sm w-100" onclick="quickAssignSingle(@entry.Id)">
                                                    <i class="fas fa-user-plus me-1"></i>Assign
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- All Entries -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0"><i class="fas fa-list me-2"></i>All Backlog Entries (@Model.AllEntries.Count)</h5>
            <div class="btn-group btn-group-sm">
                <button class="btn btn-outline-primary" onclick="filterEntries('all')" id="filterAll">
                    <i class="fas fa-list me-1"></i>All
                </button>
                <button class="btn btn-outline-secondary" onclick="filterEntries('unassigned')" id="filterUnassigned">
                    <i class="fas fa-user-times me-1"></i>Unassigned
                </button>
                <button class="btn btn-outline-info" onclick="filterEntries('assigned')" id="filterAssigned">
                    <i class="fas fa-user-check me-1"></i>Assigned
                </button>
                <button class="btn btn-outline-success" onclick="filterEntries('completed')" id="filterCompleted">
                    <i class="fas fa-check me-1"></i>Completed
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <div id="allEntriesView">
                @foreach (var entry in Model.AllEntries.Take(20))
                {
                    <div class="backlog-entry-item p-3 border-bottom @(entry.IsOverdue() ? "overdue" : "")" 
                         data-entry-id="@entry.Id" data-status="@entry.Status.ToString().ToLower()">
                        <div class="d-flex align-items-start gap-3">
                            <!-- Entry Info -->
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <h6 class="mb-1">
                                            <a asp-action="Details" asp-route-id="@entry.Id" class="text-decoration-none fw-bold">
                                                @entry.BacklogNumber
                                            </a>
                                            <span class="badge bg-@(entry.Priority switch 
                                            { 
                                                CyberRiskApp.Models.BacklogPriority.Low => "secondary",
                                                CyberRiskApp.Models.BacklogPriority.Medium => "primary", 
                                                CyberRiskApp.Models.BacklogPriority.High => "warning",
                                                CyberRiskApp.Models.BacklogPriority.Critical => "danger",
                                                _ => "secondary"
                                            }) ms-2">@entry.Priority</span>
                                            <span class="badge bg-@(entry.Status switch 
                                            { 
                                                CyberRiskApp.Models.RiskBacklogStatus.Unassigned => "secondary",
                                                CyberRiskApp.Models.RiskBacklogStatus.AssignedToAnalyst => "primary", 
                                                CyberRiskApp.Models.RiskBacklogStatus.AssignedToManager => "info",
                                                CyberRiskApp.Models.RiskBacklogStatus.Approved => "success",
                                                CyberRiskApp.Models.RiskBacklogStatus.Rejected => "danger",
                                                _ => "secondary"
                                            }) ms-2">@entry.Status</span>
                                        </h6>
                                        <small class="text-muted d-flex align-items-center gap-3">
                                            <span>
                                                <i class="fas fa-calendar me-1"></i>@entry.CreatedAt.ToString("MMM dd, yyyy")
                                            </span>
                                            <span>
                                                <i class="fas fa-user me-1"></i>@entry.CreatedBy
                                            </span>
                                            @if (!string.IsNullOrEmpty(entry.GetCurrentAssignee()))
                                            {
                                                <span>
                                                    <i class="fas fa-user-tag me-1"></i>Assigned: @GetUserDisplayName(entry.GetCurrentAssignee())
                                                </span>
                                            }
                                            <!-- SLA Status Information -->
                                            <span class="d-flex align-items-center">
                                                <span class="me-1">@entry.GetSLAIcon()</span>
                                                <span class="@entry.GetSLAStatusBadgeClass() me-2">@entry.GetSLAStatus()</span>
                                                <small class="text-muted">@entry.GetAgingDisplayText()</small>
                                                @if (entry.RequiresEscalation())
                                                {
                                                    <i class="fas fa-exclamation-triangle ms-1 text-danger" title="@entry.GetEscalationReason()"></i>
                                                }
                                            </span>
                                        </small>
                                    </div>
                                </div>
                                
                                <!-- Description -->
                                <div class="description-content mb-2">
                                    <p class="mb-1 text-body">@entry.RequestDescription</p>
                                    <div class="d-flex flex-wrap gap-1">
                                        <span class="badge bg-info">@entry.ActionType</span>
                                        @if (entry.IsFindingWorkflow())
                                        {
                                            <span class="badge bg-success text-white">
                                                <i class="fas fa-search me-1"></i>@entry.FindingSource
                                            </span>
                                            @if (entry.RiskRating.HasValue)
                                            {
                                                <span class="badge bg-@(entry.RiskRating.Value switch 
                                                { 
                                                    CyberRiskApp.Models.RiskRating.Low => "secondary",
                                                    CyberRiskApp.Models.RiskRating.Medium => "primary", 
                                                    CyberRiskApp.Models.RiskRating.High => "warning",
                                                    CyberRiskApp.Models.RiskRating.Critical => "danger",
                                                    _ => "secondary"
                                                })">@entry.RiskRating Risk</span>
                                            }
                                        }
                                        else if (entry.Risk?.LinkedAssessment != null)
                                        {
                                            <span class="badge bg-light text-dark">
                                                <i class="fas fa-chart-bar me-1"></i>@entry.Risk.LinkedAssessment.Title
                                            </span>
                                        }
                                        else if (entry.Risk?.LinkedFinding != null)
                                        {
                                            <span class="badge bg-warning text-dark">
                                                <i class="fas fa-exclamation-triangle me-1"></i>@entry.Risk.LinkedFinding.FindingNumber
                                            </span>
                                        }
                                    </div>
                                </div>
                                
                                <!-- Assignment/Re-assignment Controls -->
                                @if (Model.CanAssign)
                                {
                                    <div class="assignment-controls-advanced">
                                        <div class="d-flex gap-2 align-items-center flex-wrap">
                                            @if (entry.Status == CyberRiskApp.Models.RiskBacklogStatus.Unassigned)
                                            {
                                                <!-- Initial Assignment -->
                                                <select class="form-select form-select-sm analyst-select" data-entry-id="@entry.Id" style="max-width: 200px;">
                                                    <option value="">Select Analyst...</option>
                                                    @foreach (var analyst in Model.AvailableAnalysts.Where(u => u.Role == CyberRiskApp.Models.UserRole.GRCAnalyst || u.Role == CyberRiskApp.Models.UserRole.GRCManager || u.Role == CyberRiskApp.Models.UserRole.Admin))
                                                    {
                                                        <option value="@analyst.Id">@analyst.FirstName @analyst.LastName</option>
                                                    }
                                                </select>
                                                <button class="btn btn-success btn-sm" onclick="quickAssignSingle(@entry.Id)">
                                                    <i class="fas fa-user-plus me-1"></i>Assign
                                                </button>
                                            }
                                            else if (entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToAnalyst || entry.Status == CyberRiskApp.Models.RiskBacklogStatus.AssignedToManager)
                                            {
                                                <!-- Re-assignment -->
                                                <select class="form-select form-select-sm analyst-select" data-entry-id="@entry.Id" style="max-width: 200px;">
                                                    <option value="">Reassign to...</option>
                                                    @foreach (var analyst in Model.AvailableAnalysts.Where(u => u.Role == CyberRiskApp.Models.UserRole.GRCAnalyst || u.Role == CyberRiskApp.Models.UserRole.GRCManager || u.Role == CyberRiskApp.Models.UserRole.Admin))
                                                    {
                                                        <option value="@analyst.Id">
                                                            @analyst.FirstName @analyst.LastName
                                                        </option>
                                                    }
                                                </select>
                                                <button class="btn btn-warning btn-sm" onclick="reassignEntry(@entry.Id)">
                                                    <i class="fas fa-exchange-alt me-1"></i>Reassign
                                                </button>
                                                <button class="btn btn-outline-danger btn-sm" onclick="unassignEntry(@entry.Id)">
                                                    <i class="fas fa-user-times me-1"></i>Unassign
                                                </button>
                                            }
                                            
                                            <a asp-action="Details" asp-route-id="@entry.Id" class="btn btn-outline-secondary btn-sm">
                                                <i class="fas fa-eye me-1"></i>Details
                                            </a>
                                            
                                            @if (entry.Status != CyberRiskApp.Models.RiskBacklogStatus.Approved && entry.Status != CyberRiskApp.Models.RiskBacklogStatus.Rejected)
                                            {
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-success btn-sm" onclick="approveEntry(@entry.Id)" title="Approve Entry">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger btn-sm" onclick="rejectEntry(@entry.Id)" title="Reject Entry">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <!-- Non-managers see basic controls -->
                                    <div class="d-flex gap-2">
                                        <a asp-action="Details" asp-route-id="@entry.Id" class="btn btn-outline-secondary btn-sm">
                                            <i class="fas fa-eye me-1"></i>Details
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                @if (Model.AllEntries.Count > 20)
                {
                    <div class="p-3 text-center border-top bg-light">
                        <button class="btn btn-outline-primary" onclick="loadMoreAllEntries()">
                            <i class="fas fa-plus me-1"></i>Load More (@(Model.AllEntries.Count - 20) remaining)
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Bulk Actions Modal -->
<div class="modal fade" id="bulkActionsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bulk Actions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6><i class="fas fa-user-plus me-2"></i>Assign to Analyst</h6>
                        <select id="bulkAnalystSelect" class="form-select mb-3">
                            <option value="">Select Analyst...</option>
                            @foreach (var analyst in Model.AvailableAnalysts.Where(u => u.Role == CyberRiskApp.Models.UserRole.GRCAnalyst || u.Role == CyberRiskApp.Models.UserRole.GRCManager || u.Role == CyberRiskApp.Models.UserRole.Admin))
                            {
                                <option value="@analyst.Id">@analyst.FirstName @analyst.LastName</option>
                            }
                        </select>
                        <button type="button" class="btn btn-primary" onclick="bulkAssignAnalyst()">
                            <i class="fas fa-users me-1"></i>Assign Selected
                        </button>
                    </div>
                    <div class="col-md-6">
                        <h6><i class="fas fa-user-tie me-2"></i>Assign to Manager</h6>
                        <select id="bulkManagerSelect" class="form-select mb-3">
                            <option value="">Select Manager...</option>
                            @foreach (var manager in Model.AvailableManagers.Where(u => u.Role == CyberRiskApp.Models.UserRole.Admin))
                            {
                                <option value="@manager.Id">@manager.FirstName @manager.LastName</option>
                            }
                        </select>
                        <button type="button" class="btn btn-info" onclick="bulkAssignManager()">
                            <i class="fas fa-users me-1"></i>Assign Selected
                        </button>
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-md-6">
                        <h6><i class="fas fa-flag me-2"></i>Set Priority</h6>
                        <select id="bulkPrioritySelect" class="form-select mb-3">
                            <option value="">Select Priority...</option>
                            <option value="1">Low</option>
                            <option value="2">Medium</option>
                            <option value="3">High</option>
                            <option value="4">Critical</option>
                        </select>
                        <button type="button" class="btn btn-warning" onclick="bulkSetPriority()">
                            <i class="fas fa-flag me-1"></i>Update Priority
                        </button>
                    </div>
                    <div class="col-md-6">
                        <h6><i class="fas fa-check me-2"></i>Quick Actions</h6>
                        <button type="button" class="btn btn-success mb-2 w-100" onclick="bulkApprove()">
                            <i class="fas fa-check-circle me-1"></i>Bulk Approve
                        </button>
                        <button type="button" class="btn btn-outline-secondary w-100" onclick="clearSelection()">
                            <i class="fas fa-times me-1"></i>Clear Selection
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <span id="selectedCount" class="text-muted me-auto">0 items selected</span>
            </div>
        </div>
    </div>
</div>

<!-- Quick Assign Modal -->
<div class="modal fade" id="quickAssignModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content quick-assign-modal">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-bolt me-2"></i>Quick Assign Selected Entries
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <span id="quickAssignCount">0</span> entries selected for assignment.
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Assign to Analyst</label>
                    <select id="quickAssignAnalystSelect" class="form-select">
                        <option value="">Select Analyst...</option>
                        @foreach (var analyst in Model.AvailableAnalysts.Where(u => u.Role == CyberRiskApp.Models.UserRole.GRCAnalyst || u.Role == CyberRiskApp.Models.UserRole.GRCManager || u.Role == CyberRiskApp.Models.UserRole.Admin))
                        {
                            <option value="@analyst.Id">@analyst.FirstName @analyst.LastName</option>
                        }
                    </select>
                    <small class="form-text text-muted">All selected entries will be assigned to this analyst.</small>
                </div>
                <div class="mb-3">
                    <label class="form-label">Assignment Notes (Optional)</label>
                    <textarea id="quickAssignComments" class="form-control" rows="3" placeholder="Add any notes about this bulk assignment..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="executeQuickAssign()">
                    <i class="fas fa-user-plus me-1"></i>Assign All Selected
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Assignment Modal -->
<div class="modal fade" id="assignmentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Backlog Entry</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="assignmentEntryId" value="">
                <div class="mb-3">
                    <label class="form-label">Assign to Analyst</label>
                    <select id="assignmentAnalystSelect" class="form-select">
                        <option value="">Select Analyst...</option>
                        @foreach (var analyst in Model.AvailableAnalysts.Where(u => u.Role == CyberRiskApp.Models.UserRole.GRCAnalyst || u.Role == CyberRiskApp.Models.UserRole.GRCManager || u.Role == CyberRiskApp.Models.UserRole.Admin))
                        {
                            <option value="@analyst.Id">@analyst.FirstName @analyst.LastName</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Comments (Optional)</label>
                    <textarea id="assignmentComments" class="form-control" rows="3" placeholder="Add any comments about this assignment..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="confirmAssignment()">
                    <i class="fas fa-user-plus me-1"></i>Assign
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create Finding Modal -->
<div class="modal fade" id="createFindingModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus me-2"></i>Create New Finding Entry
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createFindingForm">
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        This finding will enter the workflow system for review and approval before being added to the findings register.
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Finding Title <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" name="title" id="findingTitle" required maxlength="200">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Source <span class="text-danger">*</span></label>
                                <select class="form-select" name="source" id="findingSource" required>
                                    <option value="">Select source...</option>
                                    <option value="Security Assessment">Security Assessment</option>
                                    <option value="Audit">Audit</option>
                                    <option value="Penetration Test">Penetration Test</option>
                                    <option value="Vulnerability Scan">Vulnerability Scan</option>
                                    <option value="Incident Response">Incident Response</option>
                                    <option value="Compliance Review">Compliance Review</option>
                                    <option value="Code Review">Code Review</option>
                                    <option value="Manual Discovery">Manual Discovery</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Asset</label>
                                <input type="text" class="form-control" name="asset" id="findingAsset" maxlength="100">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Business Unit</label>
                                <input type="text" class="form-control" name="businessUnit" id="findingBusinessUnit" maxlength="100">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Business Owner</label>
                                <input type="text" class="form-control" name="businessOwner" id="findingBusinessOwner" maxlength="100">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Impact Level <span class="text-danger">*</span></label>
                                <select class="form-select" name="impact" id="findingImpact" required>
                                    <option value="">Select impact...</option>
                                    <option value="1">Low</option>
                                    <option value="2">Medium</option>
                                    <option value="3">High</option>
                                    <option value="4">Critical</option>
                                    <option value="5">Extreme</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Likelihood Level <span class="text-danger">*</span></label>
                                <select class="form-select" name="likelihood" id="findingLikelihood" required>
                                    <option value="">Select likelihood...</option>
                                    <option value="1">Unlikely</option>
                                    <option value="2">Possible</option>
                                    <option value="3">Likely</option>
                                    <option value="4">Almost Certain</option>
                                    <option value="5">Certain</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Exposure Level <span class="text-danger">*</span></label>
                                <select class="form-select" name="exposure" id="findingExposure" required>
                                    <option value="">Select exposure...</option>
                                    <option value="1">Slightly Exposed</option>
                                    <option value="2">Exposed</option>
                                    <option value="3">Moderately Exposed</option>
                                    <option value="4">Highly Exposed</option>
                                    <option value="5">Critically Exposed</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Domain</label>
                                <input type="text" class="form-control" name="domain" id="findingDomain" maxlength="100">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Technical Control</label>
                                <input type="text" class="form-control" name="technicalControl" id="findingTechnicalControl" maxlength="100">
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Finding Details <span class="text-danger">*</span></label>
                        <textarea class="form-control" name="details" id="findingDetails" rows="4" required maxlength="2000" placeholder="Describe the finding, its implications, and any relevant details..."></textarea>
                        <div class="form-text">Provide comprehensive details about the finding for effective review and remediation.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-plus me-1"></i>Create Finding Entry
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .metric-card {
        background: linear-gradient(135deg, var(--bs-primary), var(--bs-primary));
        color: white;
        padding: 1.5rem;
        border-radius: 0.5rem;
        text-align: center;
        height: 100%;
        display: flex;
        align-items: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        transition: transform 0.2s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
    }
    
    .metric-card.bg-info { background: linear-gradient(135deg, var(--bs-info), var(--bs-info)); }
    .metric-card.bg-warning { background: linear-gradient(135deg, var(--bs-warning), var(--bs-warning)); }
    .metric-card.bg-success { background: linear-gradient(135deg, var(--bs-success), var(--bs-success)); }
    .metric-card.bg-danger { background: linear-gradient(135deg, var(--bs-danger), var(--bs-danger)); }
    .metric-card.bg-secondary { background: linear-gradient(135deg, var(--bs-secondary), var(--bs-secondary)); }
    
    .metric-icon {
        font-size: 2rem;
        margin-right: 1rem;
        opacity: 0.8;
    }
    
    .metric-content {
        flex: 1;
    }
    
    .metric-value {
        font-size: 1.5rem;
        font-weight: 700;
        line-height: 1.2;
    }
    
    .metric-label {
        font-size: 0.875rem;
        opacity: 0.9;
        margin-top: 0.25rem;
    }

    /* Enhanced Assignment Interface Styles */
    .assignment-item {
        transition: background-color 0.2s ease, border-left 0.2s ease;
        border-left: 3px solid transparent;
    }

    .assignment-item:hover {
        background-color: rgba(0, 123, 255, 0.03);
        border-left-color: #007bff;
    }

    .description-content {
        line-height: 1.5;
    }

    .description-content p {
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .assignment-controls-simple {
        padding-top: 0.5rem;
        border-top: 1px solid #e9ecef;
    }

    .description-cell {
        min-width: 300px;
        max-width: 500px;
    }

    .description-cell p {
        font-size: 0.95rem;
        line-height: 1.4;
    }

    .quick-assign-controls {
        min-width: 180px;
    }

    /* Responsive improvements for assignment items */
    @@media (max-width: 768px) {
        .assignment-controls-simple .d-flex {
            flex-direction: column;
            gap: 0.5rem !important;
        }
        
        .assignment-controls-simple .form-select {
            max-width: 100% !important;
        }
    }

    /* Detailed view improvements */
    #detailedView .table th {
        background-color: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
        font-weight: 600;
        color: #495057;
    }

    #detailedView .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    /* Enhanced badges */
    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    /* Quick assign modal improvements */
    .quick-assign-modal .form-select {
        margin-bottom: 0.75rem;
    }

    /* Animation for view toggle */
    #simpleView, #detailedView {
        transition: opacity 0.3s ease;
    }

    /* Loading states */
    .assignment-item.loading {
        opacity: 0.6;
        pointer-events: none;
    }

    .btn:disabled {
        opacity: 0.6;
    }

    /* Success feedback */
    .assignment-item.assigned,
    .backlog-entry-item.assigned {
        background-color: rgba(40, 167, 69, 0.1);
        border-left-color: #28a745 !important;
    }

    /* NEW: Enhanced Finding/Risk Visual Indicators */
    
    /* Row color coding */
    .backlog-finding-row {
        background-color: rgba(13, 110, 253, 0.05) !important; /* Light blue background */
        border-left: 4px solid #0d6efd !important; /* Blue left border */
    }
    
    .backlog-risk-row {
        background-color: rgba(255, 193, 7, 0.05) !important; /* Light yellow background */
        border-left: 4px solid #ffc107 !important; /* Yellow left border */
    }
    
    /* Type badges */
    .badge-finding {
        background-color: #0d6efd !important;
        color: white !important;
        font-weight: 500;
    }
    
    .badge-risk {
        background-color: #ffc107 !important;
        color: #000 !important;
        font-weight: 500;
    }
    
    .badge-status {
        background-color: #6c757d !important;
        color: white !important;
        font-size: 0.7rem;
    }
    
    .badge-outline {
        background-color: transparent !important;
        color: #6c757d !important;
        border: 1px solid #6c757d;
        font-size: 0.7rem;
    }
    
    /* Type icons */
    .type-icon {
        font-size: 1.2rem !important;
        line-height: 1;
        opacity: 0.8;
    }
    
    /* Priority icons */
    .priority-icon, .priority-badge {
        font-size: 0.9rem;
        vertical-align: middle;
    }
    
    /* Enhanced metric breakdown */
    .metric-breakdown .badge {
        font-size: 0.65rem;
        padding: 0.2rem 0.4rem;
        margin: 0 1px;
    }
    
    /* Hover effects for type differentiation */
    .backlog-finding-row:hover {
        background-color: rgba(13, 110, 253, 0.1) !important;
        border-left-width: 6px !important;
        transition: all 0.2s ease;
    }
    
    .backlog-risk-row:hover {
        background-color: rgba(255, 193, 7, 0.1) !important;
        border-left-width: 6px !important;
        transition: all 0.2s ease;
    }
    
    /* Tab styling for type filters */
    .type-filter-tabs {
        border-bottom: 2px solid #dee2e6;
        margin-bottom: 1rem;
    }
    
    .type-filter-tabs .nav-link {
        border: none;
        border-bottom: 3px solid transparent;
        color: #6c757d;
        font-weight: 500;
        padding: 0.75rem 1rem;
    }
    
    .type-filter-tabs .nav-link.active {
        color: #0d6efd;
        border-bottom-color: #0d6efd;
        background-color: transparent;
    }
    
    .type-filter-tabs .nav-link:hover {
        border-bottom-color: #0d6efd;
        color: #0d6efd;
    }
    
    /* Enhanced description cells */
    .description-cell {
        max-width: 400px;
    }
    
    .description-cell p {
        margin-bottom: 0.3rem;
        line-height: 1.4;
    }
    
    /* Status indicators */
    .status-pending { color: #ffc107; }
    .status-in-progress { color: #17a2b8; }
    .status-completed { color: #28a745; }
    .status-rejected { color: #dc3545; }

    /* Backlog Entry Item Styles */
    .backlog-entry-item {
        transition: background-color 0.2s ease, border-left 0.2s ease;
        border-left: 3px solid transparent;
    }

    .backlog-entry-item:hover {
        background-color: rgba(0, 123, 255, 0.03);
        border-left-color: #007bff;
    }

    .backlog-entry-item.overdue {
        background-color: rgba(255, 193, 7, 0.1);
        border-left-color: #ffc107 !important;
    }

    .backlog-entry-item.loading {
        opacity: 0.6;
        pointer-events: none;
    }

    /* Advanced Assignment Controls */
    .assignment-controls-advanced {
        padding-top: 0.5rem;
        border-top: 1px solid #e9ecef;
    }

    .assignment-controls-advanced .btn-group {
        margin-left: auto;
    }

    /* Filter Button States */
    .btn-group .btn.active {
        background-color: var(--bs-primary);
        color: white;
        border-color: var(--bs-primary);
    }

    /* Status-based styling */
    .backlog-entry-item[data-status="approved"] {
        background-color: rgba(40, 167, 69, 0.05);
    }

    .backlog-entry-item[data-status="rejected"] {
        background-color: rgba(220, 53, 69, 0.05);
    }

    .backlog-entry-item[data-status="unassigned"] {
        background-color: rgba(108, 117, 125, 0.05);
    }

    /* Responsive improvements for advanced controls */
    @@media (max-width: 768px) {
        .assignment-controls-advanced .d-flex {
            flex-direction: column;
            gap: 0.5rem !important;
        }
        
        .assignment-controls-advanced .form-select {
            max-width: 100% !important;
        }

        .backlog-entry-item .d-flex.gap-3 {
            flex-direction: column;
        }

        .small.text-muted.d-flex {
            flex-direction: column !important;
            gap: 0.25rem !important;
        }
    }
</style>

@section Scripts {
    <script>
        // Load SLA Status Breakdown on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadSLAStatusBreakdown();
        });

        function loadSLAStatusBreakdown() {
            fetch('/RiskBacklog/GetSLAStatusBreakdown')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateSLAStatusDisplay(data.breakdown);
                    } else {
                        console.error('Failed to load SLA status breakdown');
                        document.getElementById('slaStatusBreakdown').innerHTML = 
                            '<div class="col text-center"><small class="text-muted">Failed to load SLA status</small></div>';
                    }
                })
                .catch(error => {
                    console.error('Error loading SLA status breakdown:', error);
                    document.getElementById('slaStatusBreakdown').innerHTML = 
                        '<div class="col text-center"><small class="text-muted">Error loading SLA status</small></div>';
                });
        }

        function updateSLAStatusDisplay(breakdown) {
            const total = Object.values(breakdown).reduce((sum, count) => sum + count, 0);
            
            // Build the status cards HTML
            let html = '';
            const statusConfig = [
                { key: 'Overdue', icon: 'üî¥', class: 'text-danger', bgClass: 'bg-danger' },
                { key: 'Due Soon', icon: 'üü†', class: 'text-warning', bgClass: 'bg-warning' },
                { key: 'Approaching', icon: 'üü°', class: 'text-info', bgClass: 'bg-info' },
                { key: 'On Track', icon: 'üü¢', class: 'text-success', bgClass: 'bg-success' },
                { key: 'No SLA', icon: '‚ö™', class: 'text-muted', bgClass: 'bg-secondary' }
            ];

            statusConfig.forEach(config => {
                const count = breakdown[config.key] || 0;
                const percentage = total > 0 ? Math.round((count / total) * 100) : 0;
                
                html += `
                    <div class="col">
                        <div class="text-center">
                            <div class="h4 mb-1 ${config.class}">
                                ${config.icon} ${count}
                            </div>
                            <small class="text-muted">${config.key}</small>
                            <div class="small text-muted">${percentage}%</div>
                        </div>
                    </div>
                `;
            });

            document.getElementById('slaStatusBreakdown').innerHTML = html;

            // Update progress bars
            if (total > 0) {
                const overduePercent = Math.round((breakdown['Overdue'] || 0) / total * 100);
                const dueSoonPercent = Math.round((breakdown['Due Soon'] || 0) / total * 100);
                const approachingPercent = Math.round((breakdown['Approaching'] || 0) / total * 100);
                const onTrackPercent = Math.round((breakdown['On Track'] || 0) / total * 100);

                document.getElementById('slaOverdueBar').style.width = overduePercent + '%';
                document.getElementById('slaDueSoonBar').style.width = dueSoonPercent + '%';
                document.getElementById('slaApproachingBar').style.width = approachingPercent + '%';
                document.getElementById('slaOnTrackBar').style.width = onTrackPercent + '%';
            }
        }

        // Select all checkbox functionality
        document.getElementById('selectAllUnassigned')?.addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.entry-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
            updateSelectedCount();
        });

        // Update selected count when individual checkboxes change
        document.querySelectorAll('.entry-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateSelectedCount);
        });

        function updateSelectedCount() {
            const selectedCheckboxes = document.querySelectorAll('.entry-checkbox:checked');
            const count = selectedCheckboxes.length;
            const countElement = document.getElementById('selectedCount');
            if (countElement) {
                countElement.textContent = `${count} item${count !== 1 ? 's' : ''} selected`;
            }
        }

        // Quick assign functions
        function assignToAnalyst(backlogId, analystId, analystName) {
            if (confirm(`Assign this backlog entry to ${analystName}?`)) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/RiskBacklog/AssignToAnalyst';
                
                const backlogIdInput = document.createElement('input');
                backlogIdInput.type = 'hidden';
                backlogIdInput.name = 'backlogId';
                backlogIdInput.value = backlogId;
                
                const analystIdInput = document.createElement('input');
                analystIdInput.type = 'hidden';
                analystIdInput.name = 'analystId';
                analystIdInput.value = analystId;
                
                // Add anti-forgery token
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
                
                form.appendChild(backlogIdInput);
                form.appendChild(analystIdInput);
                form.appendChild(tokenInput);
                document.body.appendChild(form);
                form.submit();
            }
        }

        function showAssignmentModal(backlogId) {
            document.getElementById('assignmentEntryId').value = backlogId;
            document.getElementById('assignmentAnalystSelect').value = '';
            document.getElementById('assignmentComments').value = '';
            new bootstrap.Modal(document.getElementById('assignmentModal')).show();
        }

        function confirmAssignment() {
            const backlogId = document.getElementById('assignmentEntryId').value;
            const analystId = document.getElementById('assignmentAnalystSelect').value;
            const comments = document.getElementById('assignmentComments').value;
            
            if (!analystId) {
                alert('Please select an analyst to assign to.');
                return;
            }
            
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/RiskBacklog/AssignToAnalyst';
            
            const backlogIdInput = document.createElement('input');
            backlogIdInput.type = 'hidden';
            backlogIdInput.name = 'backlogId';
            backlogIdInput.value = backlogId;
            
            const analystIdInput = document.createElement('input');
            analystIdInput.type = 'hidden';
            analystIdInput.name = 'analystId';
            analystIdInput.value = analystId;
            
            // Add anti-forgery token
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            
            form.appendChild(backlogIdInput);
            form.appendChild(analystIdInput);
            form.appendChild(tokenInput);
            document.body.appendChild(form);
            form.submit();
        }

        // Bulk actions
        function getSelectedBacklogIds() {
            const selectedCheckboxes = document.querySelectorAll('.entry-checkbox:checked');
            return Array.from(selectedCheckboxes).map(cb => parseInt(cb.value));
        }

        function bulkAssignAnalyst() {
            const selectedIds = getSelectedBacklogIds();
            const analystId = document.getElementById('bulkAnalystSelect').value;
            
            if (selectedIds.length === 0) {
                alert('Please select at least one backlog entry.');
                return;
            }
            
            if (!analystId) {
                alert('Please select an analyst.');
                return;
            }

            // Get anti-forgery token
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenElement || !tokenElement.value) {
                alert('Security token not found. Please refresh the page and try again.');
                return;
            }
            
            if (confirm(`Assign ${selectedIds.length} backlog entries to the selected analyst?`)) {
                fetch('/api/backlog/bulk-assign-analyst', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': tokenElement.value
                    },
                    body: JSON.stringify({
                        backlogIds: selectedIds,
                        assigneeId: analystId
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert(`Successfully assigned ${data.assignedCount} entries.`);
                        location.reload();
                    } else {
                        alert('Error: ' + (data.error || 'Unknown error occurred'));
                    }
                })
                .catch(error => {
                    console.error('Bulk assignment error:', error);
                    alert('Error: ' + error.message);
                });
            }
        }

        function bulkAssignManager() {
            const selectedIds = getSelectedBacklogIds();
            const managerId = document.getElementById('bulkManagerSelect').value;
            
            if (selectedIds.length === 0) {
                alert('Please select at least one backlog entry.');
                return;
            }
            
            if (!managerId) {
                alert('Please select a manager.');
                return;
            }
            
            if (confirm(`Assign ${selectedIds.length} backlog entries to the selected manager?`)) {
                fetch('/api/backlog/bulk-assign-manager', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        backlogIds: selectedIds,
                        assigneeId: managerId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`Successfully assigned ${data.assignedCount} entries.`);
                        location.reload();
                    } else {
                        alert('Error: ' + data.error);
                    }
                })
                .catch(error => {
                    alert('Error: ' + error.message);
                });
            }
        }

        function bulkSetPriority() {
            const selectedIds = getSelectedBacklogIds();
            const priority = document.getElementById('bulkPrioritySelect').value;
            
            if (selectedIds.length === 0) {
                alert('Please select at least one backlog entry.');
                return;
            }
            
            if (!priority) {
                alert('Please select a priority.');
                return;
            }
            
            if (confirm(`Update priority for ${selectedIds.length} backlog entries?`)) {
                fetch('/api/backlog/bulk-priority', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        backlogIds: selectedIds,
                        priority: parseInt(priority)
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`Successfully updated priority for ${data.updatedCount} entries.`);
                        location.reload();
                    } else {
                        alert('Error: ' + data.error);
                    }
                })
                .catch(error => {
                    alert('Error: ' + error.message);
                });
            }
        }

        function bulkApprove() {
            const selectedIds = getSelectedBacklogIds();
            
            if (selectedIds.length === 0) {
                alert('Please select at least one backlog entry.');
                return;
            }
            
            if (confirm(`Approve ${selectedIds.length} backlog entries?`)) {
                fetch('/api/backlog/bulk-approve', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        backlogIds: selectedIds,
                        comments: 'Bulk approved by manager'
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`Successfully approved ${data.approvedCount} entries.`);
                        location.reload();
                    } else {
                        alert('Error: ' + data.error);
                    }
                })
                .catch(error => {
                    alert('Error: ' + error.message);
                });
            }
        }

        function clearSelection() {
            document.querySelectorAll('.entry-checkbox').forEach(checkbox => {
                checkbox.checked = false;
            });
            document.getElementById('selectAllUnassigned').checked = false;
            updateSelectedCount();
        }

        // Enhanced Assignment Interface Functions
        function toggleDetailedView() {
            const simpleView = document.getElementById('simpleView');
            const detailedView = document.getElementById('detailedView');
            const toggleBtn = document.getElementById('viewToggle');
            
            if (simpleView.style.display === 'none') {
                // Switch to simple view
                simpleView.style.display = 'block';
                detailedView.style.display = 'none';
                toggleBtn.innerHTML = '<i class="fas fa-expand me-1"></i>Expand All';
                toggleBtn.title = 'Switch to detailed table view';
            } else {
                // Switch to detailed view
                simpleView.style.display = 'none';
                detailedView.style.display = 'block';
                toggleBtn.innerHTML = '<i class="fas fa-compress me-1"></i>Compact View';
                toggleBtn.title = 'Switch to compact card view';
            }
        }

        function quickAssignSingle(entryId) {
            try {
                const selectElement = document.querySelector(`select[data-entry-id="${entryId}"]`);
                if (!selectElement) {
                    alert('Cannot find analyst selection dropdown.');
                    return;
                }

                const analystId = selectElement.value;
                if (!analystId) {
                    alert('Please select an analyst first.');
                    selectElement.focus();
                    return;
                }

                const analystName = selectElement.options[selectElement.selectedIndex].text;
                
                if (confirm(`Assign this entry to ${analystName}?`)) {
                    // Add loading state
                    const item = document.querySelector(`[data-entry-id="${entryId}"]`);
                    if (item) {
                        item.classList.add('loading');
                    }
                    
                    assignToAnalyst(entryId, analystId, analystName);
                }
            } catch (error) {
                console.error('Quick assign error:', error);
                alert('Error during assignment: ' + error.message);
            }
        }

        function loadMoreUnassigned() {
            // This would typically load more entries via AJAX
            // For now, just show all entries by switching to detailed view
            toggleDetailedView();
        }

        function executeQuickAssign() {
            const selectedIds = getSelectedBacklogIds();
            const analystId = document.getElementById('quickAssignAnalystSelect').value;
            const comments = document.getElementById('quickAssignComments').value;
            
            if (selectedIds.length === 0) {
                alert('Please select at least one backlog entry.');
                return;
            }
            
            if (!analystId) {
                alert('Please select an analyst.');
                return;
            }
            
            // Use the existing bulk assign function
            bulkAssignAnalyst();
        }

        // Enhanced update selected count with quick assign modal sync
        function updateSelectedCount() {
            const selectedCheckboxes = document.querySelectorAll('.entry-checkbox:checked');
            const count = selectedCheckboxes.length;
            const countElement = document.getElementById('selectedCount');
            const quickAssignCountElement = document.getElementById('quickAssignCount');
            
            if (countElement) {
                countElement.textContent = `${count} item${count !== 1 ? 's' : ''} selected`;
            }
            if (quickAssignCountElement) {
                quickAssignCountElement.textContent = count;
            }
            
            // Enable/disable quick assign modal button
            const quickAssignModalBtn = document.querySelector('[data-bs-target="#quickAssignModal"]');
            if (quickAssignModalBtn) {
                quickAssignModalBtn.disabled = count === 0;
                if (count === 0) {
                    quickAssignModalBtn.title = 'Select entries to enable quick assign';
                } else {
                    quickAssignModalBtn.title = `Quick assign ${count} selected entries`;
                }
            }
        }

        // Enhanced assignment function with visual feedback
        function assignToAnalyst(backlogId, analystId, analystName) {
            try {
                // Get anti-forgery token
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement || !tokenElement.value) {
                    alert('Security token not found. Please refresh the page and try again.');
                    return;
                }

                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/RiskBacklog/AssignToAnalyst';
                
                const backlogIdInput = document.createElement('input');
                backlogIdInput.type = 'hidden';
                backlogIdInput.name = 'backlogId';
                backlogIdInput.value = backlogId;
                
                const analystIdInput = document.createElement('input');
                analystIdInput.type = 'hidden';
                analystIdInput.name = 'analystId';
                analystIdInput.value = analystId;
                
                // Add anti-forgery token
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = tokenElement.value;
                
                form.appendChild(backlogIdInput);
                form.appendChild(analystIdInput);
                form.appendChild(tokenInput);
                
                // Add visual feedback before submission
                const item = document.querySelector(`[data-entry-id="${backlogId}"]`);
                if (item) {
                    item.classList.add('assigned');
                    // Add a small delay for visual feedback
                    setTimeout(() => {
                        document.body.appendChild(form);
                        form.submit();
                    }, 300);
                } else {
                    document.body.appendChild(form);
                    form.submit();
                }
            } catch (error) {
                console.error('Assignment error:', error);
                alert('Error assigning entry: ' + error.message);
                
                // Remove loading state if there was an error
                const item = document.querySelector(`[data-entry-id="${backlogId}"]`);
                if (item) {
                    item.classList.remove('loading', 'assigned');
                }
            }
        }

        // Initialize selected count on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateSelectedCount();
            
            // Set up event listeners for new interface elements
            document.querySelectorAll('.entry-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectedCount);
            });
            
            // Add keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey && e.key === 'a' && e.target.closest('#simpleView, #detailedView')) {
                    e.preventDefault();
                    const checkboxes = document.querySelectorAll('.entry-checkbox');
                    const allChecked = Array.from(checkboxes).every(cb => cb.checked);
                    checkboxes.forEach(cb => cb.checked = !allChecked);
                    updateSelectedCount();
                }
            });

            // Initialize filter buttons as active for 'all'
            document.getElementById('filterAll')?.classList.add('active');
        });

        // Re-assignment and Advanced Management Functions
        function reassignEntry(entryId) {
            try {
                const selectElement = document.querySelector(`[data-entry-id="${entryId}"] .analyst-select`);
                if (!selectElement) {
                    alert('Cannot find analyst selection dropdown.');
                    return;
                }

                const newAnalystId = selectElement.value;
                if (!newAnalystId) {
                    alert('Please select an analyst to reassign to.');
                    selectElement.focus();
                    return;
                }

                const analystName = selectElement.options[selectElement.selectedIndex].text;
                
                if (confirm(`Reassign this entry to ${analystName}?`)) {
                    const item = document.querySelector(`[data-entry-id="${entryId}"]`);
                    if (item) {
                        item.classList.add('loading');
                    }
                    
                    reassignToAnalyst(entryId, newAnalystId, analystName);
                }
            } catch (error) {
                console.error('Reassign error:', error);
                alert('Error during reassignment: ' + error.message);
            }
        }

        function unassignEntry(entryId) {
            if (confirm('Remove assignment from this entry? It will return to unassigned status.')) {
                const item = document.querySelector(`[data-entry-id="${entryId}"]`);
                if (item) {
                    item.classList.add('loading');
                }
                
                unassignFromAnalyst(entryId);
            }
        }

        function approveEntry(entryId) {
            if (confirm('Approve this backlog entry?')) {
                const item = document.querySelector(`[data-entry-id="${entryId}"]`);
                if (item) {
                    item.classList.add('loading');
                }
                
                updateEntryStatus(entryId, 'Approved');
            }
        }

        function rejectEntry(entryId) {
            const reason = prompt('Please provide a reason for rejection:');
            if (reason && reason.trim()) {
                const item = document.querySelector(`[data-entry-id="${entryId}"]`);
                if (item) {
                    item.classList.add('loading');
                }
                
                updateEntryStatus(entryId, 'Rejected', reason);
            }
        }

        // Backend API calls for new functionality
        function reassignToAnalyst(backlogId, analystId, analystName) {
            console.log('üöÄ reassignToAnalyst called:', { backlogId, analystId, analystName });
            
            try {
                // Validate inputs
                if (!backlogId || backlogId <= 0) {
                    console.error('‚ùå Invalid backlogId:', backlogId);
                    alert('Invalid backlog entry ID.');
                    return;
                }
                
                if (!analystId || analystId.trim() === '') {
                    console.error('‚ùå Invalid analystId:', analystId);
                    alert('Please select an analyst.');
                    return;
                }
                
                console.log('‚úÖ Input validation passed');

                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                console.log('üîí Token element found:', !!tokenElement, 'Token value:', tokenElement?.value?.substring(0, 10) + '...');
                
                if (!tokenElement || !tokenElement.value) {
                    console.error('‚ùå No anti-forgery token found');
                    alert('Security token not found. Please refresh the page and try again.');
                    return;
                }

                console.log('üèóÔ∏è Creating form for submission');
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/RiskBacklog/ReassignToAnalyst';
                
                const backlogIdInput = document.createElement('input');
                backlogIdInput.type = 'hidden';
                backlogIdInput.name = 'backlogId';
                backlogIdInput.value = backlogId;
                console.log('üìù Created backlogId input:', backlogIdInput.value);
                
                const analystIdInput = document.createElement('input');
                analystIdInput.type = 'hidden';
                analystIdInput.name = 'analystId';
                analystIdInput.value = analystId;
                console.log('üìù Created analystId input:', analystIdInput.value);
                
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = tokenElement.value;
                console.log('üìù Created token input: [REDACTED]');
                
                form.appendChild(backlogIdInput);
                form.appendChild(analystIdInput);
                form.appendChild(tokenInput);
                
                console.log('üîç Form structure created with', form.children.length, 'inputs');
                console.log('üìã Form details:', {
                    method: form.method,
                    action: form.action,
                    children: Array.from(form.children).map(c => ({ name: c.name, value: c.value?.substring(0, 20) + (c.value?.length > 20 ? '...' : '') }))
                });
                
                const item = document.querySelector(`[data-entry-id="${backlogId}"]`);
                console.log('üéØ Found entry item in DOM:', !!item);
                
                if (item) {
                    console.log('üé® Adding visual feedback to entry');
                    item.classList.add('assigned');
                    setTimeout(() => {
                        console.log('‚è∞ Timeout completed, submitting form');
                        document.body.appendChild(form);
                        console.log('üì§ Form appended to body, submitting...');
                        form.submit();
                    }, 300);
                } else {
                    console.log('‚ö° Submitting form immediately (no visual element found)');
                    document.body.appendChild(form);
                    console.log('üì§ Form appended to body, submitting...');
                    form.submit();
                }
            } catch (error) {
                console.error('üí• Reassignment error details:', {
                    message: error.message,
                    stack: error.stack,
                    name: error.name,
                    backlogId,
                    analystId,
                    analystName
                });
                alert('Error reassigning entry: ' + error.message);
                
                const item = document.querySelector(`[data-entry-id="${backlogId}"]`);
                if (item) {
                    console.log('üîÑ Removing loading classes from entry');
                    item.classList.remove('loading', 'assigned');
                }
            }
        }

        function unassignFromAnalyst(backlogId) {
            try {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement || !tokenElement.value) {
                    alert('Security token not found. Please refresh the page and try again.');
                    return;
                }

                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/RiskBacklog/UnassignEntry';
                
                const backlogIdInput = document.createElement('input');
                backlogIdInput.type = 'hidden';
                backlogIdInput.name = 'backlogId';
                backlogIdInput.value = backlogId;
                
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = tokenElement.value;
                
                form.appendChild(backlogIdInput);
                form.appendChild(tokenInput);
                
                document.body.appendChild(form);
                form.submit();
            } catch (error) {
                console.error('Unassign error:', error);
                alert('Error unassigning entry: ' + error.message);
                
                const item = document.querySelector(`[data-entry-id="${backlogId}"]`);
                if (item) {
                    item.classList.remove('loading');
                }
            }
        }

        function updateEntryStatus(backlogId, status, reason = '') {
            try {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement || !tokenElement.value) {
                    alert('Security token not found. Please refresh the page and try again.');
                    return;
                }

                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/RiskBacklog/UpdateStatus';
                
                const backlogIdInput = document.createElement('input');
                backlogIdInput.type = 'hidden';
                backlogIdInput.name = 'backlogId';
                backlogIdInput.value = backlogId;
                
                const statusInput = document.createElement('input');
                statusInput.type = 'hidden';
                statusInput.name = 'status';
                statusInput.value = status;
                
                const reasonInput = document.createElement('input');
                reasonInput.type = 'hidden';
                reasonInput.name = 'reason';
                reasonInput.value = reason;
                
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = tokenElement.value;
                
                form.appendChild(backlogIdInput);
                form.appendChild(statusInput);
                form.appendChild(reasonInput);
                form.appendChild(tokenInput);
                
                document.body.appendChild(form);
                form.submit();
            } catch (error) {
                console.error('Status update error:', error);
                alert('Error updating entry status: ' + error.message);
                
                const item = document.querySelector(`[data-entry-id="${backlogId}"]`);
                if (item) {
                    item.classList.remove('loading');
                }
            }
        }

        // Filter Functions
        function filterEntries(filterType) {
            // Update active button
            document.querySelectorAll('#allEntriesView').forEach(container => {
                container.parentElement.parentElement.querySelectorAll('.btn-group .btn').forEach(btn => {
                    btn.classList.remove('active');
                });
            });
            document.getElementById('filter' + filterType.charAt(0).toUpperCase() + filterType.slice(1)).classList.add('active');

            // Filter entries
            const entries = document.querySelectorAll('.backlog-entry-item');
            entries.forEach(entry => {
                const status = entry.getAttribute('data-status');
                let show = false;

                switch (filterType) {
                    case 'all':
                        show = true;
                        break;
                    case 'unassigned':
                        show = status === 'unassigned';
                        break;
                    case 'assigned':
                        show = status === 'assignedtoanalyst' || status === 'assignedtomanager';
                        break;
                    case 'completed':
                        show = status === 'approved' || status === 'rejected';
                        break;
                }

                entry.style.display = show ? 'block' : 'none';
            });
        }

        function loadMoreAllEntries() {
            // This would typically load more entries via AJAX
            // For now, just show a message
            alert('Load more functionality would be implemented with AJAX to fetch additional entries.');
        }

        // Create Finding Form Handler
        document.addEventListener('DOMContentLoaded', function() {
            const createFindingForm = document.getElementById('createFindingForm');
            if (createFindingForm) {
                createFindingForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(this);
                    const findingData = {
                        title: formData.get('title'),
                        details: formData.get('details'),
                        source: formData.get('source'),
                        impact: parseInt(formData.get('impact')),
                        likelihood: parseInt(formData.get('likelihood')),
                        exposure: parseInt(formData.get('exposure')),
                        asset: formData.get('asset') || '',
                        businessUnit: formData.get('businessUnit') || '',
                        businessOwner: formData.get('businessOwner') || '',
                        domain: formData.get('domain') || '',
                        technicalControl: formData.get('technicalControl') || ''
                    };
                    
                    // Validate required fields
                    if (!findingData.title || !findingData.details || !findingData.source || 
                        !findingData.impact || !findingData.likelihood || !findingData.exposure) {
                        alert('Please fill in all required fields.');
                        return;
                    }
                    
                    // Get anti-forgery token
                    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (!tokenElement || !tokenElement.value) {
                        alert('Security token not found. Please refresh the page and try again.');
                        return;
                    }
                    
                    // Disable submit button
                    const submitBtn = this.querySelector('button[type="submit"]');
                    const originalText = submitBtn.innerHTML;
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Creating...';
                    
                    // Submit to backend
                    fetch('/RiskBacklog/CreateFindingBacklogEntry', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': tokenElement.value
                        },
                        body: JSON.stringify(findingData)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            alert(`Finding entry ${data.backlogNumber} created successfully! It has been added to the workflow queue for review.`);
                            
                            // Close modal and reset form
                            const modal = bootstrap.Modal.getInstance(document.getElementById('createFindingModal'));
                            modal.hide();
                            createFindingForm.reset();
                            
                            // Reload page to show new entry
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            alert('Error creating finding entry: ' + (data.error || 'Unknown error'));
                        }
                    })
                    .catch(error => {
                        console.error('Create finding error:', error);
                        alert('Error creating finding entry: ' + error.message);
                    })
                    .finally(() => {
                        // Re-enable submit button
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalText;
                    });
                });
            }
        });

        // NEW: Enhanced Type Filtering Functions
        function filterByType(filterType) {
            console.log('üîç Filtering by type:', filterType);
            
            // Update URL to maintain filter state
            const currentUrl = new URL(window.location);
            if (filterType === 'all') {
                currentUrl.searchParams.delete('filter');
            } else {
                currentUrl.searchParams.set('filter', filterType);
            }
            
            // Apply client-side filtering for immediate feedback
            const entries = document.querySelectorAll('.assignment-item, tr[data-entry-type]');
            let visibleCount = 0;
            
            entries.forEach(entry => {
                const entryType = entry.getAttribute('data-entry-type');
                let shouldShow = false;
                
                switch(filterType) {
                    case 'all':
                        shouldShow = true;
                        break;
                    case 'findings':
                        shouldShow = entryType === 'finding';
                        break;
                    case 'risks':
                        shouldShow = entryType === 'risk';
                        break;
                    default:
                        shouldShow = true;
                }
                
                if (shouldShow) {
                    entry.style.display = '';
                    visibleCount++;
                } else {
                    entry.style.display = 'none';
                }
            });
            
            console.log(`‚úÖ Filter applied: ${visibleCount} entries visible`);
            
            // Update the URL and reload to get server-side filtering
            window.location.href = currentUrl.toString();
        }

        // Add click handlers for the new metric cards
        document.addEventListener('DOMContentLoaded', function() {
            // Enhanced hover effects for entries
            const entries = document.querySelectorAll('.assignment-item, tr[data-entry-type]');
            entries.forEach(entry => {
                entry.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateX(2px)';
                });
                
                entry.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateX(0)';
                });
            });
            
            // Add keyboard shortcuts for quick filtering
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case '1':
                            e.preventDefault();
                            filterByType('all');
                            break;
                        case '2':
                            e.preventDefault();
                            filterByType('findings');
                            break;
                        case '3':
                            e.preventDefault();
                            filterByType('risks');
                            break;
                    }
                }
            });
            
            console.log('üéØ Enhanced type filtering initialized');
            console.log('‚å®Ô∏è Keyboard shortcuts: Ctrl+1 (All), Ctrl+2 (Findings), Ctrl+3 (Risks)');
        });
    </script>
}