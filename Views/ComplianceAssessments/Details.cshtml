@model CyberRiskApp.Models.ComplianceAssessment
@{
    ViewData["Title"] = $"Assessment: {Model.Title}";
}

<!-- Header with Progress -->
<div class="container-fluid">
    <nav class="navbar navbar-expand-lg navbar-light bg-light rounded mb-4">
        <div class="container-fluid">
            <div class="navbar-brand mb-0">
                <h4 class="mb-0"><i class="fas fa-clipboard-check me-2"></i>@Model.Title</h4>
                <small class="text-muted">@Model.Framework.Name • @Model.Organization.Name</small>
            </div>
            <div class="d-flex align-items-center">
                <div class="me-4">
                    <div class="d-flex align-items-center">
                        <div class="progress me-3" style="height: 8px; width: 120px;">
                            <div class="progress-bar bg-@(Model.CompliancePercentage >= 80 ? "success" : Model.CompliancePercentage >= 60 ? "warning" : "danger")" 
                                 style="width: @Model.CompliancePercentage%;"></div>
                        </div>
                        <small class="text-muted fw-medium">@Model.CompliancePercentage.ToString("F1")%</small>
                    </div>
                </div>
                <div class="btn-group" role="group">
                    @if (Model.Status == CyberRiskApp.Models.AssessmentStatus.Draft)
                    {
                        <form asp-action="StartAssessment" asp-route-id="@Model.Id" method="post" class="d-inline">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-play me-1"></i>Start Assessment
                            </button>
                        </form>
                    }
                    @if (Model.Status == CyberRiskApp.Models.AssessmentStatus.InProgress)
                    {
                        <form asp-action="CompleteAssessment" asp-route-id="@Model.Id" method="post" class="d-inline">
                            <button type="submit" class="btn btn-primary" onclick="return confirm('Are you sure you want to complete this assessment?')">
                                <i class="fas fa-check me-1"></i>Complete Assessment
                            </button>
                        </form>
                    }
                    <button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown">
                        <span class="visually-hidden">Toggle Dropdown</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@Model.Id"><i class="fas fa-edit me-2"></i>Edit Assessment</a></li>
                        <li><a class="dropdown-item" asp-action="BulkView" asp-route-id="@Model.Id"><i class="fas fa-th-list me-2"></i>Bulk View</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#" onclick="exportToExcel()"><i class="fas fa-download me-2"></i>Export Report</a></li>
                    </ul>
                </div>
                <a asp-action="Index" class="btn btn-outline-secondary ms-2">
                    <i class="fas fa-arrow-left me-1"></i>Back
                </a>
            </div>
        </div>
    </nav>

    <!-- Enhanced Compliance Metrics Dashboard -->
    @{
        var totalControls = Model.ControlAssessments.Count(ca => ca.Status != CyberRiskApp.Models.ComplianceStatus.NotApplicable);
        var fullyCompliant = Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.FullyCompliant);
        var majorlyCompliant = Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.MajorlyCompliant);
        var partiallyCompliant = Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant);
        var nonCompliant = Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.NonCompliant);
        var notApplicable = Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.NotApplicable);
        
        // Weighted compliance calculation (Full=100%, Majorly=80%, Partially=50%, Non=0%)
        var weightedScore = (fullyCompliant * 100) + (majorlyCompliant * 80) + (partiallyCompliant * 50);
        var maxPossibleScore = totalControls * 100;
        var weightedCompliancePercentage = maxPossibleScore > 0 ? Math.Round((decimal)weightedScore / maxPossibleScore * 100, 1) : 0;
        
        // Binary compliance percentage (only fully compliant = 100%)
        var binaryCompliancePercentage = totalControls > 0 ? Math.Round((decimal)fullyCompliant / totalControls * 100, 1) : 0;
        
        var complianceGrade = weightedCompliancePercentage >= 90 ? "A" : 
                              weightedCompliancePercentage >= 80 ? "B" : 
                              weightedCompliancePercentage >= 70 ? "C" : 
                              weightedCompliancePercentage >= 60 ? "D" : "F";
    }

    <!-- Compliance Scoring Overview -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 bg-gradient-primary text-white">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-4">
                            <div class="d-flex align-items-center">
                                <div class="display-4 me-3">@weightedCompliancePercentage%</div>
                                <div>
                                    <h5 class="mb-1">Weighted Compliance Score</h5>
                                    <small class="opacity-75">Based on weighted assessment methodology</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 text-center">
                            <div class="display-6 mb-2">@complianceGrade</div>
                            <div class="small">Compliance Grade</div>
                        </div>
                        <div class="col-md-4">
                            <div class="row text-center">
                                <div class="col-6">
                                    <div class="h4 mb-1">@fullyCompliant/@totalControls</div>
                                    <small class="opacity-75">Fully Compliant</small>
                                </div>
                                <div class="col-6">
                                    <div class="h4 mb-1">@binaryCompliancePercentage%</div>
                                    <small class="opacity-75">Binary Compliance</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Detailed Compliance Breakdown -->
    <div class="row mb-4">
        <div class="col-md-8">
            <!-- Compliance Status Distribution -->
            <div class="card">
                <div class="card-header bg-white">
                    <h6 class="mb-0"><i class="fas fa-chart-pie me-2"></i>Compliance Status Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <canvas id="complianceDistributionChart" height="200"></canvas>
                        </div>
                        <div class="col-md-6">
                            <div class="compliance-breakdown">
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <div class="d-flex align-items-center">
                                        <div class="compliance-color-indicator bg-success me-2"></div>
                                        <span>Fully Compliant</span>
                                    </div>
                                    <div class="text-end">
                                        <strong>@fullyCompliant</strong>
                                        <small class="text-muted">(@(totalControls > 0 ? Math.Round((decimal)fullyCompliant / totalControls * 100, 1) : 0)%)</small>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <div class="d-flex align-items-center">
                                        <div class="compliance-color-indicator bg-info me-2"></div>
                                        <span>Majorly Compliant</span>
                                    </div>
                                    <div class="text-end">
                                        <strong>@majorlyCompliant</strong>
                                        <small class="text-muted">(@(totalControls > 0 ? Math.Round((decimal)majorlyCompliant / totalControls * 100, 1) : 0)%)</small>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <div class="d-flex align-items-center">
                                        <div class="compliance-color-indicator bg-warning me-2"></div>
                                        <span>Partially Compliant</span>
                                    </div>
                                    <div class="text-end">
                                        <strong>@partiallyCompliant</strong>
                                        <small class="text-muted">(@(totalControls > 0 ? Math.Round((decimal)partiallyCompliant / totalControls * 100, 1) : 0)%)</small>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                                    <div class="d-flex align-items-center">
                                        <div class="compliance-color-indicator bg-danger me-2"></div>
                                        <span>Non-Compliant</span>
                                    </div>
                                    <div class="text-end">
                                        <strong>@nonCompliant</strong>
                                        <small class="text-muted">(@(totalControls > 0 ? Math.Round((decimal)nonCompliant / totalControls * 100, 1) : 0)%)</small>
                                    </div>
                                </div>
                                @if (notApplicable > 0)
                                {
                                    <div class="d-flex justify-content-between align-items-center py-2">
                                        <div class="d-flex align-items-center">
                                            <div class="compliance-color-indicator bg-secondary me-2"></div>
                                            <span>Not Applicable</span>
                                        </div>
                                        <div class="text-end">
                                            <strong>@notApplicable</strong>
                                            <small class="text-muted">(Excluded from scoring)</small>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <!-- Assessment Info Cards -->
            <div class="row">
                <div class="col-12 mb-3">
                    <div class="card border-0 bg-light h-100">
                        <div class="card-body text-center">
                            <small class="text-muted d-block">Assessor</small>
                            <strong>@Model.Assessor</strong>
                        </div>
                    </div>
                </div>
                <div class="col-12 mb-3">
                    <div class="card border-0 bg-light h-100">
                        <div class="card-body text-center">
                            <small class="text-muted d-block">Status</small>
                            <span class="badge bg-@(Model.Status switch
                            {
                                CyberRiskApp.Models.AssessmentStatus.Draft => "secondary",
                                CyberRiskApp.Models.AssessmentStatus.InProgress => "warning",
                                CyberRiskApp.Models.AssessmentStatus.Completed => "success",
                                CyberRiskApp.Models.AssessmentStatus.Approved => "primary",
                                _ => "secondary"
                            })">
                                @Model.Status
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-12 mb-3">
                    <div class="card border-0 bg-light h-100">
                        <div class="card-body text-center">
                            <small class="text-muted d-block">Due Date</small>
                            <strong>@(Model.DueDate?.ToString("MMM dd") ?? "Not set")</strong>
                        </div>
                    </div>
                </div>
                <div class="col-12 mb-3">
                    <div class="card border-0 bg-light h-100">
                        <div class="card-body text-center">
                            <small class="text-muted d-block">Projects Needed</small>
                            <strong class="text-info">@Model.ControlAssessments.Count(ca => ca.ProjectNeeded)</strong>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scoring Methodology Explanation -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0"><i class="fas fa-calculator me-2"></i>Compliance Scoring Methodology</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <p class="mb-3">Our weighted compliance scoring system provides a nuanced view of organizational compliance maturity:</p>
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>Weighted Scoring Values:</h6>
                                    <ul class="list-unstyled">
                                        <li><span class="badge bg-success me-2">100%</span> Fully Compliant</li>
                                        <li><span class="badge bg-info me-2">80%</span> Majorly Compliant</li>
                                        <li><span class="badge bg-warning me-2">50%</span> Partially Compliant</li>
                                        <li><span class="badge bg-danger me-2">0%</span> Non-Compliant</li>
                                    </ul>
                                </div>
                                <div class="col-md-6">
                                    <h6>Current Score Calculation:</h6>
                                    <div class="small font-monospace bg-light p-3 rounded">
                                        <div>(@fullyCompliant × 100) + (@majorlyCompliant × 80) + (@partiallyCompliant × 50) + (@nonCompliant × 0)</div>
                                        <div>= @weightedScore points out of @maxPossibleScore possible</div>
                                        <div>= <strong>@weightedCompliancePercentage%</strong></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <h6>Grade Scale:</h6>
                            <div class="progress mb-2" style="height: 8px;">
                                <div class="progress-bar bg-@(weightedCompliancePercentage >= 80 ? "success" : weightedCompliancePercentage >= 60 ? "warning" : "danger")" 
                                     style="width: @weightedCompliancePercentage%;"></div>
                            </div>
                            <small class="text-muted">
                                A: 90-100% | B: 80-89% | C: 70-79% | D: 60-69% | F: <60%
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Sidebar Navigation -->
        <div class="col-lg-3">
            <div class="card sticky-top" style="top: 20px;">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-filter me-2"></i>Filters & Actions</h6>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2 mb-3">
                        <button class="btn btn-sm btn-outline-secondary active" onclick="filterByStatus('all')" id="filter-all">Show All (@Model.ControlAssessments.Count)</button>
                        <button class="btn btn-sm btn-outline-danger" onclick="filterByStatus('NonCompliant')" id="filter-noncompliant">Non-Compliant (@Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.NonCompliant))</button>
                        <button class="btn btn-sm btn-outline-warning" onclick="filterByStatus('PartiallyCompliant')" id="filter-partial">Partially Compliant (@Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant))</button>
                        <button class="btn btn-sm btn-outline-success" onclick="filterByStatus('FullyCompliant')" id="filter-compliant">Fully Compliant (@Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.FullyCompliant))</button>
                        <button class="btn btn-sm btn-outline-primary" onclick="filterByProjectNeeded()" id="filter-projects">Projects Needed (@Model.ControlAssessments.Count(ca => ca.ProjectNeeded))</button>
                    </div>
                    <hr>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary btn-sm" onclick="saveAllChanges()">
                            <i class="fas fa-save me-1"></i>Save All Changes
                        </button>
                        <button class="btn btn-outline-info btn-sm" data-bs-toggle="modal" data-bs-target="#bulkUpdateModal">
                            <i class="fas fa-edit me-1"></i>Bulk Update
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" onclick="toggleExpandAll()">
                            <i class="fas fa-expand-arrows-alt me-1"></i>Expand All
                        </button>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="text-success fw-bold">@Model.ControlAssessments.Count(ca => ca.Status == CyberRiskApp.Models.ComplianceStatus.FullyCompliant)</div>
                            <small class="text-muted">Compliant</small>
                        </div>
                        <div class="col-6">
                            @{
                                var daysRemaining = Model.DueDate.HasValue ? (Model.DueDate.Value - DateTime.UtcNow).Days : 0;
                            }
                            <div class="fw-bold text-@(daysRemaining < 0 ? "danger" : daysRemaining < 7 ? "warning" : "info")">
                                @(Model.DueDate.HasValue ? daysRemaining.ToString() : "--")
                            </div>
                            <small class="text-muted">Days Left</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-lg-9">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-tasks me-2"></i>Control Assessments</h5>
                        <span class="badge bg-light text-dark" id="visibleCount">@Model.ControlAssessments.Count controls</span>
                    </div>
                </div>
                
                <!-- Column Headers -->
                <div class="bg-light border-bottom px-4 py-2">
                    <div class="row align-items-center fw-bold text-muted small">
                        <div class="col-lg-3 col-md-3">CONTROL NAME</div>
                        <div class="col-lg-5 col-md-5">CONTROL TEXT</div>
                        <div class="col-lg-3 col-md-3">COMPLIANCE STATUS</div>
                        <div class="col-lg-1 col-md-1 text-end">ACTIONS</div>
                    </div>
                </div>
                
                <div class="card-body p-0">

                    <!-- Control Assessment Cards -->
                    @if (Model.ControlAssessments.Any())
                    {
                        <div id="controlCardsContainer">
                            @foreach (var ca in Model.ControlAssessments.OrderBy(ca => ca.Control.ControlId))
                            {
                                <div class="control-assessment-card border-0 border-bottom py-3 px-4" data-control-id="@ca.Id" data-status="@ca.Status" data-project-needed="@ca.ProjectNeeded.ToString().ToLower()">
                                    <div class="control-header" style="cursor: pointer;" onclick="toggleCard(@ca.Id)">
                                        <div class="row align-items-center">
                                            <div class="col-lg-3 col-md-3 col-sm-12 mb-1 mb-md-0 pe-3">
                                                <div class="d-flex flex-column">
                                                    <div class="d-flex align-items-center gap-2 mb-1">
                                                        <span class="badge bg-primary" style="word-wrap: break-word; overflow-wrap: break-word; white-space: normal; max-width: 100%;">@ca.Control.ControlId</span>
                                                        @if (ca.ProjectNeeded)
                                                        {
                                                            <i class="fas fa-project-diagram text-info" title="Project Required"></i>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-5 col-md-5 col-sm-12 mb-1 mb-md-0 ps-2 pe-3">
                                                <div class="control-text-container">
                                                    <div class="fw-medium control-title" style="word-wrap: break-word; overflow-wrap: break-word; line-height: 1.3; hyphens: auto;">@ca.Control.Title</div>
                                                    @if (!string.IsNullOrEmpty(ca.Control.Description))
                                                    {
                                                        <div class="small text-muted mt-1" style="word-wrap: break-word; overflow-wrap: break-word; line-height: 1.2;">@ca.Control.Description.Substring(0, Math.Min(ca.Control.Description.Length, 120))@(ca.Control.Description.Length > 120 ? "..." : "")</div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-lg-3 col-md-3 col-sm-10 mb-1 mb-md-0 ps-2">
                                                @{
                                                    var controlScore = ca.Status switch
                                                    {
                                                        CyberRiskApp.Models.ComplianceStatus.FullyCompliant => 100,
                                                        CyberRiskApp.Models.ComplianceStatus.MajorlyCompliant => 80,
                                                        CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant => 50,
                                                        CyberRiskApp.Models.ComplianceStatus.NonCompliant => 0,
                                                        CyberRiskApp.Models.ComplianceStatus.NotApplicable => -1,
                                                        _ => 0
                                                    };
                                                    var contributionPercentage = totalControls > 0 && controlScore >= 0 ? Math.Round((decimal)controlScore / totalControls, 2) : 0;
                                                }
                                                <div class="d-flex flex-column align-items-start">
                                                    <span class="badge bg-@(ca.Status switch
                                                    {
                                                        CyberRiskApp.Models.ComplianceStatus.FullyCompliant => "success",
                                                        CyberRiskApp.Models.ComplianceStatus.MajorlyCompliant => "info",
                                                        CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant => "warning",
                                                        CyberRiskApp.Models.ComplianceStatus.NonCompliant => "danger",
                                                        CyberRiskApp.Models.ComplianceStatus.NotApplicable => "secondary",
                                                        _ => "secondary"
                                                    }) text-wrap mb-1">
                                                        @(ca.Status switch
                                                        {
                                                            CyberRiskApp.Models.ComplianceStatus.FullyCompliant => "Fully Compliant",
                                                            CyberRiskApp.Models.ComplianceStatus.MajorlyCompliant => "Majorly Compliant",
                                                            CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant => "Partially Compliant",
                                                            CyberRiskApp.Models.ComplianceStatus.NonCompliant => "Non-Compliant",
                                                            CyberRiskApp.Models.ComplianceStatus.NotApplicable => "N/A",
                                                            _ => "Unknown"
                                                        })
                                                    </span>
                                                    @if (controlScore >= 0)
                                                    {
                                                        <small class="text-muted">
                                                            <i class="fas fa-calculator me-1"></i>@controlScore pts
                                                            <span class="text-primary">(@contributionPercentage% of total)</span>
                                                        </small>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-lg-1 col-md-1 col-sm-2 text-end">
                                                <i class="fas fa-chevron-down card-toggle-icon transition-all" id="toggle-icon-@ca.Id"></i>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="control-details collapse" id="card-body-@ca.Id">
                                        <div class="mt-3 pt-3 border-top">
                                            <!-- Control Description (Full) -->
                                            @if (!string.IsNullOrEmpty(ca.Control.Description))
                                            {
                                                <div class="alert alert-light mb-3">
                                                    <small><strong>Full Control Description:</strong> @ca.Control.Description</small>
                                                </div>
                                            }

                                            <!-- Quick Assessment Row -->
                                            <div class="row mb-3 bg-light rounded p-3">
                                                <div class="col-md-3">
                                                    <label class="form-label small fw-bold text-primary">Compliance Status</label>
                                                    <select class="form-select form-select-sm compliance-status" data-field="Status" data-id="@ca.Id">
                                                        <option value="NonCompliant" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.NonCompliant)">Non-Compliant</option>
                                                        <option value="PartiallyCompliant" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.PartiallyCompliant)">Partially Compliant</option>
                                                        <option value="MajorlyCompliant" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.MajorlyCompliant)">Majorly Compliant</option>
                                                        <option value="FullyCompliant" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.FullyCompliant)">Fully Compliant</option>
                                                        <option value="NotApplicable" selected="@(ca.Status == CyberRiskApp.Models.ComplianceStatus.NotApplicable)">N/A</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-3">
                                                    <label class="form-label small fw-bold">Owner</label>
                                                    <input type="text" class="form-control form-control-sm assessment-field" data-field="Ownership" data-id="@ca.Id" value="@ca.Ownership" placeholder="Owner name" />
                                                </div>
                                                <div class="col-md-3">
                                                    <label class="form-label small fw-bold">Target Date</label>
                                                    <input type="date" class="form-control form-control-sm assessment-field" data-field="ProjectedComplianceDate" data-id="@ca.Id" value="@(ca.ProjectedComplianceDate?.ToString("yyyy-MM-dd"))" />
                                                </div>
                                                <div class="col-md-3">
                                                    <label class="form-label small fw-bold">Project Required</label>
                                                    <div class="form-check mt-2">
                                                        <input class="form-check-input assessment-field" type="checkbox" data-field="ProjectNeeded" data-id="@ca.Id" checked="@ca.ProjectNeeded" />
                                                        <label class="form-check-label small">Improvement needed</label>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Detailed Assessment -->
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="mb-3">
                                                        <label class="form-label small fw-bold">Gap Analysis</label>
                                                        <textarea class="form-control form-control-sm assessment-field" data-field="GapNotes" data-id="@ca.Id" rows="3" placeholder="Describe gaps and issues...">@ca.GapNotes</textarea>
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label small fw-bold">Evidence of Compliance</label>
                                                        <textarea class="form-control form-control-sm assessment-field" data-field="EvidenceOfCompliance" data-id="@ca.Id" rows="3" placeholder="Document evidence, links, procedures...">@ca.EvidenceOfCompliance</textarea>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="row">
                                                        <div class="col-6">
                                                            <label class="form-label small fw-bold">Project Size</label>
                                                            <select class="form-select form-select-sm assessment-field" data-field="TShirtSize" data-id="@ca.Id">
                                                                <option value="">-</option>
                                                                <option value="XS" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.XS)">XS</option>
                                                                <option value="S" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.S)">S</option>
                                                                <option value="M" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.M)">M</option>
                                                                <option value="L" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.L)">L</option>
                                                                <option value="XL" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.XL)">XL</option>
                                                                <option value="XXL" selected="@(ca.TShirtSize == CyberRiskApp.Models.TShirtSize.XXL)">XXL</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-6">
                                                            <label class="form-label small fw-bold">Project Number</label>
                                                            <input type="text" class="form-control form-control-sm assessment-field" data-field="ProjectNumber" data-id="@ca.Id" value="@ca.ProjectNumber" placeholder="Project ref" />
                                                        </div>
                                                    </div>
                                                    
                                                    <!-- Assessment Metadata -->
                                                    @if (!string.IsNullOrEmpty(ca.AssessedBy) || ca.AssessmentDate.HasValue)
                                                    {
                                                        <div class="mt-3 p-2 bg-light rounded">
                                                            <small class="text-muted d-block"><strong>Last Assessed:</strong> @ca.AssessedBy</small>
                                                            <small class="text-muted"><strong>Date:</strong> @(ca.AssessmentDate?.ToString("MMM dd, yyyy") ?? "Not assessed")</small>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                            
                                            <!-- Action Buttons -->
                                            <div class="row mt-3">
                                                <div class="col-12 text-end">
                                                    <button class="btn btn-outline-success btn-sm me-2" onclick="saveControlAssessment(@ca.Id)">
                                                        <i class="fas fa-save me-1"></i>Save
                                                    </button>
                                                    <button class="btn btn-outline-secondary btn-sm me-2" onclick="resetControlAssessment(@ca.Id)">
                                                        <i class="fas fa-undo me-1"></i>Reset
                                                    </button>
                                                    <button class="btn btn-outline-secondary btn-sm" onclick="toggleCard(@ca.Id)">
                                                        <i class="fas fa-chevron-up me-1"></i>Collapse
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                            <h5>No Control Assessments Found</h5>
                            <p class="text-muted">This assessment doesn't have any control assessments yet.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bulk Update Modal -->
<div class="modal fade" id="bulkUpdateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bulk Update Controls</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="bulkUpdateForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Ownership</label>
                                <input type="text" class="form-control" id="bulkOwnership" placeholder="Enter owner name">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Compliance Status</label>
                                <select class="form-select" id="bulkStatus">
                                    <option value="">Don't change</option>
                                    <option value="NonCompliant">Non-Compliant</option>
                                    <option value="PartiallyCompliant">Partially Compliant</option>
                                    <option value="MajorlyCompliant">Majorly Compliant</option>
                                    <option value="FullyCompliant">Fully Compliant</option>
                                    <option value="NotApplicable">N/A</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Projected Compliance Date</label>
                                <input type="date" class="form-control" id="bulkProjectedDate">
                            </div>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="bulkProjectNeeded">
                                    <label class="form-check-label" for="bulkProjectNeeded">
                                        Mark all as "Project Needed"
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="applyBulkUpdate()">Apply Changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .sticky-top {
            top: 20px !important;
        }
        .control-assessment-card {
            transition: all 0.3s ease;
            overflow: hidden;
        }
        .control-assessment-card:hover {
            background-color: #f8f9fa;
        }
        .control-details {
            animation: slideDown 0.3s ease;
        }
        @@keyframes slideDown {
            from { opacity: 0; max-height: 0; }
            to { opacity: 1; max-height: 800px; }
        }
        .transition-all {
            transition: all 0.3s ease;
        }
        .btn.active {
            background-color: #0d6efd !important;
            color: white !important;
        }
        .control-header .row {
            margin: 0;
            align-items: flex-start;
        }
        .control-header .row > [class*='col-'] {
            min-width: 0;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        .control-title {
            word-wrap: break-word;
            overflow-wrap: break-word;
            hyphens: auto;
            display: block;
        }
        /* Proper column spacing with gutters */
        .control-header .row.gx-2 {
            --bs-gutter-x: 0.5rem;
        }
        .control-header .pe-2 {
            padding-right: 0.75rem !important;
        }
        /* Control ID styling */
        .badge.text-nowrap {
            white-space: nowrap;
            flex-shrink: 0;
        }
        /* Wrapping badge styling */
        .badge {
            line-height: 1.2;
        }
        /* Column headers styling */
        .bg-light .row > [class*='col-'] {
            padding-left: 0.75rem;
            padding-right: 0.75rem;
        }
        /* Flex container for control ID and icon */
        .d-flex.gap-2 {
            gap: 0.5rem !important;
        }
        .badge.text-wrap {
            white-space: normal;
            word-wrap: break-word;
        }
        @@media (max-width: 768px) {
            .control-header .row {
                flex-direction: column;
                align-items: flex-start !important;
            }
            .control-header .text-end {
                text-align: left !important;
                align-self: flex-end;
            }
            .control-header .col-lg-5 {
                margin-bottom: 0.5rem;
            }
        }

        /* Compliance breakdown styling */
        .compliance-color-indicator {
            width: 12px;
            height: 12px;
            border-radius: 2px;
            flex-shrink: 0;
        }
        
        .compliance-breakdown .py-2 {
            border-bottom-color: rgba(0,0,0,0.1) !important;
        }
        
        .bg-gradient-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        }
    </style>
    <script>
        let unsavedChanges = false;

        // Toggle individual card
        function toggleCard(controlId) {
            const cardBody = document.getElementById(`card-body-${controlId}`);
            const icon = document.getElementById(`toggle-icon-${controlId}`);

            if (cardBody.classList.contains('show')) {
                cardBody.classList.remove('show');
                icon.classList.replace('fa-chevron-up', 'fa-chevron-down');
            } else {
                cardBody.classList.add('show');
                icon.classList.replace('fa-chevron-down', 'fa-chevron-up');
            }
        }

        // Toggle all cards
        function toggleExpandAll() {
            const allCardBodies = document.querySelectorAll('[id^="card-body-"]');
            const allIcons = document.querySelectorAll('[id^="toggle-icon-"]');

            const firstCard = allCardBodies[0];
            const shouldExpand = !firstCard.classList.contains('show');

            allCardBodies.forEach(cardBody => {
                if (shouldExpand) {
                    cardBody.classList.add('show');
                } else {
                    cardBody.classList.remove('show');
                }
            });

            allIcons.forEach(icon => {
                if (shouldExpand) {
                    icon.classList.remove('fa-chevron-down');
                    icon.classList.add('fa-chevron-up');
                } else {
                    icon.classList.remove('fa-chevron-up');
                    icon.classList.add('fa-chevron-down');
                }
            });
        }

        // Filter by status with improved UX
        function filterByStatus(status) {
            const allCards = document.querySelectorAll('.control-assessment-card');
            const filterButtons = document.querySelectorAll('[onclick*="filterByStatus"]');
            let visibleCount = 0;

            // Update button states
            filterButtons.forEach(btn => btn.classList.remove('active'));
            document.getElementById(`filter-${status === 'all' ? 'all' : status.toLowerCase().replace('compliant', '').replace('non', 'noncompliant')}`).classList.add('active');

            allCards.forEach(card => {
                const cardStatus = card.getAttribute('data-status');
                const shouldShow = status === 'all' || cardStatus === status;
                
                card.style.display = shouldShow ? 'block' : 'none';
                if (shouldShow) visibleCount++;
            });

            // Update visible count
            document.getElementById('visibleCount').textContent = `${visibleCount} controls`;
        }

        // Filter by project needed with improved UX
        function filterByProjectNeeded() {
            const allCards = document.querySelectorAll('.control-assessment-card');
            const filterButtons = document.querySelectorAll('[onclick*="filter"]');
            let visibleCount = 0;

            // Update button states
            filterButtons.forEach(btn => btn.classList.remove('active'));
            document.getElementById('filter-projects').classList.add('active');

            allCards.forEach(card => {
                const projectNeeded = card.getAttribute('data-project-needed') === 'true';
                card.style.display = projectNeeded ? 'block' : 'none';
                if (projectNeeded) visibleCount++;
            });

            // Update visible count
            document.getElementById('visibleCount').textContent = `${visibleCount} controls`;
        }

        // Save individual control assessment
        function saveControlAssessment(controlAssessmentId) {
            const data = {};
            const card = document.querySelector(`[data-control-id="${controlAssessmentId}"]`);

            // Collect all field data
            card.querySelectorAll('.assessment-field, .compliance-status').forEach(element => {
                const field = element.getAttribute('data-field');
                let value = element.value;

                if (element.type === 'checkbox') {
                    value = element.checked;
                } else if (element.type === 'date' && value === '') {
                    value = null;
                }

                data[field] = value;
            });

            // Send AJAX request
            fetch(`/ComplianceAssessments/UpdateControlAssessment/${controlAssessmentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showToast('Control assessment updated successfully!', 'success');
                    // Update the badge in the card header
                    updateCardBadge(controlAssessmentId, data.Status);
                    location.reload(); // Refresh to update compliance percentage
                } else {
                    showToast(result.message || 'Error updating control assessment', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating control assessment', 'error');
            });
        }

        // Update card header badge
        function updateCardBadge(controlAssessmentId, status) {
            const card = document.querySelector(`[data-control-id="${controlAssessmentId}"]`);
            const badge = card.querySelector('.badge');

            // Remove existing badge classes
            badge.className = 'badge';

            // Add new class and text based on status
            switch(status) {
                case 'FullyCompliant':
                    badge.classList.add('bg-success');
                    badge.textContent = 'Fully Compliant';
                    break;
                case 'MajorlyCompliant':
                    badge.classList.add('bg-info');
                    badge.textContent = 'Majorly Compliant';
                    break;
                case 'PartiallyCompliant':
                    badge.classList.add('bg-warning');
                    badge.textContent = 'Partially Compliant';
                    break;
                case 'NonCompliant':
                    badge.classList.add('bg-danger');
                    badge.textContent = 'Non-Compliant';
                    break;
                case 'NotApplicable':
                    badge.classList.add('bg-secondary');
                    badge.textContent = 'N/A';
                    break;
            }
        }

        // Reset control assessment
        function resetControlAssessment(controlAssessmentId) {
            if (confirm('Are you sure you want to reset this control assessment to its last saved state?')) {
                location.reload();
            }
        }

        // Save all changes
        function saveAllChanges() {
            const updates = [];
            document.querySelectorAll('.control-assessment-card').forEach(card => {
                const controlAssessmentId = card.getAttribute('data-control-id');
                const data = { id: controlAssessmentId };

                card.querySelectorAll('.assessment-field, .compliance-status').forEach(element => {
                    const field = element.getAttribute('data-field');
                    let value = element.value;

                    if (element.type === 'checkbox') {
                        value = element.checked;
                    } else if (element.type === 'date' && value === '') {
                        value = null;
                    }

                    data[field] = value;
                });

                updates.push(data);
            });

            fetch('/ComplianceAssessments/UpdateAllControlAssessments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(updates)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showToast('All control assessments updated successfully!', 'success');
                    location.reload();
                } else {
                    showToast(result.message || 'Error updating control assessments', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating control assessments', 'error');
            });
        }

        // Apply bulk update
        function applyBulkUpdate() {
            const ownership = document.getElementById('bulkOwnership').value;
            const status = document.getElementById('bulkStatus').value;
            const projectedDate = document.getElementById('bulkProjectedDate').value;
            const projectNeeded = document.getElementById('bulkProjectNeeded').checked;

            if (!ownership && !status && !projectedDate && !projectNeeded) {
                showToast('Please fill in at least one field to update', 'warning');
                return;
            }

            // Apply to all visible cards
            document.querySelectorAll('.control-assessment-card:not([style*="display: none"])').forEach(card => {
                if (ownership) {
                    const ownershipInput = card.querySelector('[data-field="Ownership"]');
                    if (ownershipInput) ownershipInput.value = ownership;
                }
                if (status) {
                    const statusSelect = card.querySelector('[data-field="Status"]');
                    if (statusSelect) statusSelect.value = status;
                }
                if (projectedDate) {
                    const dateInput = card.querySelector('[data-field="ProjectedComplianceDate"]');
                    if (dateInput) dateInput.value = projectedDate;
                }
                if (projectNeeded) {
                    const projectCheckbox = card.querySelector('[data-field="ProjectNeeded"]');
                    if (projectCheckbox) projectCheckbox.checked = true;
                }
            });

            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('bulkUpdateModal')).hide();
            showToast('Bulk update applied. Remember to save changes!', 'info');
        }

        // Export to Excel
        function exportToExcel() {
            window.location.href = `/ComplianceAssessments/ExportToExcel/@Model.Id`;
        }

        // Toast notification helper
        function showToast(message, type) {
            const toastContainer = document.querySelector('.toast-container') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 5000);
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '1055';
            document.body.appendChild(container);
            return container;
        }

        // Enhanced change tracking and auto-updates
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('compliance-status')) {
                const controlId = e.target.getAttribute('data-id');
                updateCardBadge(controlId, e.target.value);
                // Update data attribute for filtering
                const card = document.querySelector(`[data-control-id="${controlId}"]`);
                card.setAttribute('data-status', e.target.value);
            }
            
            if (e.target.classList.contains('assessment-field')) {
                unsavedChanges = true;
                if (e.target.getAttribute('data-field') === 'ProjectNeeded') {
                    // Update data attribute for filtering
                    const controlId = e.target.getAttribute('data-id');
                    const card = document.querySelector(`[data-control-id="${controlId}"]`);
                    card.setAttribute('data-project-needed', e.target.checked.toString());
                    
                    // Update project icon in header
                    const projectIcon = card.querySelector('.fa-project-diagram');
                    if (e.target.checked && !projectIcon) {
                        const badge = card.querySelector('.badge.bg-primary');
                        badge.insertAdjacentHTML('afterend', ' <i class="fas fa-project-diagram text-info" title="Project Required"></i>');
                    } else if (!e.target.checked && projectIcon) {
                        projectIcon.remove();
                    }
                }
            }
        });

        // Auto-save notification
        function notifyUnsavedChanges() {
            if (unsavedChanges) {
                const saveBtn = document.querySelector('.btn-primary');
                saveBtn.innerHTML = '<i class="fas fa-save me-1"></i>Save All Changes <span class="badge bg-warning ms-1">!</span>';
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Set up change notifications
            setInterval(notifyUnsavedChanges, 2000);
            
            // Warn before leaving with unsaved changes
            window.addEventListener('beforeunload', function(e) {
                if (unsavedChanges) {
                    e.preventDefault();
                    e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
                }
            });

            // Initialize compliance distribution chart
            initializeComplianceChart();
        });

        function initializeComplianceChart() {
            const ctx = document.getElementById('complianceDistributionChart');
            if (ctx) {
                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Fully Compliant', 'Majorly Compliant', 'Partially Compliant', 'Non-Compliant'],
                        datasets: [{
                            data: [@fullyCompliant, @majorlyCompliant, @partiallyCompliant, @nonCompliant],
                            backgroundColor: [
                                '#28a745', // Success green
                                '#17a2b8', // Info blue
                                '#ffc107', // Warning yellow
                                '#dc3545'  // Danger red
                            ],
                            borderWidth: 2,
                            borderColor: '#fff',
                            hoverBorderWidth: 3
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true,
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const total = @totalControls;
                                        const value = context.parsed;
                                        const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                        return context.label + ': ' + value + ' (' + percentage + '%)';
                                    }
                                }
                            }
                        },
                        cutout: '60%'
                    }
                });
            }
        }
    </script>
}

@{
    // Add anti-forgery token for AJAX requests
}
<input name="__RequestVerificationToken" type="hidden" value="@Html.AntiForgeryToken()" />