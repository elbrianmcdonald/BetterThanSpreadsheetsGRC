@model CyberRiskApp.Models.RiskAcceptanceRequest

@{
    ViewData["Title"] = "Risk Acceptance Request Details";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="text-primary">
                    <i class="fas fa-shield-alt me-2"></i>Risk Acceptance Request #@Model.Id
                </h2>
                <div>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Back to Requests
                    </a>
                    @if (Model.Status == CyberRiskApp.Models.RequestStatus.PendingApproval && (User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager") || User.IsInRole("Admin")))
                    {
                        <a asp-action="ReviewAcceptance" asp-route-id="@Model.Id" class="btn btn-warning">
                            <i class="fas fa-gavel me-2"></i>Review Request
                        </a>
                    }
                </div>
            </div>

            <div class="row">
                <!-- Request Details -->
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header bg-@GetStatusColor(Model.Status) text-white">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle me-2"></i>Request Details
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <h6 class="text-primary">Risk Description</h6>
                                <p>@Model.Description</p>
                            </div>

                            <div class="mb-3">
                                <h6 class="text-primary">Business Need</h6>
                                <div class="bg-light p-3 rounded">
                                    @foreach (var line in Model.BusinessNeed.Split('\n'))
                                    {
                                        <p class="mb-1">@line</p>
                                    }
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <strong>Requester:</strong> @Model.Requester
                                </div>
                                <div class="col-md-6">
                                    <strong>Request Date:</strong> @Model.RequestDate.ToString("yyyy-MM-dd")
                                </div>
                            </div>

                            @if (Model.ReviewDate.HasValue)
                            {
                                <hr>
                                <div class="mb-3">
                                    <h6 class="text-primary">Review Information</h6>
                                    <div class="row mb-2">
                                        <div class="col-md-6">
                                            <strong>Reviewed By:</strong> @Model.ReviewedBy
                                        </div>
                                        <div class="col-md-6">
                                            <strong>Review Date:</strong> @Model.ReviewDate.Value.ToString("yyyy-MM-dd")
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(Model.ReviewComments))
                                    {
                                        <div class="mb-2">
                                            <strong>Review Comments:</strong>
                                            <div class="bg-light p-3 rounded mt-2">
                                                @foreach (var line in Model.ReviewComments.Split('\n'))
                                                {
                                                    <p class="mb-1">@line</p>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>

                                @* GRC Analysis Information *@
                                @if (!string.IsNullOrEmpty(Model.RiskSummary) || 
                                     !string.IsNullOrEmpty(Model.CurrentCompensatingControls) ||
                                     !string.IsNullOrEmpty(Model.TreatmentPlan) ||
                                     !string.IsNullOrEmpty(Model.CISORecommendation))
                                {
                                    <hr>
                                    <div class="mb-3">
                                        <h6 class="text-primary"><i class="fas fa-shield-alt me-1"></i>GRC Risk Analysis</h6>
                                        
                                        @if (!string.IsNullOrEmpty(Model.RiskSummary))
                                        {
                                            <div class="mb-3">
                                                <strong>Risk Summary:</strong>
                                                <div class="bg-light p-3 rounded mt-1">
                                                    @foreach (var line in Model.RiskSummary.Split('\n'))
                                                    {
                                                        <p class="mb-1">@line</p>
                                                    }
                                                </div>
                                            </div>
                                        }

                                        @if (!string.IsNullOrEmpty(Model.CurrentCompensatingControls))
                                        {
                                            <div class="mb-3">
                                                <strong>Current Compensating Controls:</strong>
                                                <div class="bg-light p-3 rounded mt-1">
                                                    @foreach (var line in Model.CurrentCompensatingControls.Split('\n'))
                                                    {
                                                        <p class="mb-1">@line</p>
                                                    }
                                                </div>
                                            </div>
                                        }

                                        @if (Model.CurrentRiskLevelWithControls.HasValue)
                                        {
                                            <div class="mb-3">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <strong>Risk with Current Controls:</strong>
                                                        <span class="badge bg-@GetRiskColor(Model.CurrentRiskLevelWithControls.Value) ms-2">@Model.CurrentRiskLevelWithControls</span>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                        @if (!string.IsNullOrEmpty(Model.TreatmentPlan))
                                        {
                                            <div class="mb-3">
                                                <strong>Treatment Plan:</strong>
                                                <div class="bg-light p-3 rounded mt-1">
                                                    @foreach (var line in Model.TreatmentPlan.Split('\n'))
                                                    {
                                                        <p class="mb-1">@line</p>
                                                    }
                                                </div>
                                            </div>
                                        }

                                        @if (!string.IsNullOrEmpty(Model.ProposedCompensatingControls))
                                        {
                                            <div class="mb-3">
                                                <strong>Proposed Compensating Controls:</strong>
                                                <div class="bg-light p-3 rounded mt-1">
                                                    @foreach (var line in Model.ProposedCompensatingControls.Split('\n'))
                                                    {
                                                        <p class="mb-1">@line</p>
                                                    }
                                                </div>
                                            </div>
                                        }

                                        @if (Model.FutureRiskLevelWithMitigations.HasValue)
                                        {
                                            <div class="mb-3">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <strong>Risk with All Mitigations:</strong>
                                                        <span class="badge bg-@GetRiskColor(Model.FutureRiskLevelWithMitigations.Value) ms-2">@Model.FutureRiskLevelWithMitigations</span>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                        @if (!string.IsNullOrEmpty(Model.CISORecommendation))
                                        {
                                            <div class="mb-3">
                                                <strong>CISO Office Recommendation:</strong>
                                                <div class="bg-light p-3 rounded mt-1">
                                                    @foreach (var line in Model.CISORecommendation.Split('\n'))
                                                    {
                                                        <p class="mb-1">@line</p>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <!-- Status and Finding Info -->
                <div class="col-md-4">
                    <div class="card mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">Status</h6>
                        </div>
                        <div class="card-body text-center">
                            <span class="badge bg-@GetStatusColor(Model.Status) fs-5">@GetStatusText(Model.Status)</span>
                            <br><br>
                            @if (Model.Status == CyberRiskApp.Models.RequestStatus.PendingApproval)
                            {
                                <small class="text-muted">
                                    <i class="fas fa-clock me-1"></i>Waiting for GRC review
                                </small>
                            }
                            else if (Model.Status == CyberRiskApp.Models.RequestStatus.Approved)
                            {
                                <small class="text-success">
                                    <i class="fas fa-check me-1"></i>Risk acceptance approved
                                </small>
                            }
                            else if (Model.Status == CyberRiskApp.Models.RequestStatus.Rejected)
                            {
                                <small class="text-danger">
                                    <i class="fas fa-times me-1"></i>Risk acceptance rejected
                                </small>
                            }
                        </div>
                    </div>

                    @if (Model.LinkedFinding != null)
                    {
                        <div class="card">
                            <div class="card-header bg-light">
                                <h6 class="mb-0"><i class="fas fa-search me-2"></i>Linked Finding</h6>
                            </div>
                            <div class="card-body">
                                <div class="text-center mb-3">
                                    <a asp-controller="Findings" asp-action="Details" asp-route-id="@Model.LinkedFinding.Id"
                                       class="btn btn-outline-primary">
                                        <i class="fas fa-search me-2"></i>View Finding #@Model.LinkedFinding.FindingNumber
                                    </a>
                                </div>

                                <div class="mb-2">
                                    <strong>Title:</strong><br>
                                    <small>@Model.LinkedFinding.Title</small>
                                </div>

                                <div class="mb-2">
                                    <strong>Risk Rating:</strong><br>
                                    <span class="badge bg-@GetRiskColor(Model.LinkedFinding.RiskRating)">
                                        @Model.LinkedFinding.RiskRating
                                    </span>
                                </div>

                                <div class="mb-2">
                                    <strong>Owner:</strong><br>
                                    <small>@Model.LinkedFinding.Owner</small>
                                </div>

                                <div class="mb-2">
                                    <strong>Business Unit:</strong><br>
                                    <small>@Model.LinkedFinding.BusinessUnit</small>
                                </div>

                                <div>
                                    <strong>Finding Status:</strong><br>
                                    <span class="badge bg-@GetFindingStatusColor(Model.LinkedFinding.Status)">
                                        @GetFindingStatusText(Model.LinkedFinding.Status)
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                    else if (Model.LinkedRisk != null)
                    {
                        <div class="card">
                            <div class="card-header bg-light">
                                <h6 class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i>Linked Risk</h6>
                            </div>
                            <div class="card-body">
                                <div class="text-center mb-3">
                                    <a asp-controller="RiskAssessments" asp-action="Details" asp-route-id="@Model.LinkedRisk.Id"
                                       class="btn btn-outline-warning">
                                        <i class="fas fa-exclamation-triangle me-2"></i>View Risk #@Model.LinkedRisk.RiskNumber
                                    </a>
                                </div>

                                <div class="mb-2">
                                    <strong>Title:</strong><br>
                                    <small>@Model.LinkedRisk.Title</small>
                                </div>

                                <div class="mb-2">
                                    <strong>Risk Level:</strong><br>
                                    <span class="badge bg-@GetRiskLevelColor(Model.LinkedRisk.RiskLevel)">
                                        @Model.LinkedRisk.RiskLevel
                                    </span>
                                </div>

                                <div class="mb-2">
                                    <strong>Owner:</strong><br>
                                    <small>@Model.LinkedRisk.Owner</small>
                                </div>

                                <div class="mb-2">
                                    <strong>Business Unit:</strong><br>
                                    <small>@Model.LinkedRisk.BusinessUnit</small>
                                </div>

                                <div class="mb-2">
                                    <strong>ALE:</strong><br>
                                    <small>@Model.LinkedRisk.ALE.ToString("C")</small>
                                </div>

                                <div class="mb-2">
                                    <strong>Asset:</strong><br>
                                    <small>@Model.LinkedRisk.Asset</small>
                                </div>

                                <div class="mb-2">
                                    <strong>Treatment:</strong><br>
                                    <small>@Model.LinkedRisk.Treatment</small>
                                </div>

                                <div>
                                    <strong>Risk Status:</strong><br>
                                    <span class="badge bg-@GetRiskStatusColor(Model.LinkedRisk.Status)">
                                        @GetRiskStatusText(Model.LinkedRisk.Status)
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetStatusColor(CyberRiskApp.Models.RequestStatus status)
    {
        return status switch
        {
            CyberRiskApp.Models.RequestStatus.PendingApproval => "warning",
            CyberRiskApp.Models.RequestStatus.Approved => "success",
            CyberRiskApp.Models.RequestStatus.Rejected => "danger",
            _ => "secondary"
        };
    }

    private string GetStatusText(CyberRiskApp.Models.RequestStatus status)
    {
        return status switch
        {
            CyberRiskApp.Models.RequestStatus.PendingApproval => "Pending Approval",
            CyberRiskApp.Models.RequestStatus.Approved => "Approved",
            CyberRiskApp.Models.RequestStatus.Rejected => "Rejected",
            _ => status.ToString()
        };
    }

    private string GetRiskColor(CyberRiskApp.Models.RiskRating rating)
    {
        return rating switch
        {
            CyberRiskApp.Models.RiskRating.Low => "success",
            CyberRiskApp.Models.RiskRating.Medium => "warning",
            CyberRiskApp.Models.RiskRating.High => "danger",
            CyberRiskApp.Models.RiskRating.Critical => "dark",
            _ => "secondary"
        };
    }

    private string GetRiskLevelColor(CyberRiskApp.Models.RiskLevel level)
    {
        return level switch
        {
            CyberRiskApp.Models.RiskLevel.Low => "success",
            CyberRiskApp.Models.RiskLevel.Medium => "warning",
            CyberRiskApp.Models.RiskLevel.High => "danger",
            CyberRiskApp.Models.RiskLevel.Critical => "dark",
            _ => "secondary"
        };
    }

    private string GetFindingStatusColor(CyberRiskApp.Models.FindingStatus status)
    {
        return status switch
        {
            CyberRiskApp.Models.FindingStatus.Open => "warning",
            CyberRiskApp.Models.FindingStatus.Closed => "success",
            CyberRiskApp.Models.FindingStatus.RiskAccepted => "info",
            _ => "secondary"
        };
    }

    private string GetFindingStatusText(CyberRiskApp.Models.FindingStatus status)
    {
        return status switch
        {
            CyberRiskApp.Models.FindingStatus.Open => "Open",
            CyberRiskApp.Models.FindingStatus.Closed => "Closed",
            CyberRiskApp.Models.FindingStatus.RiskAccepted => "Risk Accepted",
            _ => status.ToString()
        };
    }

    private string GetRiskStatusColor(CyberRiskApp.Models.RiskStatus status)
    {
        return status switch
        {
            CyberRiskApp.Models.RiskStatus.Open => "warning",
            CyberRiskApp.Models.RiskStatus.Closed => "success",
            CyberRiskApp.Models.RiskStatus.Accepted => "info",
            _ => "secondary"
        };
    }

    private string GetRiskStatusText(CyberRiskApp.Models.RiskStatus status)
    {
        return status switch
        {
            CyberRiskApp.Models.RiskStatus.Open => "Open",
            CyberRiskApp.Models.RiskStatus.Closed => "Closed",
            CyberRiskApp.Models.RiskStatus.Accepted => "Risk Accepted",
            _ => status.ToString()
        };
    }
}