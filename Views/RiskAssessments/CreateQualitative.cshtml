@model CyberRiskApp.ViewModels.FAIRAssessmentViewModel
@{
    ViewData["Title"] = "Create Qualitative Risk Assessment";
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-balance-scale text-warning me-2"></i>
                    Create Qualitative Risk Assessment
                    <span class="badge bg-warning text-dark ms-2">Qualitative</span>
                </h2>
                <div>
                    <a asp-action="SelectType" class="btn btn-outline-success me-2">
                        <i class="fas fa-exchange-alt me-1"></i>Change Type
                    </a>
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-1"></i>Back to List
                    </a>
                </div>
            </div>

            <form asp-action="CreateQualitative" method="post" id="qualitativeAssessmentForm" novalidate>
                <div asp-validation-summary="All" class="alert alert-danger"></div>
                
                <!-- Hidden field to set assessment type -->
                <input type="hidden" name="Assessment.AssessmentType" value="0" />
                
                <!-- Ensure no empty IdentifiedRisks are created by default -->
                <!-- We'll only add these dynamically through JavaScript -->
                
                <!-- Basic Information -->
                <div class="card mb-4">
                    <div class="card-header bg-primary bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-info-circle me-2"></i>Basic Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.Title" class="form-label fw-bold">Assessment Title <span class="text-danger">*</span></label>
                                    <input asp-for="Assessment.Title" class="form-control" placeholder="Enter assessment title" required />
                                    <span asp-validation-for="Assessment.Title" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.Asset" class="form-label fw-bold">Primary Asset <span class="text-danger">*</span></label>
                                    @Html.AssetComboboxFor(m => m.Assessment.Asset, canAddNew: User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"), required: true)
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.BusinessUnit" class="form-label fw-bold">Business Unit</label>
                                    @Html.BusinessUnitComboboxFor(m => m.Assessment.BusinessUnit, canAddNew: User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.BusinessOwner" class="form-label fw-bold">Business Owner</label>
                                    @Html.BusinessOwnerComboboxFor(m => m.Assessment.BusinessOwner, canAddNew: User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.CIATriad" class="form-label fw-bold">CIA Triad Impact</label>
                                    <select asp-for="Assessment.CIATriad" class="form-control">
                                        <option value="">Select CIA Impact</option>
                                        <option value="1">Confidentiality</option>
                                        <option value="2">Integrity</option>
                                        <option value="3">Availability</option>
                                        <option value="4">Confidentiality & Integrity</option>
                                        <option value="5">Confidentiality & Availability</option>
                                        <option value="6">Integrity & Availability</option>
                                        <option value="7">All Three (CIA)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Assessment.RiskMatrixId" class="form-label fw-bold">Risk Matrix <span class="text-danger">*</span></label>
                                    <select asp-for="Assessment.RiskMatrixId" class="form-control" id="riskMatrixSelector" required onchange="loadMatrixData(this.value)">
                                        <option value="">Select Risk Matrix</option>
                                        @if (ViewBag.AvailableMatrices != null)
                                        {
                                            @foreach (var matrix in ViewBag.AvailableMatrices as List<CyberRiskApp.Models.RiskMatrix>)
                                            {
                                                <option value="@matrix.Id" selected="@(matrix.Id == Model.Assessment.RiskMatrixId)">
                                                    @matrix.Name (@matrix.MatrixSize×@matrix.MatrixSize @matrix.MatrixType.ToString().Replace("ImpactLikelihood", "Impact×Likelihood").Replace("Exposure", "×Exposure"))
                                                </option>
                                            }
                                        }
                                    </select>
                                    <span asp-validation-for="Assessment.RiskMatrixId" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                        
                        
                        <div class="mb-3">
                            <label asp-for="Assessment.Description" class="form-label fw-bold">Business Use</label>
                            <textarea asp-for="Assessment.Description" class="form-control" rows="2" placeholder="Describe how this system aids the business"></textarea>
                        </div>

                        <!-- Threat Model Selection -->
                        @if (Model.AvailableThreatModels != null && Model.AvailableThreatModels.Any())
                        {
                            <div class="mb-3">
                                <label class="form-label fw-bold">Link Threat Models (Optional)</label>
                                <div class="border rounded p-3" style="max-height: 200px; overflow-y: auto;">
                                    @foreach (var threatModel in Model.AvailableThreatModels)
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" 
                                                   name="SelectedThreatModelIds" 
                                                   value="@threatModel.Id" 
                                                   id="threat_@threatModel.Id"
                                                   @(Model.SelectedThreatModelIds.Contains(threatModel.Id) ? "checked" : "") />
                                            <label class="form-check-label" for="threat_@threatModel.Id">
                                                <strong>@threatModel.Name</strong>
                                                @if (threatModel.Status == CyberRiskApp.Models.AttackChainStatus.Approved)
                                                {
                                                    <span class="badge bg-primary ms-2">Approved</span>
                                                }
                                                else if (threatModel.Status == CyberRiskApp.Models.AttackChainStatus.Reviewed)
                                                {
                                                    <span class="badge bg-success ms-2">Reviewed</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning text-dark ms-2">@threatModel.Status</span>
                                                }
                                                <br>
                                                <small class="text-muted">@(threatModel.Description?.Length > 100 ? threatModel.Description.Substring(0, 100) + "..." : threatModel.Description)</small>
                                                @if (threatModel.AttackChainSteps?.Any() == true)
                                                {
                                                    <br><small class="text-info">@threatModel.AttackChainSteps.Count attack steps</small>
                                                }
                                            </label>
                                        </div>
                                    }
                                </div>
                                <small class="form-text text-muted">Select threat models to link with this risk assessment. This helps track which attack scenarios are being assessed.</small>
                            </div>
                        }
                    </div>
                </div>

                <!-- Risk Level Settings Information -->
                @if(Model.RiskLevelSettings != null)
                {
                    <div class="alert alert-info">
                        <div class="row">
                            <div class="col-md-6">
                                <h6><i class="fas fa-info-circle me-2"></i>Current Risk Level Thresholds</h6>
                                <ul class="mb-0">
                                    <li><strong>Critical:</strong> @Model.RiskLevelSettings.QualitativeCriticalThreshold.ToString("F1")+</li>
                                    <li><strong>High:</strong> @Model.RiskLevelSettings.QualitativeHighThreshold.ToString("F1") - @((Model.RiskLevelSettings.QualitativeCriticalThreshold - 0.1m).ToString("F1"))</li>
                                    <li><strong>Medium:</strong> @Model.RiskLevelSettings.QualitativeMediumThreshold.ToString("F1") - @((Model.RiskLevelSettings.QualitativeHighThreshold - 0.1m).ToString("F1"))</li>
                                    <li><strong>Low:</strong> 0.0 - @((Model.RiskLevelSettings.QualitativeMediumThreshold - 0.1m).ToString("F1"))</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="fas fa-target me-2"></i>Risk Appetite</h6>
                                <p class="mb-0">
                                    Risk scores above <strong>@Model.RiskLevelSettings.RiskAppetiteThreshold.ToString("F1")</strong> are considered above organizational risk appetite.
                                </p>
                            </div>
                        </div>
                    </div>
                }

                <!-- Threat Scenario Details -->
                <div class="card mb-4">
                    <div class="card-header bg-success bg-opacity-10">
                        <h5 class="mb-0">
                            <i class="fas fa-shield-alt me-2"></i>Threat Scenario Details
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            Model complete threat scenarios using MITRE ATT&CK framework and Lockheed Martin Kill Chain. Add multiple scenarios to comprehensively analyze different attack paths.
                        </div>

                        <div id="threatScenariosContainer">
                            <!-- Threat scenarios will be added here dynamically -->
                        </div>
                        
                        <button type="button" class="btn btn-primary" onclick="addThreatScenario()">
                            <i class="fas fa-plus me-1"></i>Add Threat Scenario
                        </button>
                    </div>
                </div>




                <!-- Submit Buttons -->
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-warning btn-lg text-dark">
                                <i class="fas fa-save me-2"></i>Create Qualitative Assessment
                            </button>
                            <a asp-action="Index" class="btn btn-secondary btn-lg">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let qualitativeControlIndex = 0;
        let riskIndex = 0;
        let threatEventIndex = 0;
        let vulnerabilityIndex = 0;
        let lossEventIndex = 0;
        let threatScenarioIndex = 0;
        let scenarioRiskIndex = 0;
        
        // Main threat scenario management
        function addThreatScenario() {
            const container = document.getElementById('threatScenariosContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))' === 'True';
            
            const scenarioHtml = `
                <div class="threat-scenario-item card mb-4 border-primary" id="threatScenario_${threatScenarioIndex}">
                    <div class="card-header bg-primary bg-opacity-10 d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="fas fa-sitemap me-2"></i>Threat Scenario ${threatScenarioIndex + 1}
                        </h6>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeThreatScenario(${threatScenarioIndex})" title="Remove Threat Scenario">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    <div class="card-body">
                        <!-- Scenario Name -->
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <label class="form-label fw-bold">Scenario Name</label>
                                <input type="text" name="ThreatScenarios[${threatScenarioIndex}].Name" 
                                       class="form-control" placeholder="Name this threat scenario..." />
                            </div>
                        </div>
                        
                        <!-- Threat Scenario Description -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <label class="form-label fw-bold">Threat Scenario Description <span class="text-danger">*</span></label>
                                <textarea name="ThreatScenarios[${threatScenarioIndex}].Description" 
                                          class="form-control" rows="3" 
                                          placeholder="Describe this specific threat scenario in detail..." 
                                          required></textarea>
                            </div>
                        </div>
                        
                        <!-- Initial Threat Vector Section -->
                        <div class="card mb-3">
                            <div class="card-header bg-danger bg-opacity-10">
                                <h6 class="mb-0">
                                    <i class="fas fa-user-ninja me-2"></i>Initial Threat Vector
                                </h6>
                            </div>
                            <div class="card-body">
                                <div id="threatEventsContainer_${threatScenarioIndex}">
                                    <!-- Initial threat vectors will be added here -->
                                </div>
                                <button type="button" class="btn btn-sm btn-danger" onclick="addThreatEvent(${threatScenarioIndex})">
                                    <i class="fas fa-plus me-1"></i>Add Initial Threat Vector
                                </button>
                            </div>
                        </div>

                        <!-- Threat Action Section -->
                        <div class="card mb-3">
                            <div class="card-header bg-warning bg-opacity-10">
                                <h6 class="mb-0">
                                    <i class="fas fa-crosshairs me-2"></i>Threat Action
                                </h6>
                            </div>
                            <div class="card-body">
                                <div id="vulnerabilitiesContainer_${threatScenarioIndex}">
                                    <!-- Threat actions will be added here -->
                                </div>
                                <button type="button" class="btn btn-sm btn-warning" onclick="addVulnerability(${threatScenarioIndex})">
                                    <i class="fas fa-plus me-1"></i>Add Threat Action
                                </button>
                            </div>
                        </div>

                        <!-- Actions on Objectives Section -->
                        <div class="card mb-3">
                            <div class="card-header bg-info bg-opacity-10">
                                <h6 class="mb-0">
                                    <i class="fas fa-bullseye me-2"></i>Actions on Objectives
                                </h6>
                            </div>
                            <div class="card-body">
                                <div id="lossEventsContainer_${threatScenarioIndex}">
                                    <!-- Actions on objectives will be added here -->
                                </div>
                                <button type="button" class="btn btn-sm btn-info" onclick="addLossEvent(${threatScenarioIndex})">
                                    <i class="fas fa-plus me-1"></i>Add Action on Objectives
                                </button>
                            </div>
                        </div>

                        <!-- Additional Controls Needed Section -->
                        <div class="card mb-3">
                            <div class="card-header bg-success bg-opacity-10">
                                <h6 class="mb-0">
                                    <i class="fas fa-shield-alt me-2"></i>Additional Controls Needed
                                </h6>
                            </div>
                            <div class="card-body">
                                <div id="controlsContainer_${threatScenarioIndex}">
                                    <!-- Controls will be dynamically added here -->
                                </div>
                                <button type="button" class="btn btn-sm btn-success" onclick="addControl(${threatScenarioIndex})">
                                    <i class="fas fa-plus me-1"></i>Add Additional Control
                                </button>
                            </div>
                        </div>

                        <!-- Qualitative Risk Analysis Section -->
                        <div class="card mb-3">
                            <div class="card-header bg-warning bg-opacity-10">
                                <h6 class="mb-0">
                                    <i class="fas fa-balance-scale me-2"></i>Qualitative Risk Analysis
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info mb-3">
                                    <i class="fas fa-info-circle me-2"></i>
                                    <strong>Risk Calculation:</strong> Risk Score = (Likelihood × Impact) × Exposure Level
                                    <br><small class="text-muted">Select appropriate levels based on this specific threat scenario.</small>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Likelihood Level <span class="text-danger">*</span></label>
                                            <select name="ThreatScenarios[${threatScenarioIndex}].QualitativeLikelihood" class="form-select form-select-sm" required>
                                                ${getLikelihoodOptions()}
                                            </select>
                                            <small class="form-text text-muted">How likely is this threat scenario to occur?</small>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Impact Level <span class="text-danger">*</span></label>
                                            <select name="ThreatScenarios[${threatScenarioIndex}].QualitativeImpact" class="form-select form-select-sm" required>
                                                ${getImpactOptions()}
                                            </select>
                                            <small class="form-text text-muted">What would be the impact if this threat scenario occurred?</small>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Exposure Level <span class="text-danger">*</span></label>
                                            <select name="ThreatScenarios[${threatScenarioIndex}].QualitativeExposure" class="form-select form-select-sm" required>
                                                ${getExposureOptions()}
                                            </select>
                                            <small class="form-text text-muted">How exposed is the asset to this threat scenario?</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Risk Calculation Preview -->
                                <div class="card bg-light border-warning mt-2">
                                    <div class="card-body p-2">
                                        <h6 class="text-warning mb-2">
                                            <i class="fas fa-calculator me-2"></i>Risk Calculation Preview
                                        </h6>
                                        <div class="row text-center">
                                            <div class="col-md-2">
                                                <div class="p-1 bg-white rounded shadow-sm">
                                                    <small class="text-muted d-block">Likelihood</small>
                                                    <strong class="text-info"><span id="likelihoodPreview_${threatScenarioIndex}">-</span></strong>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="p-1 bg-white rounded shadow-sm">
                                                    <small class="text-muted d-block">Impact</small>
                                                    <strong class="text-primary"><span id="impactPreview_${threatScenarioIndex}">-</span></strong>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="p-1 bg-white rounded shadow-sm">
                                                    <small class="text-muted d-block">Exposure</small>
                                                    <strong class="text-secondary"><span id="exposurePreview_${threatScenarioIndex}">-</span></strong>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="p-1 bg-white rounded shadow-sm">
                                                    <small class="text-muted d-block">Risk Score</small>
                                                    <strong class="text-warning"><span id="riskScorePreview_${threatScenarioIndex}">-</span></strong>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="p-1 bg-white rounded shadow-sm">
                                                    <small class="text-muted d-block">Risk Appetite</small>
                                                    <strong><span id="riskAppetitePreview_${threatScenarioIndex}" class="text-muted">-</span></strong>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Identified Risks Section -->
                        <div class="card mb-3">
                            <div class="card-header bg-danger bg-opacity-10">
                                <h6 class="mb-0">
                                    <i class="fas fa-exclamation-triangle me-2"></i>Identified Risks
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info mb-3">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Add specific risks identified for this threat scenario that need to be tracked and managed.
                                </div>
                                
                                <!-- Column Headers -->
                                <div class="row mb-2 d-none" id="riskHeaders_${threatScenarioIndex}">
                                    <div class="col-md-2">
                                        <small class="text-muted fw-bold">Risk Title</small>
                                    </div>
                                    <div class="col-md-3">
                                        <small class="text-muted fw-bold">Risk Description</small>
                                    </div>
                                    <div class="col-md-1">
                                        <small class="text-muted fw-bold">Owner</small>
                                    </div>
                                    <div class="col-md-2">
                                        <small class="text-muted fw-bold">Current Risk Level</small>
                                    </div>
                                    <div class="col-md-2">
                                        <small class="text-muted fw-bold">Treatment</small>
                                    </div>
                                    <div class="col-md-2">
                                        <small class="text-muted fw-bold">Risk Level after Treatment</small>
                                    </div>
                                </div>
                                
                                <div id="risksContainer_${threatScenarioIndex}">
                                    <!-- Risks will be added here dynamically -->
                                </div>
                                
                                <button type="button" class="btn btn-outline-danger btn-sm" onclick="addScenarioRisk(${threatScenarioIndex})">
                                    <i class="fas fa-plus me-2"></i>Add Risk
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', scenarioHtml);
            
            // Initialize smart comboboxes and MITRE autocomplete for the new scenario
            setTimeout(() => {
                if (window.initializeSmartComboboxes) {
                    window.initializeSmartComboboxes();
                }
                setupMitreAutocomplete();
                
                // Add event listeners for qualitative risk fields in this scenario
                const scenarioIdx = threatScenarioIndex;
                document.querySelector(`[name="ThreatScenarios[${scenarioIdx}].QualitativeLikelihood"]`)?.addEventListener('change', () => {
                    updateScenarioQualitativePreview(scenarioIdx);
                    updateAllRiskLevels(scenarioIdx);
                });
                document.querySelector(`[name="ThreatScenarios[${scenarioIdx}].QualitativeImpact"]`)?.addEventListener('change', () => {
                    updateScenarioQualitativePreview(scenarioIdx);
                    updateAllRiskLevels(scenarioIdx);
                });
                document.querySelector(`[name="ThreatScenarios[${scenarioIdx}].QualitativeExposure"]`)?.addEventListener('change', () => {
                    updateScenarioQualitativePreview(scenarioIdx);
                    updateAllRiskLevels(scenarioIdx);
                });
            }, 100);
            
            threatScenarioIndex++;
        }

        function removeThreatScenario(scenarioIndex) {
            const scenarioElement = document.getElementById('threatScenario_' + scenarioIndex);
            if (scenarioElement) {
                scenarioElement.remove();
            }
        }
        
        // Simplified scenario-based functions
        function addThreatEvent(scenarioIndex) {
            const container = document.getElementById('threatEventsContainer_' + scenarioIndex);
            const eventHtml = `
                <div class="threat-event-item card mb-2 border-danger" id="threatEvent_${scenarioIndex}_${threatEventIndex}">
                    <div class="card-body p-2">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <select name="ThreatScenarios[${scenarioIndex}].ThreatEvents[${threatEventIndex}].ThreatCommunity" 
                                        class="form-select smart-combobox form-select-sm" 
                                        data-category="10" 
                                        data-can-add-new="true">
                                    <option value="">Threat Community...</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="text" 
                                       name="ThreatScenarios[${scenarioIndex}].ThreatEvents[${threatEventIndex}].MitreTechnique" 
                                       class="form-control form-control-sm mitre-technique-search" 
                                       placeholder="MITRE technique..."
                                       autocomplete="off" />
                                <div class="mitre-suggestions" style="display: none; position: absolute; z-index: 1000; background: white; border: 1px solid #ddd; max-height: 200px; overflow-y: auto; width: 100%;"></div>
                            </div>
                            <div class="col-md-2">
                                <select name="ThreatScenarios[${scenarioIndex}].ThreatEvents[${threatEventIndex}].KillChainStep" class="form-select form-select-sm">
                                    <option value="">Kill Chain...</option>
                                    <option value="Reconnaissance">Reconnaissance</option>
                                    <option value="Weaponization">Weaponization</option>
                                    <option value="Delivery">Delivery</option>
                                    <option value="Exploitation">Exploitation</option>
                                    <option value="Installation">Installation</option>
                                    <option value="Command and Control">Command & Control</option>
                                    <option value="Actions on Objectives">Actions on Objectives</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="text" name="ThreatScenarios[${scenarioIndex}].ThreatEvents[${threatEventIndex}].Description" 
                                       class="form-control form-control-sm" placeholder="Description..." />
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeThreatEvent(${scenarioIndex}, ${threatEventIndex})" title="Remove">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', eventHtml);
            threatEventIndex++;
            
            // Initialize new smart comboboxes and autocomplete
            setTimeout(() => {
                if (window.initializeSmartComboboxes) {
                    window.initializeSmartComboboxes();
                }
                setupMitreAutocomplete();
            }, 100);
        }
        
        function removeThreatEvent(scenarioIndex, eventIndex) {
            const eventElement = document.getElementById('threatEvent_' + scenarioIndex + '_' + eventIndex);
            if (eventElement) {
                eventElement.remove();
            }
        }
        
        function addVulnerability(scenarioIndex) {
            const container = document.getElementById('vulnerabilitiesContainer_' + scenarioIndex);
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))' === 'True';
            const vulnHtml = `
                <div class="vulnerability-item card mb-2 border-warning" id="vulnerability_${scenarioIndex}_${vulnerabilityIndex}">
                    <div class="card-body p-2">
                        <div class="row mb-2">
                            <div class="col-md-3">
                                <label class="form-label form-label-sm">Threat Action</label>
                                <select name="ThreatScenarios[${scenarioIndex}].Vulnerabilities[${vulnerabilityIndex}].ThreatAction" 
                                        class="form-select smart-combobox form-select-sm" 
                                        data-category="11" 
                                        data-can-add-new="true">
                                    <option value="">Threat Action...</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label form-label-sm">MITRE Technique</label>
                                <input type="text" 
                                       name="ThreatScenarios[${scenarioIndex}].Vulnerabilities[${vulnerabilityIndex}].MitreTechnique" 
                                       class="form-control form-control-sm mitre-technique-search" 
                                       placeholder="MITRE technique..."
                                       autocomplete="off" />
                                <div class="mitre-suggestions" style="display: none; position: absolute; z-index: 1000; background: white; border: 1px solid #ddd; max-height: 200px; overflow-y: auto; width: 100%;"></div>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label form-label-sm">Access Level</label>
                                <select name="ThreatScenarios[${scenarioIndex}].Vulnerabilities[${vulnerabilityIndex}].AccessNeeded" class="form-select form-select-sm">
                                    <option value="">Access Level...</option>
                                    <option value="None">None</option>
                                    <option value="User">User</option>
                                    <option value="Admin">Admin</option>
                                    <option value="Root">Root</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label form-label-sm">Description</label>
                                <textarea name="ThreatScenarios[${scenarioIndex}].Vulnerabilities[${vulnerabilityIndex}].Description" 
                                          class="form-control form-control-sm" rows="2" placeholder="Description..."></textarea>
                            </div>
                            <div class="col-md-1 d-flex align-items-end">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeVulnerability(${scenarioIndex}, ${vulnerabilityIndex})" title="Remove">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label form-label-sm">Current Protective Controls</label>
                                <select name="ThreatScenarios[${scenarioIndex}].Vulnerabilities[${vulnerabilityIndex}].ProtectiveControls" 
                                        class="form-select smart-combobox form-select-sm" 
                                        data-category="7" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}">
                                    <option value="">Current protective controls...</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label form-label-sm">Current Detective Controls</label>
                                <select name="ThreatScenarios[${scenarioIndex}].Vulnerabilities[${vulnerabilityIndex}].DetectiveControls" 
                                        class="form-select smart-combobox form-select-sm" 
                                        data-category="8" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}">
                                    <option value="">Current detective controls...</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', vulnHtml);
            vulnerabilityIndex++;
            
            setTimeout(() => {
                if (window.initializeSmartComboboxes) {
                    window.initializeSmartComboboxes();
                }
                setupMitreAutocomplete();
            }, 100);
        }
        
        function removeVulnerability(scenarioIndex, vulnIndex) {
            const vulnElement = document.getElementById('vulnerability_' + scenarioIndex + '_' + vulnIndex);
            if (vulnElement) {
                vulnElement.remove();
            }
        }
        
        function addLossEvent(scenarioIndex) {
            const container = document.getElementById('lossEventsContainer_' + scenarioIndex);
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))' === 'True';
            const lossHtml = `
                <div class="loss-event-item card mb-2 border-info" id="lossEvent_${scenarioIndex}_${lossEventIndex}">
                    <div class="card-body p-2">
                        <div class="row mb-2">
                            <div class="col-md-3">
                                <label class="form-label form-label-sm">Primary Objective</label>
                                <select name="ThreatScenarios[${scenarioIndex}].LossEvents[${lossEventIndex}].PrimaryObjective" 
                                        class="form-select smart-combobox form-select-sm" 
                                        data-category="11" 
                                        data-can-add-new="true">
                                    <option value="">Primary Objective...</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label form-label-sm">MITRE Technique</label>
                                <input type="text" 
                                       name="ThreatScenarios[${scenarioIndex}].LossEvents[${lossEventIndex}].MitreTechnique" 
                                       class="form-control form-control-sm mitre-technique-search" 
                                       placeholder="MITRE technique..."
                                       autocomplete="off" />
                                <div class="mitre-suggestions" style="display: none; position: absolute; z-index: 1000; background: white; border: 1px solid #ddd; max-height: 200px; overflow-y: auto; width: 100%;"></div>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label form-label-sm">Kill Chain Step</label>
                                <select name="ThreatScenarios[${scenarioIndex}].LossEvents[${lossEventIndex}].KillChainStep" class="form-select form-select-sm">
                                    <option value="">Kill Chain...</option>
                                    <option value="Actions on Objectives">Actions on Objectives</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label form-label-sm">Description</label>
                                <textarea name="ThreatScenarios[${scenarioIndex}].LossEvents[${lossEventIndex}].Description" 
                                          class="form-control form-control-sm" rows="2" placeholder="Description..."></textarea>
                            </div>
                            <div class="col-md-1 d-flex align-items-end">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeLossEvent(${scenarioIndex}, ${lossEventIndex})" title="Remove">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label form-label-sm">Current Protective Controls</label>
                                <select name="ThreatScenarios[${scenarioIndex}].LossEvents[${lossEventIndex}].ProtectiveControls" 
                                        class="form-select smart-combobox form-select-sm" 
                                        data-category="7" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}">
                                    <option value="">Current protective controls...</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label form-label-sm">Current Detective Controls</label>
                                <select name="ThreatScenarios[${scenarioIndex}].LossEvents[${lossEventIndex}].DetectiveControls" 
                                        class="form-select smart-combobox form-select-sm" 
                                        data-category="8" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}">
                                    <option value="">Current detective controls...</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', lossHtml);
            lossEventIndex++;
            
            setTimeout(() => {
                if (window.initializeSmartComboboxes) {
                    window.initializeSmartComboboxes();
                }
                setupMitreAutocomplete();
            }, 100);
        }
        
        function removeLossEvent(scenarioIndex, lossIndex) {
            const lossElement = document.getElementById('lossEvent_' + scenarioIndex + '_' + lossIndex);
            if (lossElement) {
                lossElement.remove();
            }
        }
        
        function addControl(scenarioIndex) {
            const container = document.getElementById('controlsContainer_' + scenarioIndex);
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))' === 'True';
            const controlHtml = `
                <div class="control-item card mb-2 border-success" id="control_${scenarioIndex}_${qualitativeControlIndex}">
                    <div class="card-body p-2">
                        <div class="row align-items-center">
                            <div class="col-md-4">
                                <select name="ThreatScenarios[${scenarioIndex}].Controls[${qualitativeControlIndex}].ControlName" 
                                        class="form-select smart-combobox form-select-sm control-name-select" 
                                        data-category="5" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}"
                                        data-placeholder="Control name...">
                                    <option value="">Control name...</option>
                                </select>
                                <input type="hidden" name="ThreatScenarios[${scenarioIndex}].Controls[${qualitativeControlIndex}].Id" value="0" />
                            </div>
                            <div class="col-md-2">
                                <select name="ThreatScenarios[${scenarioIndex}].Controls[${qualitativeControlIndex}].ControlType" class="form-select form-select-sm">
                                    <option value="Preventive">Preventive</option>
                                    <option value="Detective">Detective</option>
                                    <option value="Responsive">Responsive</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select name="ThreatScenarios[${scenarioIndex}].Controls[${qualitativeControlIndex}].ImplementationStatus" class="form-select form-select-sm">
                                    <option value="Implemented">Implemented</option>
                                    <option value="Planned">Planned</option>
                                    <option value="NotImplemented">Not Implemented</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <textarea name="ThreatScenarios[${scenarioIndex}].Controls[${qualitativeControlIndex}].Description" 
                                          class="form-control form-control-sm" rows="2" placeholder="Description..."></textarea>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeControl(${scenarioIndex}, ${qualitativeControlIndex})" title="Remove">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', controlHtml);
            qualitativeControlIndex++;
            
            setTimeout(() => {
                if (window.initializeSmartComboboxes) {
                    window.initializeSmartComboboxes();
                }
            }, 100);
        }
        
        function removeControl(scenarioIndex, controlIndex) {
            const controlElement = document.getElementById('control_' + scenarioIndex + '_' + controlIndex);
            if (controlElement) {
                controlElement.remove();
            }
        }

        // Scenario-specific risk management functions
        function addScenarioRisk(scenarioIndex) {
            const container = document.getElementById('risksContainer_' + scenarioIndex);
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))' === 'True';
            const riskHtml = `
                <div class="risk-item card mb-2 border-danger" id="scenarioRisk_${scenarioIndex}_${scenarioRiskIndex}">
                    <div class="card-body p-2">
                        <div class="row align-items-center">
                            <div class="col-md-2">
                                <input type="text" name="ThreatScenarios[${scenarioIndex}].IdentifiedRisks[${scenarioRiskIndex}].Title" 
                                       class="form-control form-control-sm" 
                                       placeholder="Risk Title" />
                            </div>
                            <div class="col-md-3">
                                <textarea name="ThreatScenarios[${scenarioIndex}].IdentifiedRisks[${scenarioRiskIndex}].Description" 
                                          class="form-control form-control-sm" 
                                          rows="2" placeholder="Risk Description"></textarea>
                            </div>
                            <div class="col-md-1">
                                <select name="ThreatScenarios[${scenarioIndex}].IdentifiedRisks[${scenarioRiskIndex}].Owner" 
                                        class="form-select form-select-sm risk-owner-select" 
                                        data-category="2" 
                                        data-can-add-new="${canAddNew}" 
                                        data-placeholder="Select owner..." 
                                        style="width: 100%;">
                                    <option value="">Select...</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <div class="d-flex flex-column align-items-center">
                                    <span id="inherentRiskLevel_${scenarioIndex}_${scenarioRiskIndex}" class="badge bg-secondary mb-1">TBD</span>
                                    <input type="hidden" name="ThreatScenarios[${scenarioIndex}].IdentifiedRisks[${scenarioRiskIndex}].InherentRiskLevel" id="inherentRiskLevelValue_${scenarioIndex}_${scenarioRiskIndex}" value="1" />
                                    <small class="text-muted">Auto-calculated</small>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <select name="ThreatScenarios[${scenarioIndex}].IdentifiedRisks[${scenarioRiskIndex}].Treatment" 
                                        class="form-select form-select-sm" 
                                        onchange="updateScenarioResidualRisk(${scenarioIndex}, ${scenarioRiskIndex})">
                                    <option value="1">Mitigate</option>
                                    <option value="2">Transfer</option>
                                    <option value="3">Accept</option>
                                    <option value="4">Avoid</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select name="ThreatScenarios[${scenarioIndex}].IdentifiedRisks[${scenarioRiskIndex}].ResidualRiskLevel" 
                                        class="form-select form-select-sm" 
                                        id="residualRiskLevel_${scenarioIndex}_${scenarioRiskIndex}">
                                    <option value="1">Low</option>
                                    <option value="2">Medium</option>
                                    <option value="3">High</option>
                                    <option value="4">Critical</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-danger position-absolute top-0 end-0 mt-1 me-1" 
                            onclick="removeScenarioRisk(${scenarioIndex}, ${scenarioRiskIndex})" title="Remove Risk">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', riskHtml);
            
            // Show headers if this is the first risk
            const headers = document.getElementById('riskHeaders_' + scenarioIndex);
            if (headers) {
                headers.classList.remove('d-none');
            }
            
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
            
            scenarioRiskIndex++;
        }

        function removeScenarioRisk(scenarioIndex, riskIndex) {
            const riskElement = document.getElementById('scenarioRisk_' + scenarioIndex + '_' + riskIndex);
            if (riskElement) {
                riskElement.remove();
            }
            
            // Hide headers if no risks remain
            const container = document.getElementById('risksContainer_' + scenarioIndex);
            const headers = document.getElementById('riskHeaders_' + scenarioIndex);
            if (container && headers && container.children.length === 0) {
                headers.classList.add('d-none');
            }
        }

        function updateScenarioResidualRisk(scenarioIndex, riskIndex) {
            // This function can be enhanced to automatically calculate residual risk
            // based on treatment type and inherent risk level
            console.log('Updating residual risk for scenario', scenarioIndex, 'risk', riskIndex);
        }
        
        // New scenario-based threat modeling functions
        function addThreatEvent(scenarioIndex) {
            const container = document.getElementById('threatEventsContainer_' + scenarioIndex);
            const threatHtml = `
                <div class="threat-item card mb-3 border-danger" id="threat_event_${threatEventIndex}">
                    <div class="card-body p-3">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">Threat Community</label>
                                <select name="ThreatScenarios[${scenarioIndex}].ThreatEvents[${threatEventIndex}].ThreatCommunity" 
                                        class="form-select smart-combobox" 
                                        data-category="10" 
                                        data-can-add-new="true">
                                    <option value="">Search threat communities...</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Threat Action</label>
                                <select name="ThreatScenarios[${scenarioIndex}].ThreatEvents[${threatEventIndex}].ThreatAction" 
                                        class="form-select smart-combobox" 
                                        data-category="11" 
                                        data-can-add-new="true">
                                    <option value="">Search threat actions...</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Description</label>
                                <input type="text" name="ThreatScenarios[${scenarioIndex}].ThreatEvents[${threatEventIndex}].Description" class="form-control" placeholder="Describe the initial vector" />
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">MITRE ATT&CK Technique</label>
                                <input type="text" 
                                       name="ThreatScenarios[${scenarioIndex}].ThreatEvents[${threatEventIndex}].MitreTechnique" 
                                       class="form-control mitre-technique-search" 
                                       placeholder="Search MITRE techniques..."
                                       autocomplete="off" />
                                <div class="mitre-suggestions" style="display: none; position: absolute; z-index: 1000; background: white; border: 1px solid #ddd; max-height: 200px; overflow-y: auto; width: 100%;"></div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Kill Chain Step</label>
                                <select name="ThreatScenarios[${scenarioIndex}].ThreatEvents[${threatEventIndex}].KillChainStep" class="form-select">
                                    <option value="">Select step...</option>
                                    <option value="Reconnaissance">Reconnaissance</option>
                                    <option value="Weaponization">Weaponization</option>
                                    <option value="Delivery">Delivery</option>
                                    <option value="Exploitation">Exploitation</option>
                                    <option value="Installation">Installation</option>
                                    <option value="Command and Control">Command and Control</option>
                                    <option value="Actions on Objectives">Actions on Objectives</option>
                                </select>
                            </div>
                            <div class="col-md-4 text-end">
                                <label class="form-label">&nbsp;</label>
                                <div>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="removeQualitativeItem('threat_event_${threatEventIndex}')">
                                        <i class="fas fa-trash"></i> Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">Current Protective Controls</label>
                                <select name="ThreatEvents[${threatEventIndex}].ProtectiveControls" 
                                        class="form-select smart-combobox" 
                                        data-category="7" 
                                        data-can-add-new="true" 
                                        multiple>
                                    <option value="">Search protective controls...</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Current Detective Controls</label>
                                <select name="ThreatEvents[${threatEventIndex}].DetectiveControls" 
                                        class="form-select smart-combobox" 
                                        data-category="8" 
                                        data-can-add-new="true" 
                                        multiple>
                                    <option value="">Search detective controls...</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', threatHtml);
            
            // Initialize smart comboboxes for the new item
            setTimeout(() => {
                if (window.initializeSmartComboboxes) {
                    window.initializeSmartComboboxes();
                }
                setupMitreAutocomplete();
            }, 100);
            
            threatEventIndex++;
        }

        function addQualitativeVulnerability() {
            const container = document.getElementById('qualitativeVulnerabilitiesContainer');
            const threatActionHtml = `
                <div class="threat-action-item card mb-3 border-warning" id="vulnerability_${vulnerabilityIndex}">
                    <div class="card-body p-3">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">Threat Action Taken</label>
                                <select name="ThreatActions[${vulnerabilityIndex}].ThreatActionTaken" class="form-control">
                                    <option value="">Select Action</option>
                                    <option value="Credential Dumping">Credential Dumping</option>
                                    <option value="Lateral Movement">Lateral Movement</option>
                                    <option value="Privilege Escalation">Privilege Escalation</option>
                                    <option value="Data Exfiltration">Data Exfiltration</option>
                                    <option value="System Manipulation">System Manipulation</option>
                                    <option value="Persistence">Persistence</option>
                                    <option value="Defense Evasion">Defense Evasion</option>
                                    <option value="Discovery">Discovery</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Description</label>
                                <input type="text" name="ThreatActions[${vulnerabilityIndex}].Description" class="form-control" placeholder="Describe the threat action" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Access Needed</label>
                                <select name="ThreatActions[${vulnerabilityIndex}].AccessNeeded" class="form-control">
                                    <option value="">Select Access Level</option>
                                    <option value="None">None</option>
                                    <option value="User">User</option>
                                    <option value="Administrator">Administrator</option>
                                    <option value="System">System</option>
                                    <option value="Root">Root</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">MITRE ATT&CK Technique</label>
                                <input type="text" 
                                       name="ThreatActions[${vulnerabilityIndex}].MitreTechnique" 
                                       class="form-control mitre-technique-search" 
                                       placeholder="Search MITRE techniques..."
                                       autocomplete="off" />
                                <div class="mitre-suggestions" style="display: none; position: absolute; z-index: 1000; background: white; border: 1px solid #ddd; max-height: 200px; overflow-y: auto; width: 100%;"></div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Kill Chain Step</label>
                                <select name="ThreatActions[${vulnerabilityIndex}].KillChainStep" class="form-select">
                                    <option value="">Select step...</option>
                                    <option value="Reconnaissance">Reconnaissance</option>
                                    <option value="Weaponization">Weaponization</option>
                                    <option value="Delivery">Delivery</option>
                                    <option value="Exploitation">Exploitation</option>
                                    <option value="Installation">Installation</option>
                                    <option value="Command and Control">Command and Control</option>
                                    <option value="Actions on Objectives">Actions on Objectives</option>
                                </select>
                            </div>
                            <div class="col-md-4 text-end">
                                <label class="form-label">&nbsp;</label>
                                <div>
                                    <button type="button" class="btn btn-warning btn-sm" onclick="removeQualitativeItem('vulnerability_${vulnerabilityIndex}')">
                                        <i class="fas fa-trash"></i> Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">Current Protective Controls</label>
                                <select name="ThreatActions[${vulnerabilityIndex}].ProtectiveControls" 
                                        class="form-select smart-combobox" 
                                        data-category="7" 
                                        data-can-add-new="true" 
                                        multiple>
                                    <option value="">Search protective controls...</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Current Detective Controls</label>
                                <select name="ThreatActions[${vulnerabilityIndex}].DetectiveControls" 
                                        class="form-select smart-combobox" 
                                        data-category="8" 
                                        data-can-add-new="true" 
                                        multiple>
                                    <option value="">Search detective controls...</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', threatActionHtml);
            
            // Initialize smart comboboxes for the new item
            setTimeout(() => {
                if (window.initializeSmartComboboxes) {
                    window.initializeSmartComboboxes();
                }
                setupMitreAutocomplete();
            }, 100);
            
            vulnerabilityIndex++;
        }

        function addQualitativeLossEvent() {
            const container = document.getElementById('qualitativeLossEventsContainer');
            const actionsOnObjectivesHtml = `
                <div class="actions-objectives-item card mb-3 border-info" id="loss_event_${lossEventIndex}">
                    <div class="card-body p-3">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Primary Objective</label>
                                <select name="ActionsOnObjectives[${lossEventIndex}].PrimaryObjective" 
                                        class="form-select smart-combobox" 
                                        data-category="11" 
                                        data-can-add-new="true">
                                    <option value="">Search primary objectives...</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Description</label>
                                <input type="text" name="ActionsOnObjectives[${lossEventIndex}].Description" class="form-control" placeholder="Describe the objective" />
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">MITRE ATT&CK Technique</label>
                                <input type="text" 
                                       name="ActionsOnObjectives[${lossEventIndex}].MitreTechnique" 
                                       class="form-control mitre-technique-search" 
                                       placeholder="Search MITRE techniques..."
                                       autocomplete="off" />
                                <div class="mitre-suggestions" style="display: none; position: absolute; z-index: 1000; background: white; border: 1px solid #ddd; max-height: 200px; overflow-y: auto; width: 100%;"></div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Kill Chain Step</label>
                                <select name="ActionsOnObjectives[${lossEventIndex}].KillChainStep" class="form-select">
                                    <option value="">Select step...</option>
                                    <option value="Reconnaissance">Reconnaissance</option>
                                    <option value="Weaponization">Weaponization</option>
                                    <option value="Delivery">Delivery</option>
                                    <option value="Exploitation">Exploitation</option>
                                    <option value="Installation">Installation</option>
                                    <option value="Command and Control">Command and Control</option>
                                    <option value="Actions on Objectives">Actions on Objectives</option>
                                </select>
                            </div>
                            <div class="col-md-4 text-end">
                                <label class="form-label">&nbsp;</label>
                                <div>
                                    <button type="button" class="btn btn-info btn-sm" onclick="removeQualitativeItem('loss_event_${lossEventIndex}')">
                                        <i class="fas fa-trash"></i> Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">Current Protective Controls</label>
                                <select name="ActionsOnObjectives[${lossEventIndex}].ProtectiveControls" 
                                        class="form-select smart-combobox" 
                                        data-category="7" 
                                        data-can-add-new="true" 
                                        multiple>
                                    <option value="">Search protective controls...</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Current Detective Controls</label>
                                <select name="ActionsOnObjectives[${lossEventIndex}].DetectiveControls" 
                                        class="form-select smart-combobox" 
                                        data-category="8" 
                                        data-can-add-new="true" 
                                        multiple>
                                    <option value="">Search detective controls...</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', actionsOnObjectivesHtml);
            
            // Initialize smart comboboxes for the new item
            setTimeout(() => {
                if (window.initializeSmartComboboxes) {
                    window.initializeSmartComboboxes();
                }
                setupMitreAutocomplete();
            }, 100);
            
            lossEventIndex++;
        }

        function removeQualitativeItem(itemId) {
            const item = document.getElementById(itemId);
            if (item) {
                item.remove();
            }
        }

        // MITRE ATT&CK data cache
        let mitreData = [];
        
        // Load MITRE data once and cache it
        async function loadMitreData() {
            if (mitreData.length > 0) {
                console.log('MITRE data already loaded:', mitreData.length);
                return mitreData;
            }
            
            try {
                console.log('Loading MITRE techniques...');
                
                // Try the threat modeling API endpoint first
                let response = await fetch('/api/threatmodeling/mitretechniques');
                console.log('ThreatModeling API response status:', response.status);
                
                if (!response.ok) {
                    console.log('Falling back to direct MITRE API...');
                    // Fallback to the direct MITRE API
                    response = await fetch('/api/mitre/techniques');
                    console.log('MITRE API response status:', response.status);
                }
                
                if (response.ok) {
                    const apiResponse = await response.json();
                    // Handle different API response formats
                    const techniques = apiResponse.results || apiResponse || [];
                    
                    mitreData = techniques.map(technique => ({
                        id: technique.id || technique.techniqueId,
                        name: technique.name,
                        tactic: technique.tactic,
                        description: technique.description,
                        displayText: `${technique.id || technique.techniqueId} - ${technique.name}`
                    }));
                    
                    console.log(`Successfully loaded ${mitreData.length} MITRE techniques`);
                    setupMitreAutocomplete();
                    return mitreData;
                } else {
                    console.error('Failed to load MITRE techniques. Response:', response);
                }
            } catch (error) {
                console.error('Error loading MITRE data:', error);
            }
            
            return [];
        }
        
        // Setup autocomplete for MITRE technique search boxes
        function setupMitreAutocomplete() {
            document.querySelectorAll('.mitre-technique-search').forEach(input => {
                const suggestionBox = input.nextElementSibling;
                
                // Skip if already setup
                if (input.dataset.autocompleteSetup) return;
                input.dataset.autocompleteSetup = 'true';
                
                input.addEventListener('input', function(e) {
                    const query = e.target.value.toLowerCase().trim();
                    
                    if (query.length < 2) {
                        suggestionBox.style.display = 'none';
                        return;
                    }
                    
                    const matches = mitreData.filter(technique => 
                        technique.displayText.toLowerCase().includes(query) ||
                        (technique.tactic && technique.tactic.toLowerCase().includes(query)) ||
                        (technique.description && technique.description.toLowerCase().includes(query))
                    ).slice(0, 10); // Limit to 10 results
                    
                    if (matches.length === 0) {
                        suggestionBox.style.display = 'none';
                        return;
                    }
                    
                    suggestionBox.innerHTML = matches.map(technique => 
                        `<div class="mitre-suggestion-item p-2 border-bottom" style="cursor: pointer;" data-id="${technique.id}" data-text="${technique.displayText}">
                            <strong>${technique.displayText}</strong>
                            ${technique.tactic ? `<br><small class="text-muted">Tactic: ${technique.tactic}</small>` : ''}
                        </div>`
                    ).join('');
                    
                    suggestionBox.style.display = 'block';
                    
                    // Add click handlers to suggestion items
                    suggestionBox.querySelectorAll('.mitre-suggestion-item').forEach(item => {
                        item.addEventListener('click', function() {
                            input.value = this.dataset.text;
                            suggestionBox.style.display = 'none';
                        });
                    });
                });
                
                // Hide suggestions when clicking outside
                document.addEventListener('click', function(e) {
                    if (!input.contains(e.target) && !suggestionBox.contains(e.target)) {
                        suggestionBox.style.display = 'none';
                    }
                });
            });
        }
        
        // Update scenario-specific qualitative preview
        function updateScenarioQualitativePreview(scenarioIndex) {
            const likelihoodElement = document.querySelector(`[name="ThreatScenarios[${scenarioIndex}].QualitativeLikelihood"]`);
            const impactElement = document.querySelector(`[name="ThreatScenarios[${scenarioIndex}].QualitativeImpact"]`);
            const exposureElement = document.querySelector(`[name="ThreatScenarios[${scenarioIndex}].QualitativeExposure"]`);
            
            // Update preview displays
            if (likelihoodElement?.value) {
                const likelihoodText = likelihoodElement.options[likelihoodElement.selectedIndex].text;
                document.getElementById(`likelihoodPreview_${scenarioIndex}`).textContent = likelihoodText;
            } else {
                document.getElementById(`likelihoodPreview_${scenarioIndex}`).textContent = '-';
            }
            
            if (impactElement?.value) {
                const impactText = impactElement.options[impactElement.selectedIndex].text;
                document.getElementById(`impactPreview_${scenarioIndex}`).textContent = impactText;
            } else {
                document.getElementById(`impactPreview_${scenarioIndex}`).textContent = '-';
            }
            
            if (exposureElement?.value) {
                const exposureText = exposureElement.options[exposureElement.selectedIndex].text;
                document.getElementById(`exposurePreview_${scenarioIndex}`).textContent = exposureText;
            } else {
                document.getElementById(`exposurePreview_${scenarioIndex}`).textContent = '-';
            }
            
            // Calculate and display risk score
            if (likelihoodElement?.value && impactElement?.value && exposureElement?.value) {
                const likelihood = parseInt(likelihoodElement.value);
                const impact = parseInt(impactElement.value);
                const exposure = parseFloat(exposureElement.value);
                const riskScore = (likelihood * impact) * exposure;
                
                document.getElementById(`riskScorePreview_${scenarioIndex}`).textContent = riskScore.toFixed(1);
                
                // Update risk appetite status
                const settings = riskLevelSettings;
                const withinAppetite = riskScore <= settings.riskAppetiteThreshold;
                const appetiteElement = document.getElementById(`riskAppetitePreview_${scenarioIndex}`);
                if (appetiteElement) {
                    appetiteElement.textContent = withinAppetite ? 'Within Appetite' : 'Above Appetite';
                    appetiteElement.className = withinAppetite ? 'text-success' : 'text-danger';
                }
            } else {
                document.getElementById(`riskScorePreview_${scenarioIndex}`).textContent = '-';
            }
            
            // Update risk levels for identified risks in this scenario
            updateAllRiskLevels(scenarioIndex);
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize smart comboboxes
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
            
            // Load MITRE data for any existing dropdowns
            loadMitreData();
            
            // Add default threat scenario
            addThreatScenario();
        });
        
        // Qualitative control management functions
        function addQualitativeControl() {
            const container = document.getElementById('qualitativeControlsContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))' === 'True';
            const controlHtml = `
                <div class="control-item card mb-2 border-primary" id="qualitative_control_${qualitativeControlIndex}">
                    <div class="card-body p-3">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <select name="QualitativeControls[${qualitativeControlIndex}].ControlName" 
                                        class="form-select control-name-select" 
                                        data-category="5" 
                                        data-can-add-new="${canAddNew ? 'true' : 'false'}"
                                        data-placeholder="Type to search controls..."
                                        style="width: 100%;">
                                    <option value="">Type to search controls...</option>
                                </select>
                                <input type="hidden" name="QualitativeControls[${qualitativeControlIndex}].Id" value="0" />
                            </div>
                            <div class="col-md-2">
                                <select name="QualitativeControls[${qualitativeControlIndex}].ControlType" class="form-control form-control-sm">
                                    <option value="Preventive">Preventive</option>
                                    <option value="Detective">Detective</option>
                                    <option value="Responsive">Responsive</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select name="QualitativeControls[${qualitativeControlIndex}].ImplementationStatus" 
                                        class="form-control form-control-sm control-status">
                                    <option value="Implemented">Implemented</option>
                                    <option value="Planned">Planned</option>
                                    <option value="NotImplemented">Not Implemented</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="text" name="QualitativeControls[${qualitativeControlIndex}].ControlDescription" 
                                       class="form-control form-control-sm" placeholder="Description" />
                            </div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeQualitativeControl(${qualitativeControlIndex})" title="Remove Control">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', controlHtml);
            
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
            
            qualitativeControlIndex++;
        }
        
        function removeQualitativeControl(index) {
            document.getElementById(`qualitative_control_${index}`).remove();
        }
        
        // Risk management functions
        function addRisk() {
            const container = document.getElementById('risksContainer');
            const canAddNew = '@(User.IsInRole("Admin") || User.IsInRole("GRCAnalyst") || User.IsInRole("GRCManager"))' === 'True';
            const riskHtml = `
                <div class="risk-item card mb-2 border-danger" id="risk_${riskIndex}">
                    <div class="card-body p-2">
                        <div class="row align-items-center">
                            <div class="col-md-2">
                                <input type="text" name="IdentifiedRisks[${riskIndex}].Title" 
                                       class="form-control form-control-sm" 
                                       placeholder="Risk Title" />
                            </div>
                            <div class="col-md-3">
                                <textarea name="IdentifiedRisks[${riskIndex}].Description" 
                                          class="form-control form-control-sm" 
                                          rows="2" placeholder="Risk Description"></textarea>
                            </div>
                            <div class="col-md-1">
                                <select name="IdentifiedRisks[${riskIndex}].Owner" 
                                        class="form-select form-select-sm risk-owner-select" 
                                        data-category="2" 
                                        data-can-add-new="${canAddNew}" 
                                        data-placeholder="Select owner..." 
                                        style="width: 100%;">
                                    <option value="">Select...</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <div class="d-flex flex-column align-items-center">
                                    <span id="inherentRiskLevel_${riskIndex}" class="badge bg-secondary mb-1">TBD</span>
                                    <input type="hidden" name="IdentifiedRisks[${riskIndex}].InherentRiskLevel" id="inherentRiskLevelValue_${riskIndex}" value="1" />
                                    <small class="text-muted">Auto-calculated</small>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <select name="IdentifiedRisks[${riskIndex}].Treatment" 
                                        class="form-select form-select-sm" 
                                        onchange="updateResidualRisk(${riskIndex})">
                                    <option value="1">Mitigate</option>
                                    <option value="2">Transfer</option>
                                    <option value="3">Accept</option>
                                    <option value="4">Avoid</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select name="IdentifiedRisks[${riskIndex}].ResidualRiskLevel" 
                                        class="form-select form-select-sm" 
                                        id="residualRiskLevel_${riskIndex}">
                                    <option value="1">Low</option>
                                    <option value="2">Medium</option>
                                    <option value="3">High</option>
                                    <option value="4">Critical</option>
                                </select>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeRisk(${riskIndex})" title="Remove Risk">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', riskHtml);
            
            if (riskIndex === 0) {
                document.getElementById('riskHeaders').classList.remove('d-none');
            }
            
            if (window.initializeSmartComboboxes) {
                window.initializeSmartComboboxes();
            }
            
            riskIndex++;
            
            setTimeout(() => {
                updateAllRiskLevels();
            }, 100);
        }
        
        function removeRisk(index) {
            document.getElementById(`risk_${index}`).remove();
            
            const remainingRisks = document.querySelectorAll('.risk-item');
            if (remainingRisks.length === 0) {
                document.getElementById('riskHeaders').classList.add('d-none');
            }
        }
        
        // Risk level settings from server
        const riskLevelSettings = @Html.Raw(Json.Serialize(Model.RiskLevelSettings ?? new CyberRiskApp.Models.RiskLevelSettings()));
        const defaultMatrix = @Html.Raw(Json.Serialize(ViewBag.DefaultMatrix));
        const defaultMatrixCells = @Html.Raw(Json.Serialize(ViewBag.DefaultMatrixCells ?? new List<CyberRiskApp.Models.RiskMatrixCell>()));
        let defaultMatrixLevels = @Html.Raw(Json.Serialize(ViewBag.DefaultMatrixLevels ?? new List<CyberRiskApp.Models.RiskMatrixLevel>()));
        const availableMatrices = @Html.Raw(Json.Serialize(ViewBag.AvailableMatrices ?? new List<CyberRiskApp.Models.RiskMatrix>()));
        
        // Debug: Log what we received
        console.log('Default Matrix:', defaultMatrix);
        console.log('Default Matrix Levels:', defaultMatrixLevels);
        console.log('Default Matrix Cells count:', defaultMatrixCells ? defaultMatrixCells.length : 0);
        console.log('Available Matrices:', availableMatrices);
        
        // Debug level types
        if (defaultMatrixLevels && defaultMatrixLevels.length > 0) {
            console.log('Sample level object:', defaultMatrixLevels[0]);
            console.log('Level types in array:', defaultMatrixLevels.map(l => ({ 
                name: l.levelName, 
                type: l.levelType, 
                typeOf: typeof l.levelType,
                value: l.levelValue 
            })));
        }
        
        // Function to load matrix data when user changes selection
        async function loadMatrixData(matrixId) {
            if (!matrixId) {
                console.log('No matrix ID provided');
                return;
            }
            
            console.log('Loading matrix data for ID:', matrixId);
            
            try {
                const response = await fetch(`/RiskMatrix/GetMatrixData/${matrixId}`);
                const data = await response.json();
                
                if (data.success) {
                    // Update the global matrix levels variable
                    defaultMatrixLevels = data.levels;
                    console.log('Updated matrix levels:', defaultMatrixLevels);
                    
                    // Update all existing threat scenario dropdowns
                    updateAllThreatScenarioDropdowns();
                } else {
                    console.error('Error loading matrix data:', data.message);
                    alert('Error loading risk matrix data. Please try again.');
                }
            } catch (error) {
                console.error('Error loading matrix data:', error);
                alert('Error loading risk matrix data. Please try again.');
            }
        }
        
        // Function to update all existing threat scenario dropdowns
        function updateAllThreatScenarioDropdowns() {
            // Update dropdowns in all existing threat scenarios
            const threatScenarios = document.querySelectorAll('.threat-scenario-card');
            threatScenarios.forEach((scenario, index) => {
                const likelihoodSelect = scenario.querySelector('select[name*="QualitativeLikelihood"]');
                const impactSelect = scenario.querySelector('select[name*="QualitativeImpact"]');
                const exposureSelect = scenario.querySelector('select[name*="QualitativeExposure"]');
                
                if (likelihoodSelect) {
                    likelihoodSelect.innerHTML = getLikelihoodOptions();
                }
                if (impactSelect) {
                    impactSelect.innerHTML = getImpactOptions();
                }
                if (exposureSelect) {
                    exposureSelect.innerHTML = getExposureOptions();
                }
            });
        }

        // Helper functions to get level options from matrix
        function getLikelihoodOptions() {
            console.log('Getting likelihood options. defaultMatrixLevels:', defaultMatrixLevels);
            let options = '<option value="">Select Likelihood</option>';
            if (defaultMatrixLevels && defaultMatrixLevels.length > 0) {
                // LevelType enum: Impact = 1, Likelihood = 2, Exposure = 3
                // Check both numeric and string values for compatibility
                const likelihoodLevels = defaultMatrixLevels.filter(l => 
                    l.levelType === 2 || l.levelType === 'Likelihood' || l.levelType === 'likelihood'
                ).sort((a, b) => a.levelValue - b.levelValue);
                console.log('Filtered likelihood levels:', likelihoodLevels);
                if (likelihoodLevels.length > 0) {
                    likelihoodLevels.forEach(level => {
                        options += `<option value="${level.levelValue}">${level.levelName} (${level.levelValue})</option>`;
                    });
                } else {
                    console.log('No likelihood levels found, using fallback');
                    // Fallback to default options
                    options += '<option value="1">Very Low (1)</option>';
                    options += '<option value="2">Low (2)</option>';
                    options += '<option value="3">Medium (3)</option>';
                    options += '<option value="4">High (4)</option>';
                    options += '<option value="5">Very High (5)</option>';
                }
            } else {
                console.log('defaultMatrixLevels is empty or null, using fallback');
                // Fallback to default options
                options += '<option value="1">Very Low (1)</option>';
                options += '<option value="2">Low (2)</option>';
                options += '<option value="3">Medium (3)</option>';
                options += '<option value="4">High (4)</option>';
                options += '<option value="5">Very High (5)</option>';
            }
            return options;
        }
        
        function getImpactOptions() {
            let options = '<option value="">Select Impact</option>';
            if (defaultMatrixLevels && defaultMatrixLevels.length > 0) {
                // LevelType enum: Impact = 1, Likelihood = 2, Exposure = 3
                const impactLevels = defaultMatrixLevels.filter(l => 
                    l.levelType === 1 || l.levelType === 'Impact' || l.levelType === 'impact'
                ).sort((a, b) => a.levelValue - b.levelValue);
                impactLevels.forEach(level => {
                    options += `<option value="${level.levelValue}">${level.levelName} (${level.levelValue})</option>`;
                });
            } else {
                // Fallback to default options
                options += '<option value="1">Very Low (1)</option>';
                options += '<option value="2">Low (2)</option>';
                options += '<option value="3">Medium (3)</option>';
                options += '<option value="4">High (4)</option>';
                options += '<option value="5">Very High (5)</option>';
            }
            return options;
        }
        
        function getExposureOptions() {
            let options = '<option value="">Select Exposure</option>';
            if (defaultMatrixLevels && defaultMatrixLevels.length > 0) {
                // LevelType enum: Impact = 1, Likelihood = 2, Exposure = 3
                const exposureLevels = defaultMatrixLevels.filter(l => 
                    l.levelType === 3 || l.levelType === 'Exposure' || l.levelType === 'exposure'
                ).sort((a, b) => a.levelValue - b.levelValue);
                if (exposureLevels.length > 0) {
                    exposureLevels.forEach(level => {
                        const multiplier = level.multiplier || (level.levelValue * 0.2);
                        // Use decimal multiplier value for exposure calculation
                        options += `<option value="${multiplier}">${level.levelName} (${multiplier})</option>`;
                    });
                } else {
                    // If no exposure levels defined, use default options with decimal values
                    options += '<option value="0.2">Slightly Exposed (0.2)</option>';
                    options += '<option value="0.4">Exposed (0.4)</option>';
                    options += '<option value="0.8">Moderately Exposed (0.8)</option>';
                    options += '<option value="1.0">Highly Exposed (1.0)</option>';
                }
            } else {
                // Fallback to default options with decimal values
                options += '<option value="0.2">Slightly Exposed (0.2)</option>';
                options += '<option value="0.4">Exposed (0.4)</option>';
                options += '<option value="0.8">Moderately Exposed (0.8)</option>';
                options += '<option value="1.0">Highly Exposed (1.0)</option>';
            }
            return options;
        }

        // Risk level calculation functions using Risk Matrix
        function calculateQualitativeRiskLevel(scenarioIndex = null) {
            let likelihoodElement, impactElement, exposureElement;
            
            if (scenarioIndex !== null) {
                // Scenario-specific fields
                likelihoodElement = document.querySelector(`[name="ThreatScenarios[${scenarioIndex}].QualitativeLikelihood"]`);
                impactElement = document.querySelector(`[name="ThreatScenarios[${scenarioIndex}].QualitativeImpact"]`);
                exposureElement = document.querySelector(`[name="ThreatScenarios[${scenarioIndex}].QualitativeExposure"]`);
            } else {
                // Global assessment fields (fallback)
                likelihoodElement = document.querySelector('[name="Assessment.QualitativeLikelihood"]');
                impactElement = document.querySelector('[name="Assessment.QualitativeImpact"]');
                exposureElement = document.querySelector('[name="Assessment.QualitativeExposure"]');
            }
            
            if (!likelihoodElement?.value || !impactElement?.value || !exposureElement?.value) {
                return { level: 1, text: 'TBD', class: 'bg-secondary', score: 0 };
            }
            
            const likelihood = parseInt(likelihoodElement.value);
            const impact = parseInt(impactElement.value);
            const exposure = parseFloat(exposureElement.value);
            
            // Try to find matching cell in the risk matrix
            if (defaultMatrixCells && defaultMatrixCells.length > 0) {
                // Find the cell that matches our impact, likelihood, and exposure (if 3D matrix)
                let matchingCell = null;
                
                if (defaultMatrix && defaultMatrix.matrixType === 1) {
                    // 2D matrix (Impact x Likelihood)
                    matchingCell = defaultMatrixCells.find(cell => 
                        cell.impactLevel === impact && 
                        cell.likelihoodLevel === likelihood &&
                        (!cell.exposureLevel || cell.exposureLevel === null)
                    );
                } else {
                    // 3D matrix (Impact x Likelihood x Exposure)
                    // Find the exposure level that matches closest to our exposure value
                    const exposureLevel = getExposureLevelFromValue(exposure);
                    matchingCell = defaultMatrixCells.find(cell => 
                        cell.impactLevel === impact && 
                        cell.likelihoodLevel === likelihood &&
                        cell.exposureLevel === exposureLevel
                    );
                }
                
                if (matchingCell) {
                    // Use the risk level from the matrix cell
                    const riskLevelText = getRiskLevelText(matchingCell.resultingRiskLevel);
                    const riskLevelClass = getRiskLevelClass(matchingCell.resultingRiskLevel);
                    return { 
                        level: matchingCell.resultingRiskLevel, 
                        text: riskLevelText, 
                        class: riskLevelClass, 
                        score: matchingCell.riskScore 
                    };
                }
            }
            
            // Fallback to calculation if no matrix cell found
            const riskScore = (likelihood * impact) * exposure;
            
            // Use RiskLevelSettings thresholds as fallback
            const settings = riskLevelSettings;
            if (riskScore >= settings.qualitativeCriticalThreshold) {
                return { level: 4, text: 'Critical', class: 'bg-danger', score: riskScore };
            }
            if (riskScore >= settings.qualitativeHighThreshold) {
                return { level: 3, text: 'High', class: 'bg-warning', score: riskScore };
            }
            if (riskScore >= settings.qualitativeMediumThreshold) {
                return { level: 2, text: 'Medium', class: 'bg-info', score: riskScore };
            }
            return { level: 1, text: 'Low', class: 'bg-success', score: riskScore };
        }
        
        function getExposureLevelFromValue(exposureValue) {
            // Map exposure decimal value to level (1-5)
            if (exposureValue <= 0.2) return 1;
            if (exposureValue <= 0.4) return 2;
            if (exposureValue <= 0.8) return 3;
            if (exposureValue <= 1.0) return 4;
            return 5;
        }
        
        function getRiskLevelText(level) {
            switch(level) {
                case 1: return 'Low';
                case 2: return 'Medium';
                case 3: return 'High';
                case 4: return 'Critical';
                default: return 'Medium';
            }
        }
        
        function getRiskLevelClass(level) {
            switch(level) {
                case 1: return 'bg-success';
                case 2: return 'bg-info';
                case 3: return 'bg-warning';
                case 4: return 'bg-danger';
                default: return 'bg-secondary';
            }
        }
        
        function getExposureRating(exposureValue) {
            // The exposure value is already the decimal multiplier from the select options
            return parseFloat(exposureValue) || 1.0;
        }
        
        function updateAllRiskLevels(scenarioIndex = null) {
            const riskLevel = calculateQualitativeRiskLevel(scenarioIndex);
            
            // Update scenario-specific risks
            if (scenarioIndex !== null) {
                const container = document.getElementById('risksContainer_' + scenarioIndex);
                if (container) {
                    const riskItems = container.querySelectorAll('.risk-item');
                    riskItems.forEach((item) => {
                        // More specific selectors to match scenario-specific IDs
                        const badge = item.querySelector(`[id^="inherentRiskLevel_${scenarioIndex}_"]`);
                        const hiddenInput = item.querySelector(`[id^="inherentRiskLevelValue_${scenarioIndex}_"]`);
                        
                        if (badge && hiddenInput) {
                            badge.textContent = riskLevel.text;
                            badge.className = `badge ${riskLevel.class} mb-1`;
                            hiddenInput.value = riskLevel.level;
                            
                            const residualSelect = item.querySelector(`[id^="residualRiskLevel_${scenarioIndex}_"]`);
                            if (residualSelect && !residualSelect.hasAttribute('data-user-modified')) {
                                residualSelect.value = riskLevel.level;
                            }
                        }
                    });
                }
            }
        }
        
        function updateResidualRisk(riskIndex) {
            const treatmentSelect = document.querySelector(`select[name="IdentifiedRisks[${riskIndex}].Treatment"]`);
            const treatmentPlan = document.querySelector(`textarea[name="IdentifiedRisks[${riskIndex}].TreatmentPlan"]`);
            const residualSelect = document.querySelector(`select[name="IdentifiedRisks[${riskIndex}].ResidualRiskLevel"]`);
            const inherentInput = document.querySelector(`input[name="IdentifiedRisks[${riskIndex}].InherentRiskLevel"]`);
            
            if (!treatmentSelect || !residualSelect || !inherentInput) return;
            
            residualSelect.setAttribute('data-user-modified', 'true');
            
            const treatment = parseInt(treatmentSelect.value);
            const inherentLevel = parseInt(inherentInput.value);
            const hasTreatmentPlan = treatmentPlan && treatmentPlan.value.trim().length > 0;
            
            let suggestedResidual = inherentLevel;
            
            if (treatment === 1 && hasTreatmentPlan) {
                suggestedResidual = Math.max(1, inherentLevel - 1);
            } else if (treatment === 2) {
                suggestedResidual = Math.max(1, inherentLevel - 1);
            } else if (treatment === 4) {
                suggestedResidual = 1;
            }
            
            const lastChanged = residualSelect.getAttribute('data-last-changed');
            const now = Date.now();
            if (!lastChanged || (now - parseInt(lastChanged)) > 5000) {
                residualSelect.value = suggestedResidual;
            }
        }
        
        function updateQualitativePreview() {
            const likelihoodElement = document.querySelector('[name="Assessment.QualitativeLikelihood"]');
            const impactElement = document.querySelector('[name="Assessment.QualitativeImpact"]');
            const exposureElement = document.querySelector('[name="Assessment.QualitativeExposure"]');
            
            // Update preview displays (with null checks)
            const likelihoodPreview = document.getElementById('likelihoodPreview');
            if (likelihoodPreview) {
                if (likelihoodElement && likelihoodElement.value) {
                    const likelihoodText = likelihoodElement.options[likelihoodElement.selectedIndex].text;
                    likelihoodPreview.textContent = likelihoodText;
                } else {
                    likelihoodPreview.textContent = '-';
                }
            }
            
            const impactPreview = document.getElementById('impactPreview');
            if (impactPreview) {
                if (impactElement && impactElement.value) {
                    const impactText = impactElement.options[impactElement.selectedIndex].text;
                    impactPreview.textContent = impactText;
                } else {
                    impactPreview.textContent = '-';
                }
            }
            
            const exposurePreview = document.getElementById('exposurePreview');
            if (exposurePreview) {
                if (exposureElement && exposureElement.value) {
                    const exposureText = exposureElement.options[exposureElement.selectedIndex].text;
                    exposurePreview.textContent = exposureText;
                } else {
                    exposurePreview.textContent = '-';
                }
            }
            
            // Calculate and display risk score
            const riskScorePreview = document.getElementById('riskScorePreview');
            if (riskScorePreview) {
                if (likelihoodElement?.value && impactElement?.value && exposureElement?.value) {
                    const likelihood = parseInt(likelihoodElement.value);
                    const impact = parseInt(impactElement.value);
                    const exposure = getExposureRating(parseInt(exposureElement.value));
                    const riskScore = (likelihood * impact) * exposure;
                    
                    riskScorePreview.textContent = riskScore.toFixed(1);
                } else {
                    riskScorePreview.textContent = '-';
                }
            }
            
            // Update risk levels for identified risks
            updateAllRiskLevels();
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Update risk levels when qualitative fields change (for any scenario)
            document.addEventListener('change', function(e) {
                if (e.target && (e.target.name?.includes('QualitativeLikelihood') || 
                                 e.target.name?.includes('QualitativeImpact') || 
                                 e.target.name?.includes('QualitativeExposure'))) {
                    // Extract scenario index from field name
                    const match = e.target.name.match(/ThreatScenarios\[(\d+)\]/);
                    if (match) {
                        const scenarioIdx = parseInt(match[1]);
                        updateScenarioQualitativePreview(scenarioIdx);
                        updateAllRiskLevels(scenarioIdx);
                    }
                }
            });
            
            // Initialize any existing scenarios
            const existingScenarios = document.querySelectorAll('[id^="threatScenario_"]');
            existingScenarios.forEach((scenario, index) => {
                updateScenarioQualitativePreview(index);
                updateAllRiskLevels(index);
            });
            
            // Handle form submission
            document.getElementById('qualitativeAssessmentForm').addEventListener('submit', function(e) {
                console.log('Form submission started');
                
                // Remove any empty identified risks to prevent validation errors
                const emptyRisks = document.querySelectorAll('.risk-item');
                console.log('Found risk items:', emptyRisks.length);
                
                emptyRisks.forEach(riskItem => {
                    const titleInput = riskItem.querySelector('input[name*="IdentifiedRisks"][name*="Title"]');
                    if (!titleInput || !titleInput.value.trim()) {
                        console.log('Removing empty risk item');
                        riskItem.remove();
                    }
                });
                
                // Remove any hidden or orphaned risk-related inputs that might have been left behind
                const orphanedRiskInputs = document.querySelectorAll('input[name*="IdentifiedRisks"], select[name*="IdentifiedRisks"], textarea[name*="IdentifiedRisks"]');
                orphanedRiskInputs.forEach(input => {
                    // Check if this input is inside a remaining risk-item
                    const parentRiskItem = input.closest('.risk-item');
                    if (!parentRiskItem) {
                        console.log('Removing orphaned risk input:', input.name);
                        input.remove();
                    }
                });
                
                // Basic validation
                const requiredFields = ['Assessment.Title', 'Assessment.Asset'];
                let isValid = true;
                
                requiredFields.forEach(fieldName => {
                    const field = document.querySelector(`[name="${fieldName}"]`);
                    if (!field || !field.value.trim()) {
                        isValid = false;
                        field?.classList.add('is-invalid');
                        console.log('Required field missing:', fieldName);
                    } else {
                        field?.classList.remove('is-invalid');
                    }
                });
                
                // Validate threat scenario descriptions (at least one must be filled)
                const threatScenarioFields = document.querySelectorAll('textarea[name*="ThreatScenarios"][name*="Description"]');
                let hasValidThreatScenario = false;
                threatScenarioFields.forEach(field => {
                    if (field.value.trim()) {
                        hasValidThreatScenario = true;
                        field.classList.remove('is-invalid');
                    } else {
                        field.classList.add('is-invalid');
                    }
                });
                
                if (!hasValidThreatScenario && threatScenarioFields.length > 0) {
                    isValid = false;
                    console.log('At least one threat scenario description is required');
                }
                
                // Check that at least one threat scenario has qualitative values
                const scenarios = document.querySelectorAll('.threat-scenario-item');
                let hasValidScenario = false;
                
                scenarios.forEach((scenario, index) => {
                    const likelihoodField = scenario.querySelector('select[name*="ThreatScenarios"][name*="QualitativeLikelihood"]');
                    const impactField = scenario.querySelector('select[name*="ThreatScenarios"][name*="QualitativeImpact"]');
                    const exposureField = scenario.querySelector('select[name*="ThreatScenarios"][name*="QualitativeExposure"]');
                    const descriptionField = scenario.querySelector('textarea[name*="ThreatScenarios"][name*="Description"]');
                    
                    console.log(`Scenario ${index} - Description: ${descriptionField?.value}, Likelihood: ${likelihoodField?.value}, Impact: ${impactField?.value}, Exposure: ${exposureField?.value}`);
                    
                    // Check if this scenario has description and all qualitative fields filled
                    if (descriptionField?.value?.trim()) {
                        if (likelihoodField?.value && impactField?.value && exposureField?.value) {
                            hasValidScenario = true;
                            likelihoodField?.classList.remove('is-invalid');
                            impactField?.classList.remove('is-invalid');
                            exposureField?.classList.remove('is-invalid');
                        } else {
                            // Mark missing fields as invalid
                            if (!likelihoodField?.value) likelihoodField?.classList.add('is-invalid');
                            if (!impactField?.value) impactField?.classList.add('is-invalid');
                            if (!exposureField?.value) exposureField?.classList.add('is-invalid');
                            console.log('Scenario', index, 'has description but missing qualitative fields');
                        }
                    }
                });
                
                if (!hasValidScenario) {
                    isValid = false;
                    console.log('No valid threat scenario with complete qualitative risk factors');
                }
                
                if (!isValid) {
                    e.preventDefault();
                    alert('Please fill in all required fields: Title, Asset, and for each Threat Scenario, provide a Description and all qualitative risk factors (Likelihood, Impact, Exposure)');
                    return false;
                }
                
                // Log final form data for debugging
                const formData = new FormData(this);
                console.log('Final form data:');
                for (let [key, value] of formData.entries()) {
                    if (key.includes('IdentifiedRisks')) {
                        console.log(key, '=', value);
                    }
                }
                
                console.log('Form validation passed, submitting...');
                return true;
            });
        });
    </script>
}