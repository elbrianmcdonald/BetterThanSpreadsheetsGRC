@model CyberRiskApp.ViewModels.RiskAssessmentViewModel
@using CyberRiskApp.Extensions
@{
    var isEdit = Model.Assessment?.Id > 0;
    ViewData["Title"] = isEdit ? "Edit Qualitative Risk Assessment" : "Create Qualitative Risk Assessment";
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-@(isEdit ? "edit" : "balance-scale") text-warning me-2"></i>
                    @(isEdit ? "Edit" : "Create") Qualitative Risk Assessment
                    <span class="badge bg-warning text-dark ms-2">Qualitative</span>
                    @if (isEdit)
                    {
                        <span class="badge bg-primary ms-2">ID: @Model.Assessment.Id</span>
                    }
                </h2>
                <div>
                    <button type="button" class="btn btn-outline-info me-2" onclick="fillTestData()" title="Fill form with realistic test data for testing">
                        <i class="fas fa-flask me-1"></i>Fill Test Data
                    </button>
                    <a asp-action="SelectType" class="btn btn-outline-success me-2">
                        <i class="fas fa-exchange-alt me-1"></i>Change Type
                    </a>
                    @if (isEdit)
                    {
                        <a asp-action="Details" asp-route-id="@Model.Assessment.Id" class="btn btn-outline-info me-2">
                            <i class="fas fa-eye me-1"></i>View Details
                        </a>
                    }
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-1"></i>Back to List
                    </a>
                </div>
            </div>

            <form asp-action="@(isEdit ? "Edit" : "CreateQualitative")" 
                  asp-route-id="@(isEdit ? Model.Assessment.Id : (int?)null)" 
                  method="post" class="needs-validation" novalidate>
                @if (isEdit)
                {
                    <input type="hidden" asp-for="Assessment.Id" />
                }
                <div class="row">
                    <div class="col-md-8">
                        <div class="card shadow-sm">
                            <div class="card-header bg-light">
                                <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Assessment Details</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label asp-for="Assessment.Title" class="form-label fw-bold">
                                        <i class="fas fa-tag me-1 text-primary"></i>Assessment Title <span class="text-danger">*</span>
                                    </label>
                                    <input asp-for="Assessment.Title" class="form-control form-control-lg" 
                                           placeholder="Enter assessment title" required 
                                           data-bs-toggle="tooltip" 
                                           title="Provide a clear, descriptive title for this risk assessment" />
                                    <span asp-validation-for="Assessment.Title" class="text-danger"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="Assessment.Asset" class="form-label fw-bold">
                                        <i class="fas fa-server me-1 text-primary"></i>Primary Asset <span class="text-danger">*</span>
                                    </label>
                                    @Html.AssetComboboxFor(m => m.Assessment.Asset, canAddNew: Model.CanAddNewAssets, required: true)
                                    <small class="text-muted">System, application, or resource being assessed</small>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label asp-for="Assessment.BusinessUnit" class="form-label fw-bold">
                                                <i class="fas fa-building me-1 text-secondary"></i>Business Unit
                                            </label>
                                            @Html.BusinessUnitComboboxFor(m => m.Assessment.BusinessUnit, canAddNew: Model.CanAddNewBusinessUnits)
                                            <small class="text-muted">Department or division that owns the asset</small>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label asp-for="Assessment.BusinessOwner" class="form-label fw-bold">
                                                <i class="fas fa-user-tie me-1 text-secondary"></i>Business Owner
                                            </label>
                                            @Html.BusinessOwnerComboboxFor(m => m.Assessment.BusinessOwner, canAddNew: Model.CanAddNewBusinessOwners)
                                            <small class="text-muted">Business stakeholder responsible for the asset</small>
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="Assessment.Description" class="form-label">Description</label>
                                    <textarea asp-for="Assessment.Description" class="form-control" rows="3" placeholder="Describe the assessment scope and objectives"></textarea>
                                    <span asp-validation-for="Assessment.Description" class="text-danger"></span>
                                </div>

                            </div>
                        </div>

                    </div>

                    <div class="col-md-4">
                        <div class="card shadow-sm">
                            <div class="card-header bg-info text-white">
                                <h5 class="mb-0"><i class="fas fa-cog me-2"></i>Assessment Settings</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label asp-for="Assessment.Status" class="form-label fw-bold">
                                        <i class="fas fa-flag me-1 text-primary"></i>Status
                                    </label>
                                    <select asp-for="Assessment.Status" class="form-select">
                                        <option value="Draft" selected>Draft</option>
                                        <option value="InProgress">In Progress</option>
                                        <option value="ReadyForReview">Ready for Review</option>
                                    </select>
                                    <span asp-validation-for="Assessment.Status" class="text-danger"></span>
                                    <small class="text-muted">Set to "Ready for Review" to automatically submit for manager approval and create backlog entry.</small>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="Assessment.RiskMatrixId" class="form-label fw-bold">
                                        <i class="fas fa-table me-1 text-warning"></i>Risk Matrix <span class="text-danger">*</span>
                                    </label>
                                    <select asp-for="Assessment.RiskMatrixId" class="form-select" 
                                            id="riskMatrixSelector" required 
                                            onchange="loadMatrixData(this.value)"
                                            data-bs-toggle="tooltip" 
                                            title="Select the risk matrix for calculating risk scores and SLA deadlines">
                                        <option value="">Select Risk Matrix</option>
                                        @if (Model.AvailableMatrices != null)
                                        {
                                            @foreach (var matrix in Model.AvailableMatrices)
                                            {
                                                <option value="@matrix.Id" selected="@(matrix.Id == Model.SelectedMatrix?.Id)">
                                                    @matrix.Name (@matrix.MatrixSize×@matrix.MatrixSize @matrix.MatrixType.ToString().Replace("ImpactLikelihood", "Impact×Likelihood").Replace("Exposure", "×Exposure"))
                                                </option>
                                            }
                                        }
                                    </select>
                                    <span asp-validation-for="Assessment.RiskMatrixId" class="text-danger"></span>
                                    <small class="text-muted">Defines risk calculation method and SLA thresholds</small>
                                </div>

                                <!-- Matrix Settings Display -->
                                <div id="matrixNotSelected" class="alert alert-info mt-3">
                                    <i class="fas fa-info-circle me-2"></i>
                                    <strong>Select a risk matrix above</strong> to view calculation settings and risk level thresholds
                                </div>

                                <div id="matrixSettingsContent" class="mt-3" style="display: none;">
                                    <div class="card border-info">
                                        <div class="card-header bg-info bg-opacity-10">
                                            <h6 class="mb-0">
                                                <i class="fas fa-table me-2"></i>
                                                Matrix Settings: <span id="matrixName">Loading...</span>
                                            </h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="row">
                                                <div class="col-md-4">
                                                    <small class="text-muted">Type:</small>
                                                    <div id="matrixType">-</div>
                                                </div>
                                                <div class="col-md-4">
                                                    <small class="text-muted">Size:</small>
                                                    <div id="matrixSize">-</div>
                                                </div>
                                                <div class="col-md-4">
                                                    <small class="text-muted">Default SLA:</small>
                                                    <div id="matrixSla">-</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>



                <!-- Comprehensive Threat Scenarios Section -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card shadow-sm border-warning">
                            <div class="card-header bg-warning bg-opacity-15">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="mb-0 text-dark">
                                            <i class="fas fa-sitemap me-2"></i>Comprehensive Threat Scenarios
                                        </h5>
                                        <small class="text-muted">Add detailed threat scenarios with multiple risks, controls, and MITRE ATT&CK mapping</small>
                                    </div>
                                    <button type="button" class="btn btn-warning btn-lg" onclick="addThreatScenario()" style="border: 2px solid #fd7e14;">
                                        <i class="fas fa-plus me-1"></i>Add Threat Scenario
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info">
                                    <div class="d-flex align-items-start">
                                        <i class="fas fa-info-circle me-2 mt-1"></i>
                                        <div>
                                            <strong>Enhanced Threat Modeling:</strong> Create detailed threat scenarios with initial vectors, actor steps, objectives, and multiple individual risks.<br>
                                            <small class="text-muted">Each risk can have its own ratings, treatment plans, and completion dates. MITRE ATT&CK techniques can be mapped to each component.</small>
                                        </div>
                                    </div>
                                </div>
                                
                                <div id="threat-scenarios-container">
                                    @for (int i = 0; i < Model.ThreatScenarios.Count; i++)
                                    {
                                        @Html.Partial("_ThreatScenarioCard", Model.ThreatScenarios[i], new ViewDataDictionary(ViewData) 
                                        { 
                                            ["ScenarioIndex"] = i.ToString() 
                                        })
                                    }
                                </div>
                                
                                <!-- Overall Assessment Risk Summary -->
                                <div class="card bg-light border-0 mt-4" id="overall-assessment-summary" style="display: none;">
                                    <div class="card-body">
                                        <h6 class="text-center text-muted mb-3">
                                            <i class="fas fa-chart-pie me-2"></i>Overall Assessment Risk Summary
                                        </h6>
                                        <div class="row text-center">
                                            <div class="col-md-3">
                                                <div class="p-2">
                                                    <small class="text-muted d-block">Scenarios</small>
                                                    <strong class="d-block h5" id="total-scenarios-count">0</strong>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="p-2">
                                                    <small class="text-muted d-block">Total Risks</small>
                                                    <strong class="d-block h5" id="total-risks-count">0</strong>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="p-2">
                                                    <small class="text-muted d-block">Highest Risk Level</small>
                                                    <span class="badge fs-6" id="highest-risk-level">Unknown</span>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="p-2">
                                                    <small class="text-muted d-block">Above Risk Appetite</small>
                                                    <strong class="d-block h5 text-danger" id="risks-above-appetite-count">0</strong>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-12">
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-success btn-lg" id="submitBtn">
                                <i class="fas fa-save me-1"></i>@(isEdit ? "Update Assessment" : "Create Assessment")
                            </button>
                            @if (isEdit)
                            {
                                <a asp-action="Details" asp-route-id="@Model.Assessment.Id" class="btn btn-secondary btn-lg">
                                    <i class="fas fa-times me-1"></i>Cancel
                                </a>
                            }
                            else
                            {
                                <a asp-action="Index" class="btn btn-secondary btn-lg">
                                    <i class="fas fa-times me-1"></i>Cancel
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        // Global variables for risk calculation
        let currentMatrix = null;
        let matrixLevels = [];
        let matrixCells = [];
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            initializeTooltips();
            
            // Initialize smart comboboxes if available
            if (window.initializeSmartComboboxes) {
                console.log('Initializing smart comboboxes...');
                window.initializeSmartComboboxes();
            }
            
            // Load initial matrix if one is pre-selected
            const selectedMatrixId = document.getElementById('riskMatrixSelector').value;
            if (selectedMatrixId) {
                loadMatrixData(selectedMatrixId);
            }
            
            // Add risk calculation listeners
        });
        
        // Initialize tooltips
        function initializeTooltips() {
            const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            tooltips.forEach(function(tooltip) {
                if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
                    new bootstrap.Tooltip(tooltip);
                }
            });
        }
        
        // Load matrix data when selection changes
        async function loadMatrixData(matrixId) {
            console.log('Loading matrix data for ID:', matrixId);
            
            if (!matrixId) {
                // Reset displays
                hideMatrixSettings();
                return;
            }
            
            try {
                // Show loading state
                showMatrixLoading();
                
                // Fetch matrix data from server
                const response = await fetch(`/api/risk-matrix/${matrixId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const matrixData = await response.json();
                console.log('Matrix data loaded:', matrixData);
                
                // Store matrix data globally
                currentMatrix = matrixData.matrix;
                matrixLevels = matrixData.levels || [];
                matrixCells = matrixData.cells || [];
                
                // Update UI
                updateMatrixSettings(matrixData);
                
            } catch (error) {
                console.error('Error loading matrix data:', error);
                showMatrixError();
            }
        }
        
        // Show matrix loading state
        function showMatrixLoading() {
            document.getElementById('matrixNotSelected').style.display = 'none';
            document.getElementById('matrixSettingsContent').style.display = 'block';
            document.getElementById('matrixName').textContent = 'Loading...';
        }
        
        // Hide matrix settings
        function hideMatrixSettings() {
            document.getElementById('matrixNotSelected').style.display = 'block';
            document.getElementById('matrixSettingsContent').style.display = 'none';
        }
        
        // Show matrix error
        function showMatrixError() {
            document.getElementById('matrixNotSelected').innerHTML = `
                <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                <strong>Error loading matrix data</strong> - Please try selecting another matrix
            `;
            document.getElementById('matrixNotSelected').style.display = 'block';
            document.getElementById('matrixSettingsContent').style.display = 'none';
        }
        
        // Update matrix settings display
        function updateMatrixSettings(matrixData) {
            const matrix = matrixData.matrix;
            const levels = matrixData.levels || [];
            const cells = matrixData.cells || [];
            
            // Update matrix details
            document.getElementById('matrixName').textContent = matrix.name || 'Unknown Matrix';
            document.getElementById('matrixType').textContent = matrix.matrixType?.replace('ImpactLikelihood', 'Impact×Likelihood')?.replace('Exposure', '×Exposure') || 'Unknown';
            document.getElementById('matrixSize').textContent = `${matrix.matrixSize}×${matrix.matrixSize}`;
            
            // Update risk level thresholds
            updateRiskLevelThresholds(levels);
            
            // Update SLA settings
            updateSlaSettings(matrix);
            
            // Update risk appetite
            updateRiskAppetite(matrix);
            
            // Show the content
            document.getElementById('matrixNotSelected').style.display = 'none';
            document.getElementById('matrixSettingsContent').style.display = 'block';
        }
        
        // Update risk level thresholds table
        function updateRiskLevelThresholds(levels) {
            const riskLevels = ['Critical', 'High', 'Medium', 'Low'];
            
            riskLevels.forEach(level => {
                const levelData = levels.find(l => l.levelName === level);
                const rangeElement = document.getElementById(level.toLowerCase() + 'Range');
                
                if (levelData && rangeElement) {
                    rangeElement.textContent = `${levelData.minValue} - ${levelData.maxValue}`;
                } else if (rangeElement) {
                    rangeElement.textContent = 'Not defined';
                }
            });
        }
        
        // Update SLA settings table
        function updateSlaSettings(matrix) {
            const riskLevels = [
                { name: 'Critical', id: 'critical' },
                { name: 'High', id: 'high' },
                { name: 'Medium', id: 'medium' },
                { name: 'Low', id: 'low' }
            ];
            
            riskLevels.forEach(level => {
                const slaElement = document.getElementById(level.id + 'Sla');
                const daysElement = document.getElementById(level.id + 'Days');
                
                // Try to get SLA hours from matrix (check multiple possible property names)
                let slaHours = null;
                if (matrix[level.id + 'RiskSlaHours']) {
                    slaHours = matrix[level.id + 'RiskSlaHours'];
                } else if (matrix['assessmentSla' + level.name + 'Hours']) {
                    slaHours = matrix['assessmentSla' + level.name + 'Hours'];
                }
                
                if (slaHours && slaElement && daysElement) {
                    slaElement.textContent = `${slaHours}h`;
                    daysElement.textContent = `${Math.round(slaHours / 8)} days`;
                } else {
                    if (slaElement) slaElement.textContent = 'Not set';
                    if (daysElement) daysElement.textContent = '-';
                }
            });
        }
        
        // Update risk appetite display
        function updateRiskAppetite(matrix) {
            const appetiteElement = document.getElementById('riskAppetiteLevel');
            const descriptionElement = document.getElementById('riskAppetiteDescription');
            
            if (matrix.riskAppetiteLevel && appetiteElement) {
                appetiteElement.textContent = matrix.riskAppetiteLevel;
                appetiteElement.className = `badge ${getRiskAppetiteBadgeClass(matrix.riskAppetiteLevel)}`;
                
                if (descriptionElement) {
                    descriptionElement.textContent = `Organization accepts risks at or below ${matrix.riskAppetiteLevel} level`;
                }
            } else {
                if (appetiteElement) {
                    appetiteElement.textContent = 'Not Set';
                    appetiteElement.className = 'badge bg-secondary';
                }
                if (descriptionElement) {
                    descriptionElement.textContent = 'Risk appetite not configured for this matrix';
                }
            }
        }
        
        // Get risk appetite badge class
        function getRiskAppetiteBadgeClass(appetiteLevel) {
            switch (appetiteLevel?.toLowerCase()) {
                case 'critical': return 'bg-danger';
                case 'high': return 'bg-warning';
                case 'medium': return 'bg-info';
                case 'low': return 'bg-success';
                default: return 'bg-secondary';
            }
        }
        
        
        // Get risk level from score
        function getRiskLevel(score) {
            if (!currentMatrix || !matrixLevels.length) {
                // Fallback simple calculation
                if (score >= 60) return 'Critical';
                if (score >= 30) return 'High';
                if (score >= 10) return 'Medium';
                return 'Low';
            }
            
            // Use matrix levels
            for (const level of matrixLevels) {
                if (score >= level.minValue && score <= level.maxValue) {
                    return level.levelName;
                }
            }
            
            return 'Unknown';
        }
        
        // Get risk level badge class
        function getRiskLevelBadgeClass(riskLevel) {
            switch (riskLevel?.toLowerCase()) {
                case 'critical': return 'bg-danger';
                case 'high': return 'bg-warning';
                case 'medium': return 'bg-info';
                case 'low': return 'bg-success';
                default: return 'bg-secondary';
            }
        }
        
        // Update SLA information
        function updateBasicSlaInfo(riskLevel) {
            if (!currentMatrix) {
                document.getElementById('basicSlaHours').textContent = 'Matrix not loaded';
                document.getElementById('basicSlaDate').textContent = 'Select risk matrix first';
                return;
            }
            
            // Get SLA hours for this risk level
            let slaHours = null;
            const levelKey = riskLevel.toLowerCase();
            
            if (currentMatrix[levelKey + 'RiskSlaHours']) {
                slaHours = currentMatrix[levelKey + 'RiskSlaHours'];
            } else if (currentMatrix['assessmentSla' + riskLevel + 'Hours']) {
                slaHours = currentMatrix['assessmentSla' + riskLevel + 'Hours'];
            }
            
            if (slaHours) {
                document.getElementById('basicSlaHours').textContent = `${slaHours} hours`;
                
                // Calculate due date
                const now = new Date();
                const dueDate = new Date(now.getTime() + (slaHours * 60 * 60 * 1000));
                document.getElementById('basicSlaDate').textContent = `Due: ${dueDate.toLocaleDateString()} ${dueDate.toLocaleTimeString()}`;
            } else {
                document.getElementById('basicSlaHours').textContent = 'Not configured';
                document.getElementById('basicSlaDate').textContent = 'SLA not set for this risk level';
            }
        }
        
        // Update risk appetite status
        function updateRiskAppetiteStatus(riskLevel) {
            if (!currentMatrix || !currentMatrix.riskAppetiteLevel) return;
            
            const appetiteLevel = currentMatrix.riskAppetiteLevel.toLowerCase();
            const currentLevel = riskLevel.toLowerCase();
            
            const riskLevels = ['low', 'medium', 'high', 'critical'];
            const appetiteIndex = riskLevels.indexOf(appetiteLevel);
            const currentIndex = riskLevels.indexOf(currentLevel);
            
            const calculationElement = document.getElementById('basicRiskCalculation');
            
            if (currentIndex > appetiteIndex) {
                // Above risk appetite
                calculationElement.classList.remove('border-success');
                calculationElement.classList.add('border-warning');
                
                const slaDateElement = document.getElementById('basicSlaDate');
                if (slaDateElement && !slaDateElement.textContent.includes('ABOVE APPETITE')) {
                    slaDateElement.innerHTML += ' <span class="badge bg-warning ms-2">ABOVE APPETITE</span>';
                }
            } else {
                // Within risk appetite
                calculationElement.classList.remove('border-warning');
                calculationElement.classList.add('border-success');
            }
        }
        
        // Global function for external calls
        window.loadMatrixData = loadMatrixData;
        
        // ========== COMPREHENSIVE THREAT SCENARIO MANAGEMENT ==========
        
        let threatScenarioCounter = 0;
        let riskCounter = 0;
        let stepCounter = 0;
        
        // Add new threat scenario
        function addThreatScenario() {
            threatScenarioCounter++;
            const scenarioIndex = threatScenarioCounter - 1;
            const scenarioId = `TS-${String(scenarioIndex + 1).padStart(3, '0')}`;
            
            const scenarioHtml = `
                <div class="card shadow-sm threat-scenario-card mb-4" id="threat-scenario-${scenarioIndex}" data-scenario-index="${scenarioIndex}">
                    <div class="card-header bg-primary text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Threat Scenario ${scenarioIndex + 1}
                            </h6>
                            <div>
                                <button type="button" class="btn btn-sm btn-outline-light toggle-scenario" 
                                        data-bs-toggle="collapse" data-bs-target="#scenario-content-${scenarioIndex}">
                                    <i class="fas fa-chevron-down"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-light remove-scenario" 
                                        onclick="removeThreatScenario(${scenarioIndex})">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="collapse show" id="scenario-content-${scenarioIndex}">
                        <div class="card-body">
                            <!-- Scenario Header Information -->
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-hashtag me-1"></i>Scenario ID <span class="text-danger">*</span>
                                    </label>
                                    <input name="ThreatScenarios[${scenarioIndex}].ScenarioId" 
                                           value="${scenarioId}" 
                                           class="form-control" 
                                           placeholder="e.g., TS-001" 
                                           required />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-tag me-1"></i>Scenario Name <span class="text-danger">*</span>
                                    </label>
                                    <input name="ThreatScenarios[${scenarioIndex}].ScenarioName" 
                                           class="form-control" 
                                           placeholder="e.g., Phishing Attack on Email System" 
                                           required />
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-file-alt me-1"></i>Scenario Description
                                </label>
                                <textarea name="ThreatScenarios[${scenarioIndex}].Description" 
                                          class="form-control" 
                                          rows="3" 
                                          placeholder="Describe the overall threat scenario..."></textarea>
                            </div>
                            
                            <div class="mb-4">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-shield-alt me-1 text-info"></i>CIA Impact Type <span class="text-danger">*</span>
                                </label>
                                <select name="ThreatScenarios[${scenarioIndex}].CIAImpactType" 
                                        class="form-select" 
                                        required>
                                    <option value="">-- Select CIA Impact --</option>
                                    <option value="1">Confidentiality</option>
                                    <option value="2">Integrity</option>
                                    <option value="3">Availability</option>
                                    <option value="4">Confidentiality & Integrity</option>
                                    <option value="5">Confidentiality & Availability</option>
                                    <option value="6">Integrity & Availability</option>
                                    <option value="7" selected>Confidentiality, Integrity & Availability</option>
                                </select>
                                <div class="form-text">
                                    <small class="text-muted">
                                        <strong>Confidentiality:</strong> Unauthorized access to information<br>
                                        <strong>Integrity:</strong> Unauthorized modification of data<br>
                                        <strong>Availability:</strong> Disruption of access to systems/data
                                    </small>
                                </div>
                            </div>

                            <!-- Scenario Sections -->
                            <div class="accordion" id="scenario-accordion-${scenarioIndex}">
                                ${createAccordionSections(scenarioIndex)}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById('threat-scenarios-container').insertAdjacentHTML('beforeend', scenarioHtml);
            updateOverallSummary();
            
            // Initialize MITRE autocomplete for the new threat scenario
            initializeAllMitreInputs();
        }
        
        // Create accordion sections for threat scenario
        function createAccordionSections(scenarioIndex) {
            return `
                <!-- Initial Threat Vector Section -->
                <div class="accordion-item">
                    <h2 class="accordion-header" id="vector-heading-${scenarioIndex}">
                        <button class="accordion-button" type="button" 
                                data-bs-toggle="collapse" 
                                data-bs-target="#vector-collapse-${scenarioIndex}">
                            <i class="fas fa-arrow-right text-danger me-2"></i>
                            <strong>Initial Threat Vector</strong>
                        </button>
                    </h2>
                    <div id="vector-collapse-${scenarioIndex}" 
                         class="accordion-collapse collapse show" 
                         data-bs-parent="#scenario-accordion-${scenarioIndex}">
                        <div class="accordion-body">
                            ${createThreatVectorForm(scenarioIndex)}
                        </div>
                    </div>
                </div>

                <!-- Threat Actor Steps Section -->
                <div class="accordion-item">
                    <h2 class="accordion-header" id="steps-heading-${scenarioIndex}">
                        <button class="accordion-button collapsed" type="button" 
                                data-bs-toggle="collapse" 
                                data-bs-target="#steps-collapse-${scenarioIndex}">
                            <i class="fas fa-list-ol text-warning me-2"></i>
                            <strong>Threat Actor Steps</strong>
                            <span class="badge bg-secondary ms-2" id="steps-count-${scenarioIndex}">0</span>
                        </button>
                    </h2>
                    <div id="steps-collapse-${scenarioIndex}" 
                         class="accordion-collapse collapse" 
                         data-bs-parent="#scenario-accordion-${scenarioIndex}">
                        <div class="accordion-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <p class="text-muted mb-0">Define the sequence of steps the threat actor takes</p>
                                <button type="button" class="btn btn-sm btn-outline-success" 
                                        onclick="addThreatActorStep(${scenarioIndex})">
                                    <i class="fas fa-plus me-1"></i>Add Step
                                </button>
                            </div>
                            <div id="threat-actor-steps-${scenarioIndex}">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Threat Actor Objective Section -->
                <div class="accordion-item">
                    <h2 class="accordion-header" id="objective-heading-${scenarioIndex}">
                        <button class="accordion-button collapsed" type="button" 
                                data-bs-toggle="collapse" 
                                data-bs-target="#objective-collapse-${scenarioIndex}">
                            <i class="fas fa-bullseye text-info me-2"></i>
                            <strong>Threat Actor Objective</strong>
                        </button>
                    </h2>
                    <div id="objective-collapse-${scenarioIndex}" 
                         class="accordion-collapse collapse" 
                         data-bs-parent="#scenario-accordion-${scenarioIndex}">
                        <div class="accordion-body">
                            ${createThreatActorObjectiveForm(scenarioIndex)}
                        </div>
                    </div>
                </div>

                <!-- Identified Risks Section -->
                <div class="accordion-item">
                    <h2 class="accordion-header" id="risks-heading-${scenarioIndex}">
                        <button class="accordion-button collapsed" type="button" 
                                data-bs-toggle="collapse" 
                                data-bs-target="#risks-collapse-${scenarioIndex}">
                            <i class="fas fa-exclamation-circle text-danger me-2"></i>
                            <strong>Identified Risks</strong>
                            <span class="badge bg-danger ms-2" id="risks-count-${scenarioIndex}">0</span>
                        </button>
                    </h2>
                    <div id="risks-collapse-${scenarioIndex}" 
                         class="accordion-collapse collapse" 
                         data-bs-parent="#scenario-accordion-${scenarioIndex}">
                        <div class="accordion-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <p class="text-muted mb-0">Add multiple risks that could emerge from this threat scenario</p>
                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                        onclick="addScenarioRisk(${scenarioIndex})">
                                    <i class="fas fa-plus me-1"></i>Add Risk
                                </button>
                            </div>
                            
                            <!-- Overall Scenario Risk Summary -->
                            <div class="alert alert-light border mb-3" id="scenario-risk-summary-${scenarioIndex}">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong class="text-muted">Overall Scenario Risk Level:</strong>
                                        <span class="badge ms-2" id="overall-risk-badge-${scenarioIndex}">Unknown</span>
                                    </div>
                                    <div>
                                        <small class="text-muted">Highest individual risk: 
                                            <strong id="overall-risk-score-${scenarioIndex}">-</strong>
                                        </small>
                                    </div>
                                </div>
                            </div>
                            
                            <div id="scenario-risks-${scenarioIndex}">
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Create threat vector form
        function createThreatVectorForm(scenarioIndex) {
            return `
                <div class="threat-vector-form">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-tag me-1"></i>Threat Vector Name <span class="text-danger">*</span>
                                </label>
                                <input name="ThreatScenarios[${scenarioIndex}].ThreatVector.Name" 
                                       class="form-control" 
                                       placeholder="e.g., Phishing Email" 
                                       required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-shield-alt me-1"></i>MITRE ATT&CK Technique
                                </label>
                                <input name="ThreatScenarios[${scenarioIndex}].ThreatVector.MitreTechnique" 
                                       class="form-control mitre-technique-input" 
                                       placeholder="e.g., T1566.001 - Spearphishing Attachment" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">
                            <i class="fas fa-file-alt me-1"></i>Description <span class="text-danger">*</span>
                        </label>
                        <textarea name="ThreatScenarios[${scenarioIndex}].ThreatVector.Description" 
                                  class="form-control" 
                                  rows="3" 
                                  placeholder="Describe the initial entry point used by the threat actor..."
                                  required></textarea>
                    </div>

                    <!-- Controls Section -->
                    <div class="row">
                        ${createControlsSection(scenarioIndex, 'ThreatVector')}
                    </div>
                </div>
            `;
        }
        
        // Create threat actor objective form
        function createThreatActorObjectiveForm(scenarioIndex) {
            return `
                <div class="threat-actor-objective-form">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-bullseye me-1"></i>Objective Name
                                </label>
                                <input name="ThreatScenarios[${scenarioIndex}].ThreatActorObjective.Name" 
                                       class="form-control" 
                                       placeholder="e.g., Data Exfiltration" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-shield-alt me-1"></i>MITRE ATT&CK Technique
                                </label>
                                <input name="ThreatScenarios[${scenarioIndex}].ThreatActorObjective.MitreTechnique" 
                                       class="form-control mitre-technique-input" 
                                       placeholder="e.g., T1041 - Exfiltration Over C2 Channel" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">
                            <i class="fas fa-file-alt me-1"></i>Description
                        </label>
                        <textarea name="ThreatScenarios[${scenarioIndex}].ThreatActorObjective.Description" 
                                  class="form-control" 
                                  rows="3" 
                                  placeholder="Describe the end goal or objective of the threat actor..."></textarea>
                    </div>

                    <!-- Controls Section -->
                    <div class="row">
                        ${createControlsSection(scenarioIndex, 'ThreatActorObjective')}
                    </div>
                </div>
            `;
        }
        
        // Create controls section for different components
        function createControlsSection(scenarioIndex, componentType) {
            const prefix = componentType.toLowerCase();
            return `
                <div class="col-md-3">
                    <label class="form-label fw-bold text-success">
                        <i class="fas fa-shield-alt me-1"></i>Current Protective
                    </label>
                    <div id="${prefix}-current-protective-${scenarioIndex}" class="controls-container">
                        <!-- Controls will be added here dynamically -->
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-success mt-2" 
                            onclick="addControl('${prefix}-current-protective-${scenarioIndex}', '${scenarioIndex}', '${componentType}.CurrentProtectiveControls')">
                        <i class="fas fa-plus me-1"></i>Add Control
                    </button>
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold text-info">
                        <i class="fas fa-search me-1"></i>Current Detective
                    </label>
                    <div id="${prefix}-current-detective-${scenarioIndex}" class="controls-container">
                        <!-- Controls will be added here dynamically -->
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-info mt-2" 
                            onclick="addControl('${prefix}-current-detective-${scenarioIndex}', '${scenarioIndex}', '${componentType}.CurrentDetectiveControls')">
                        <i class="fas fa-plus me-1"></i>Add Control
                    </button>
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold text-warning">
                        <i class="fas fa-plus-shield me-1"></i>Needed Protective
                    </label>
                    <div id="${prefix}-needed-protective-${scenarioIndex}" class="controls-container">
                        <!-- Controls will be added here dynamically -->
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-warning mt-2" 
                            onclick="addControl('${prefix}-needed-protective-${scenarioIndex}', '${scenarioIndex}', '${componentType}.NeededProtectiveControls')">
                        <i class="fas fa-plus me-1"></i>Add Control
                    </button>
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold text-secondary">
                        <i class="fas fa-plus-search me-1"></i>Needed Detective
                    </label>
                    <div id="${prefix}-needed-detective-${scenarioIndex}" class="controls-container">
                        <!-- Controls will be added here dynamically -->
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-secondary mt-2" 
                            onclick="addControl('${prefix}-needed-detective-${scenarioIndex}', '${scenarioIndex}', '${componentType}.NeededDetectiveControls')">
                        <i class="fas fa-plus me-1"></i>Add Control
                    </button>
                </div>
            `;
        }
        
        // Remove threat scenario
        function removeThreatScenario(scenarioIndex) {
            document.getElementById(`threat-scenario-${scenarioIndex}`).remove();
            updateOverallSummary();
        }
        
        // Add threat actor step
        function addThreatActorStep(scenarioIndex) {
            const stepIndex = document.querySelectorAll(`#threat-actor-steps-${scenarioIndex} .threat-actor-step`).length;
            
            const stepHtml = `
                <div class="card mb-3 threat-actor-step" data-step-index="${stepIndex}">
                    <div class="card-header bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">Step ${stepIndex + 1}</h6>
                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                    onclick="removeThreatActorStep(${scenarioIndex}, ${stepIndex})">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Step Name</label>
                                <input name="ThreatScenarios[${scenarioIndex}].ThreatActorSteps[${stepIndex}].Name" 
                                       class="form-control" 
                                       placeholder="e.g., Credential Harvesting" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label fw-bold">MITRE ATT&CK Technique</label>
                                <input name="ThreatScenarios[${scenarioIndex}].ThreatActorSteps[${stepIndex}].MitreTechnique" 
                                       class="form-control mitre-technique-input" 
                                       placeholder="e.g., T1555 - Credentials from Password Stores" />
                            </div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label fw-bold">Description</label>
                            <textarea name="ThreatScenarios[${scenarioIndex}].ThreatActorSteps[${stepIndex}].Description" 
                                      class="form-control" 
                                      rows="2" 
                                      placeholder="Describe what the threat actor does in this step..."></textarea>
                        </div>
                        
                        <!-- Controls Section -->
                        <div class="mt-4">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-shield-alt me-2"></i>Security Controls
                            </h6>
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="form-label fw-bold text-success">
                                        <i class="fas fa-shield-alt me-1"></i>Current Protective
                                    </label>
                                    <div id="step-current-protective-${scenarioIndex}-${stepIndex}" class="controls-container">
                                        <!-- Controls will be added here dynamically -->
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-success mt-2" 
                                            onclick="addControl('step-current-protective-${scenarioIndex}-${stepIndex}', '${scenarioIndex}', 'ThreatActorSteps[${stepIndex}].CurrentProtectiveControls')">
                                        <i class="fas fa-plus me-1"></i>Add Control
                                    </button>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label fw-bold text-info">
                                        <i class="fas fa-search me-1"></i>Current Detective
                                    </label>
                                    <div id="step-current-detective-${scenarioIndex}-${stepIndex}" class="controls-container">
                                        <!-- Controls will be added here dynamically -->
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-info mt-2" 
                                            onclick="addControl('step-current-detective-${scenarioIndex}-${stepIndex}', '${scenarioIndex}', 'ThreatActorSteps[${stepIndex}].CurrentDetectiveControls')">
                                        <i class="fas fa-plus me-1"></i>Add Control
                                    </button>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label fw-bold text-warning">
                                        <i class="fas fa-plus-shield me-1"></i>Needed Protective
                                    </label>
                                    <div id="step-needed-protective-${scenarioIndex}-${stepIndex}" class="controls-container">
                                        <!-- Controls will be added here dynamically -->
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-warning mt-2" 
                                            onclick="addControl('step-needed-protective-${scenarioIndex}-${stepIndex}', '${scenarioIndex}', 'ThreatActorSteps[${stepIndex}].NeededProtectiveControls')">
                                        <i class="fas fa-plus me-1"></i>Add Control
                                    </button>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label fw-bold text-secondary">
                                        <i class="fas fa-plus-search me-1"></i>Needed Detective
                                    </label>
                                    <div id="step-needed-detective-${scenarioIndex}-${stepIndex}" class="controls-container">
                                        <!-- Controls will be added here dynamically -->
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-secondary mt-2" 
                                            onclick="addControl('step-needed-detective-${scenarioIndex}-${stepIndex}', '${scenarioIndex}', 'ThreatActorSteps[${stepIndex}].NeededDetectiveControls')">
                                        <i class="fas fa-plus me-1"></i>Add Control
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById(`threat-actor-steps-${scenarioIndex}`).insertAdjacentHTML('beforeend', stepHtml);
            updateStepCount(scenarioIndex);
            
            // Initialize MITRE autocomplete for the new step
            initializeAllMitreInputs();
        }
        
        // Remove threat actor step
        function removeThreatActorStep(scenarioIndex, stepIndex) {
            document.querySelector(`#threat-actor-steps-${scenarioIndex} .threat-actor-step[data-step-index="${stepIndex}"]`).remove();
            updateStepCount(scenarioIndex);
        }
        
        // Update step count
        function updateStepCount(scenarioIndex) {
            const count = document.querySelectorAll(`#threat-actor-steps-${scenarioIndex} .threat-actor-step`).length;
            document.getElementById(`steps-count-${scenarioIndex}`).textContent = count;
        }
        
        // Add scenario risk
        function addScenarioRisk(scenarioIndex) {
            const riskIndex = document.querySelectorAll(`#scenario-risks-${scenarioIndex} .scenario-risk-card`).length;
            
            const riskHtml = createScenarioRiskForm(scenarioIndex, riskIndex);
            document.getElementById(`scenario-risks-${scenarioIndex}`).insertAdjacentHTML('beforeend', riskHtml);
            updateRiskCount(scenarioIndex);
            updateOverallSummary();
        }
        
        // Create scenario risk form
        function createScenarioRiskForm(scenarioIndex, riskIndex) {
            return `
                <div class="card mb-3 scenario-risk-card" id="scenario-risk-${scenarioIndex}-${riskIndex}" data-risk-index="${riskIndex}">
                    <div class="card-header bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-exclamation-triangle text-danger me-2"></i>
                                Risk ${riskIndex + 1}
                            </h6>
                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                    onclick="removeScenarioRisk(${scenarioIndex}, ${riskIndex})">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <!-- Risk Basic Information -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-tag me-1"></i>Risk Name <span class="text-danger">*</span>
                                </label>
                                <input name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].RiskName" 
                                       class="form-control" 
                                       placeholder="e.g., Credential Theft" 
                                       required />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Risk Treatment Status</label>
                                <select name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentPlanStatus" 
                                        class="form-select">
                                    <option value="0">Not Started</option>
                                    <option value="1">In Progress</option>
                                    <option value="2">On Hold</option>
                                    <option value="3">Completed</option>
                                    <option value="4">Cancelled</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">
                                <i class="fas fa-file-alt me-1"></i>Risk Description <span class="text-danger">*</span>
                            </label>
                            <textarea name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].RiskDescription" 
                                      class="form-control" 
                                      rows="2" 
                                      placeholder="Describe what could go wrong..."
                                      required></textarea>
                        </div>

                        <!-- Current Risk Assessment -->
                        <div class="row">
                            <div class="col-md-6">
                                ${createRiskAssessmentCard(scenarioIndex, riskIndex, 'current', 'Current Risk (Before Treatment)', 'primary')}
                            </div>
                            <div class="col-md-6">
                                ${createRiskAssessmentCard(scenarioIndex, riskIndex, 'residual', 'Residual Risk (After Treatment)', 'success')}
                            </div>
                        </div>

                        <!-- Risk Treatment Plan -->
                        <div class="card border-warning">
                            <div class="card-header bg-warning text-dark">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">
                                        <i class="fas fa-tasks me-2"></i>Risk Treatment Plan
                                    </h6>
                                    <button type="button" class="btn btn-sm btn-outline-dark" 
                                            onclick="addTreatmentAction(${scenarioIndex}, ${riskIndex})">
                                        <i class="fas fa-plus me-1"></i>Add Action
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Overall Treatment Plan Description</label>
                                    <textarea name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].RiskTreatmentPlan" 
                                              class="form-control" 
                                              rows="3" 
                                              placeholder="Provide an overall description of the treatment strategy for this risk..."></textarea>
                                </div>
                                
                                <!-- Treatment Actions Container -->
                                <div id="treatment-actions-${scenarioIndex}-${riskIndex}">
                                    <!-- Treatment actions will be dynamically added here -->
                                </div>
                                
                                <!-- Treatment Plan Summary -->
                                <div class="alert alert-light border mt-3" id="treatment-summary-${scenarioIndex}-${riskIndex}">
                                    <div class="row mb-2">
                                        <div class="col-md-3">
                                            <strong>Total Actions:</strong>
                                            <span id="total-actions-${scenarioIndex}-${riskIndex}">0</span>
                                        </div>
                                        <div class="col-md-3">
                                            <strong>Completed:</strong>
                                            <span id="completed-actions-${scenarioIndex}-${riskIndex}">0</span>
                                        </div>
                                        <div class="col-md-3">
                                            <strong>In Progress:</strong>
                                            <span id="inprogress-actions-${scenarioIndex}-${riskIndex}">0</span>
                                        </div>
                                        <div class="col-md-3">
                                            <strong>Overall Status:</strong>
                                            <span class="badge bg-secondary" id="overall-treatment-status-${scenarioIndex}-${riskIndex}">Not Started</span>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <strong>SLA Compliance:</strong>
                                            <span class="badge bg-secondary" id="treatment-sla-status-${scenarioIndex}-${riskIndex}">Not Assessed</span>
                                        </div>
                                        <div class="col-md-6">
                                            <strong>SLA Deadline:</strong>
                                            <small class="text-muted" id="treatment-sla-deadline-${scenarioIndex}-${riskIndex}">Based on risk level</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Create risk assessment card
        function createRiskAssessmentCard(scenarioIndex, riskIndex, riskType, title, colorClass) {
            return `
                <div class="card border-${colorClass} mb-3">
                    <div class="card-header bg-${colorClass} text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-chart-line me-2"></i>${title}
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-4">
                                <label class="form-label fw-bold">Impact</label>
                                <select name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].${riskType === 'current' ? 'Current' : 'Residual'}Impact" 
                                        class="form-select risk-factor" 
                                        data-risk-type="${riskType}"
                                        data-scenario="${scenarioIndex}" 
                                        data-risk="${riskIndex}"
                                        onchange="calculateRisk('${scenarioIndex}', '${riskIndex}', '${riskType}')">
                                    <option value="">--</option>
                                    <option value="1">1 - Very Low</option>
                                    <option value="2">2 - Low</option>
                                    <option value="3">3 - Medium</option>
                                    <option value="4">4 - High</option>
                                    <option value="5">5 - Very High</option>
                                </select>
                            </div>
                            <div class="col-4">
                                <label class="form-label fw-bold">Likelihood</label>
                                <select name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].${riskType === 'current' ? 'Current' : 'Residual'}Likelihood" 
                                        class="form-select risk-factor" 
                                        data-risk-type="${riskType}"
                                        data-scenario="${scenarioIndex}" 
                                        data-risk="${riskIndex}"
                                        onchange="calculateRisk('${scenarioIndex}', '${riskIndex}', '${riskType}')">
                                    <option value="">--</option>
                                    <option value="1">1 - Very Low</option>
                                    <option value="2">2 - Low</option>
                                    <option value="3">3 - Medium</option>
                                    <option value="4">4 - High</option>
                                    <option value="5">5 - Very High</option>
                                </select>
                            </div>
                            <div class="col-4">
                                <label class="form-label fw-bold">Exposure</label>
                                <select name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].${riskType === 'current' ? 'Current' : 'Residual'}Exposure" 
                                        class="form-select risk-factor" 
                                        data-risk-type="${riskType}"
                                        data-scenario="${scenarioIndex}" 
                                        data-risk="${riskIndex}"
                                        onchange="calculateRisk('${scenarioIndex}', '${riskIndex}', '${riskType}')">
                                    <option value="">--</option>
                                    <option value="1">1 - Very Low</option>
                                    <option value="2">2 - Low</option>
                                    <option value="3">3 - Medium</option>
                                    <option value="4">4 - High</option>
                                    <option value="5">5 - Very High</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="alert alert-light border text-center" id="${riskType}-risk-display-${scenarioIndex}-${riskIndex}">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>Risk Score:</strong>
                                            <span class="h5 mb-0" id="${riskType}-risk-score-${scenarioIndex}-${riskIndex}">-</span>
                                        </div>
                                        <div>
                                            <span class="badge" id="${riskType}-risk-level-${scenarioIndex}-${riskIndex}">Unknown</span>
                                        </div>
                                    </div>
                                    <div class="mt-2" id="${riskType}-appetite-status-${scenarioIndex}-${riskIndex}">
                                        <span class="badge bg-success">Within Risk Appetite</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Remove scenario risk
        function removeScenarioRisk(scenarioIndex, riskIndex) {
            document.getElementById(`scenario-risk-${scenarioIndex}-${riskIndex}`).remove();
            updateRiskCount(scenarioIndex);
            updateScenarioRiskSummary(scenarioIndex);
            updateOverallSummary();
        }
        
        // Update risk count
        function updateRiskCount(scenarioIndex) {
            const count = document.querySelectorAll(`#scenario-risks-${scenarioIndex} .scenario-risk-card`).length;
            document.getElementById(`risks-count-${scenarioIndex}`).textContent = count;
        }
        
        // Calculate individual risk using risk matrix API
        async function calculateRisk(scenarioIndex, riskIndex, riskType) {
            const impact = parseFloat(document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].${riskType === 'current' ? 'Current' : 'Residual'}Impact"]`).value) || 0;
            const likelihood = parseFloat(document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].${riskType === 'current' ? 'Current' : 'Residual'}Likelihood"]`).value) || 0;
            const exposure = parseFloat(document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].${riskType === 'current' ? 'Current' : 'Residual'}Exposure"]`).value) || 0;
            
            if (impact && likelihood && exposure) {
                // If no matrix is selected, use fallback calculation
                if (!currentMatrix) {
                    console.log('No risk matrix selected, using fallback calculation');
                    calculateRiskFallback(scenarioIndex, riskIndex, riskType, impact, likelihood, exposure);
                    return;
                }
                try {
                    // Use the risk matrix API for accurate calculation
                    const response = await fetch('/api/risk-matrix/calculate-risk', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            matrixType: currentMatrix.matrixType || 'ImpactLikelihoodExposure',
                            impact: impact,
                            likelihood: likelihood,
                            exposure: exposure,
                            mediumThreshold: currentMatrix.qualitativeMediumThreshold || 4.0,
                            highThreshold: currentMatrix.qualitativeHighThreshold || 10.0,
                            criticalThreshold: currentMatrix.qualitativeCriticalThreshold || 16.0,
                            riskAppetiteThreshold: currentMatrix.riskAppetiteThreshold || 6.0
                        })
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        const riskScore = result.riskScore;
                        const riskLevel = result.riskLevel;
                        const riskLevelClass = getRiskLevelBadgeClass(riskLevel);
                        const isAboveAppetite = !result.withinRiskAppetite;
                        
                        document.getElementById(`${riskType}-risk-score-${scenarioIndex}-${riskIndex}`).textContent = riskScore.toFixed(1);
                        
                        const riskLevelElement = document.getElementById(`${riskType}-risk-level-${scenarioIndex}-${riskIndex}`);
                        riskLevelElement.textContent = riskLevel;
                        riskLevelElement.className = `badge ${riskLevelClass}`;
                        
                        const appetiteElement = document.getElementById(`${riskType}-appetite-status-${scenarioIndex}-${riskIndex}`);
                        if (isAboveAppetite) {
                            appetiteElement.innerHTML = '<span class="badge bg-warning"><i class="fas fa-exclamation-triangle me-1"></i>Above Risk Appetite</span>';
                        } else {
                            appetiteElement.innerHTML = '<span class="badge bg-success"><i class="fas fa-check-circle me-1"></i>Within Risk Appetite</span>';
                        }
                        
                        // Check SLA compliance if this is current risk calculation
                        if (riskType === 'current') {
                            checkSlaCompliance(scenarioIndex, riskIndex);
                            // Also update treatment plan SLA compliance
                            checkTreatmentPlanSlaCompliance(scenarioIndex, riskIndex);
                        }
                        
                        updateScenarioRiskSummary(scenarioIndex);
                        updateOverallSummary();
                    } else {
                        // Fallback to simple calculation if API fails
                        console.warn('Risk matrix API failed, using fallback calculation');
                        calculateRiskFallback(scenarioIndex, riskIndex, riskType, impact, likelihood, exposure);
                    }
                } catch (error) {
                    console.error('Error calculating risk:', error);
                    // Fallback to simple calculation
                    calculateRiskFallback(scenarioIndex, riskIndex, riskType, impact, likelihood, exposure);
                }
            } else {
                document.getElementById(`${riskType}-risk-score-${scenarioIndex}-${riskIndex}`).textContent = '-';
                document.getElementById(`${riskType}-risk-level-${scenarioIndex}-${riskIndex}`).textContent = 'Unknown';
                document.getElementById(`${riskType}-risk-level-${scenarioIndex}-${riskIndex}`).className = 'badge bg-secondary';
            }
        }
        
        // Fallback risk calculation method
        function calculateRiskFallback(scenarioIndex, riskIndex, riskType, impact, likelihood, exposure) {
            const riskScore = (likelihood * impact) * exposure;
            const riskLevel = getRiskLevel(riskScore);
            const riskLevelClass = getRiskLevelBadgeClass(riskLevel);
            const isAboveAppetite = checkRiskAppetite(riskScore);
            
            document.getElementById(`${riskType}-risk-score-${scenarioIndex}-${riskIndex}`).textContent = riskScore.toFixed(1);
            
            const riskLevelElement = document.getElementById(`${riskType}-risk-level-${scenarioIndex}-${riskIndex}`);
            riskLevelElement.textContent = riskLevel;
            riskLevelElement.className = `badge ${riskLevelClass}`;
            
            const appetiteElement = document.getElementById(`${riskType}-appetite-status-${scenarioIndex}-${riskIndex}`);
            if (isAboveAppetite) {
                appetiteElement.innerHTML = '<span class="badge bg-warning"><i class="fas fa-exclamation-triangle me-1"></i>Above Risk Appetite</span>';
            } else {
                appetiteElement.innerHTML = '<span class="badge bg-success"><i class="fas fa-check-circle me-1"></i>Within Risk Appetite</span>';
            }
            
            // Check SLA compliance if this is current risk calculation
            if (riskType === 'current') {
                checkTreatmentPlanSlaCompliance(scenarioIndex, riskIndex);
            }
            
            updateScenarioRiskSummary(scenarioIndex);
            updateOverallSummary();
        }
        
        // Check risk appetite
        function checkRiskAppetite(riskScore) {
            // Use the same appetite threshold as the basic assessment (can be enhanced to use actual matrix data)
            return riskScore > 6.0; // Default appetite threshold
        }
        
        // Add control to controls container
        function addControl(containerId, scenarioIndex, fieldPath) {
            const container = document.getElementById(containerId);
            const controlIndex = container.children.length;
            
            // Check if this is a "Needed" control (future/planned controls don't need implementation status)
            const isNeededControl = fieldPath.includes('Needed');
            
            // Build implementation status dropdown only for current controls
            const implementationStatusHtml = isNeededControl ? '' : `
                        <div class="col-12 mt-2">
                            <select name="ThreatScenarios[${scenarioIndex}].${fieldPath}[${controlIndex}].ImplementationStatus" 
                                    class="form-select form-select-sm implementation-status-select">
                                <option value="0">Not Implemented</option>
                                <option value="1">Partially Implemented</option>
                                <option value="2">Fully Implemented</option>
                                <option value="3">Planned</option>
                            </select>
                        </div>`;
            
            const controlHtml = `
                <div class="control-item mb-3 p-2 border rounded">
                    <div class="row">
                        <div class="col-12">
                            <div class="input-group mb-2">
                                <span class="input-group-text bg-light">
                                    <i class="fas fa-cog text-muted"></i>
                                </span>
                                <input name="ThreatScenarios[${scenarioIndex}].${fieldPath}[${controlIndex}].ControlName" 
                                       class="form-control control-name-input" 
                                       placeholder="Enter control name (e.g., Firewall, MFA, SIEM)" 
                                       required />
                                <button type="button" class="btn btn-outline-danger btn-sm" 
                                        onclick="removeControl(this)">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-12">
                            <textarea name="ThreatScenarios[${scenarioIndex}].${fieldPath}[${controlIndex}].ControlDescription" 
                                      class="form-control form-control-sm control-description-input" 
                                      rows="2"
                                      placeholder="Optional: Describe how this control works..."></textarea>
                        </div>
                        ${implementationStatusHtml}
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', controlHtml);
            
            // Focus on the new control name input
            const newInput = container.lastElementChild.querySelector('.control-name-input');
            if (newInput) {
                newInput.focus();
            }
        }
        
        // Remove control
        function removeControl(button) {
            button.closest('.control-item').remove();
        }
        
        // Check SLA compliance using risk matrix settings
        function checkSlaCompliance(scenarioIndex, riskIndex) {
            const completionDateInput = document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].ExpectedCompletionDate"]`);
            const slaStatusElement = document.getElementById(`sla-status-${scenarioIndex}-${riskIndex}`);
            const riskLevelElement = document.getElementById(`current-risk-level-${scenarioIndex}-${riskIndex}`);
            
            if (!completionDateInput.value || !riskLevelElement) {
                slaStatusElement.innerHTML = '<span class="badge bg-secondary fs-6">Not Set</span>';
                return;
            }
            
            const completionDate = new Date(completionDateInput.value);
            const now = new Date();
            const riskLevel = riskLevelElement.textContent || 'Low';
            
            // Get SLA hours from risk matrix or use defaults
            let slaHours = 168; // 7 days default
            if (currentMatrix && currentMatrix.remediationSla) {
                switch (riskLevel.toLowerCase()) {
                    case 'critical':
                        slaHours = currentMatrix.remediationSla.critical || 4;
                        break;
                    case 'high':
                        slaHours = currentMatrix.remediationSla.high || 24;
                        break;
                    case 'medium':
                        slaHours = currentMatrix.remediationSla.medium || 168;
                        break;
                    case 'low':
                        slaHours = currentMatrix.remediationSla.low || 720;
                        break;
                }
            }
            
            const slaDeadline = new Date(now.getTime() + (slaHours * 60 * 60 * 1000));
            const isOverdue = completionDate < now;
            const isPastSla = completionDate > slaDeadline;
            
            // Format SLA display
            const slaText = formatSlaHours(slaHours);
            
            if (isOverdue) {
                slaStatusElement.innerHTML = `
                    <div class="text-center">
                        <span class="badge bg-danger fs-6 mb-1">
                            <i class="fas fa-exclamation-triangle me-1"></i>Overdue
                        </span>
                        <div class="small text-muted">
                            Expected: ${completionDate.toLocaleDateString()}
                        </div>
                    </div>
                `;
            } else if (isPastSla) {
                slaStatusElement.innerHTML = `
                    <div class="text-center">
                        <span class="badge bg-warning fs-6 mb-1">
                            <i class="fas fa-clock me-1"></i>Past SLA
                        </span>
                        <div class="small text-muted">
                            SLA: ${slaText}<br>
                            Expected: ${completionDate.toLocaleDateString()}
                        </div>
                    </div>
                `;
            } else {
                slaStatusElement.innerHTML = `
                    <div class="text-center">
                        <span class="badge bg-success fs-6 mb-1">
                            <i class="fas fa-check-circle me-1"></i>On Track
                        </span>
                        <div class="small text-muted">
                            Within ${slaText} SLA<br>
                            Due: ${completionDate.toLocaleDateString()}
                        </div>
                    </div>
                `;
            }
            
            // Highlight the completion date input based on SLA status
            if (isOverdue) {
                completionDateInput.classList.add('border-danger', 'bg-danger-subtle');
                completionDateInput.classList.remove('border-warning', 'bg-warning-subtle', 'border-success', 'bg-success-subtle');
            } else if (isPastSla) {
                completionDateInput.classList.add('border-warning', 'bg-warning-subtle');
                completionDateInput.classList.remove('border-danger', 'bg-danger-subtle', 'border-success', 'bg-success-subtle');
            } else {
                completionDateInput.classList.add('border-success', 'bg-success-subtle');
                completionDateInput.classList.remove('border-danger', 'bg-danger-subtle', 'border-warning', 'bg-warning-subtle');
            }
        }
        
        // Format SLA hours for display
        function formatSlaHours(hours) {
            if (hours < 24) {
                return `${hours} hours`;
            } else if (hours < 168) {
                return `${Math.round(hours / 24)} days`;
            } else if (hours < 720) {
                return `${Math.round(hours / 168)} weeks`;
            } else {
                return `${Math.round(hours / 720 * 10) / 10} months`;
            }
        }
        
        // Update scenario risk summary
        function updateScenarioRiskSummary(scenarioIndex) {
            const risks = document.querySelectorAll(`#scenario-risks-${scenarioIndex} .scenario-risk-card`);
            let highestScore = 0;
            let highestLevel = 'Unknown';
            
            risks.forEach(risk => {
                const scoreElement = risk.querySelector(`#current-risk-score-${scenarioIndex}-${risk.dataset.riskIndex}`);
                if (scoreElement && scoreElement.textContent !== '-') {
                    const score = parseFloat(scoreElement.textContent);
                    if (score > highestScore) {
                        highestScore = score;
                        highestLevel = getRiskLevel(score);
                    }
                }
            });
            
            document.getElementById(`overall-risk-score-${scenarioIndex}`).textContent = highestScore > 0 ? highestScore.toFixed(1) : '-';
            
            const badgeElement = document.getElementById(`overall-risk-badge-${scenarioIndex}`);
            badgeElement.textContent = highestLevel;
            badgeElement.className = `badge ms-2 ${getRiskLevelBadgeClass(highestLevel)}`;
        }
        
        // Update overall assessment summary
        function updateOverallSummary() {
            const scenarios = document.querySelectorAll('.threat-scenario-card');
            const totalScenarios = scenarios.length;
            let totalRisks = 0;
            let highestLevel = 'Unknown';
            let risksAboveAppetite = 0;
            
            scenarios.forEach(scenario => {
                const scenarioRisks = scenario.querySelectorAll('.scenario-risk-card');
                totalRisks += scenarioRisks.length;
                
                scenarioRisks.forEach(risk => {
                    const appetiteElement = risk.querySelector('[id^="current-appetite-status-"]');
                    if (appetiteElement && appetiteElement.textContent.includes('Above Risk Appetite')) {
                        risksAboveAppetite++;
                    }
                });
            });
            
            document.getElementById('total-scenarios-count').textContent = totalScenarios;
            document.getElementById('total-risks-count').textContent = totalRisks;
            document.getElementById('risks-above-appetite-count').textContent = risksAboveAppetite;
            
            // Show/hide summary based on whether there are scenarios
            const summaryElement = document.getElementById('overall-assessment-summary');
            if (totalScenarios > 0) {
                summaryElement.style.display = 'block';
            } else {
                summaryElement.style.display = 'none';
            }
        }
        
        // MITRE ATT&CK Technique Autocomplete
        function initializeMitreAutocomplete(inputElement) {
            let debounceTimer;
            const suggestionsContainer = document.createElement('div');
            suggestionsContainer.className = 'mitre-suggestions position-absolute bg-white border rounded shadow-sm';
            suggestionsContainer.style.cssText = 'max-height: 200px; overflow-y: auto; z-index: 1050; width: 100%; display: none;';
            
            // Insert suggestions container after the input
            inputElement.parentNode.insertBefore(suggestionsContainer, inputElement.nextSibling);
            
            inputElement.addEventListener('input', function() {
                const query = this.value.trim();
                
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(async () => {
                    if (query.length >= 2) {
                        try {
                            const response = await fetch(`/api/mitre-attack/techniques?search=${encodeURIComponent(query)}`);
                            if (response.ok) {
                                const techniques = await response.json();
                                showMitreSuggestions(suggestionsContainer, techniques, inputElement);
                            }
                        } catch (error) {
                            console.error('Error fetching MITRE techniques:', error);
                        }
                    } else {
                        hideMitreSuggestions(suggestionsContainer);
                    }
                }, 300);
            });
            
            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!inputElement.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                    hideMitreSuggestions(suggestionsContainer);
                }
            });
        }
        
        function showMitreSuggestions(container, techniques, inputElement) {
            container.innerHTML = '';
            
            if (techniques.length === 0) {
                container.innerHTML = '<div class="p-2 text-muted">No techniques found</div>';
            } else {
                techniques.forEach(technique => {
                    const item = document.createElement('div');
                    item.className = 'p-2 cursor-pointer mitre-suggestion-item';
                    item.style.cssText = 'cursor: pointer; border-bottom: 1px solid #eee;';
                    
                    item.innerHTML = `
                        <div class="fw-bold text-primary">${technique.id}</div>
                        <div class="small">${technique.name}</div>
                        <div class="small text-muted">${technique.tactic}</div>
                    `;
                    
                    item.addEventListener('mouseenter', function() {
                        this.style.backgroundColor = '#f8f9fa';
                    });
                    
                    item.addEventListener('mouseleave', function() {
                        this.style.backgroundColor = '';
                    });
                    
                    item.addEventListener('click', function() {
                        inputElement.value = `${technique.id} - ${technique.name}`;
                        hideMitreSuggestions(container);
                        inputElement.focus();
                    });
                    
                    container.appendChild(item);
                });
            }
            
            container.style.display = 'block';
        }
        
        function hideMitreSuggestions(container) {
            container.style.display = 'none';
        }
        
        // Initialize MITRE autocomplete for existing inputs and new ones
        function initializeAllMitreInputs() {
            document.querySelectorAll('.mitre-technique-input').forEach(input => {
                if (!input.hasAttribute('data-mitre-initialized')) {
                    initializeMitreAutocomplete(input);
                    input.setAttribute('data-mitre-initialized', 'true');
                }
            });
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeAllMitreInputs();
        });

        // Treatment Action Management Functions
        function addTreatmentAction(scenarioIndex, riskIndex) {
            const actionIndex = document.querySelectorAll(`#treatment-actions-${scenarioIndex}-${riskIndex} .treatment-action-card`).length;
            const actionHtml = createTreatmentActionForm(scenarioIndex, riskIndex, actionIndex);
            document.getElementById(`treatment-actions-${scenarioIndex}-${riskIndex}`).insertAdjacentHTML('beforeend', actionHtml);
            updateTreatmentSummary(scenarioIndex, riskIndex);
        }
        
        function removeTreatmentAction(scenarioIndex, riskIndex, actionIndex) {
            const actionCard = document.getElementById(`treatment-action-${scenarioIndex}-${riskIndex}-${actionIndex}`);
            if (actionCard) {
                actionCard.remove();
                updateTreatmentSummary(scenarioIndex, riskIndex);
            }
        }
        
        function createTreatmentActionForm(scenarioIndex, riskIndex, actionIndex) {
            return `
                <div class="card mb-3 treatment-action-card border-light" id="treatment-action-${scenarioIndex}-${riskIndex}-${actionIndex}" data-action-index="${actionIndex}">
                    <div class="card-header bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-play-circle text-primary me-2"></i>
                                Action ${actionIndex + 1}
                            </h6>
                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                    onclick="removeTreatmentAction(${scenarioIndex}, ${riskIndex}, ${actionIndex})">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label class="form-label fw-bold">Action Description <span class="text-danger">*</span></label>
                                <textarea name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].ActionDescription" 
                                          class="form-control" 
                                          rows="2" 
                                          placeholder="Describe the specific action to be taken..."
                                          required></textarea>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label fw-bold">Assigned To <span class="text-danger">*</span></label>
                                <input name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].AssignedTo" 
                                       type="text" 
                                       class="form-control" 
                                       placeholder="Person responsible"
                                       required />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label fw-bold">Assigned Team</label>
                                <input name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].AssignedTeam" 
                                       type="text" 
                                       class="form-control" 
                                       placeholder="Team/Department" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label fw-bold">Expected Completion Date</label>
                                <div class="input-group">
                                    <input name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].ExpectedCompletionDate" 
                                           type="date" 
                                           class="form-control treatment-action-date"
                                           data-scenario="${scenarioIndex}" 
                                           data-risk="${riskIndex}"
                                           data-action="${actionIndex}"
                                           onchange="updateTreatmentSummary(${scenarioIndex}, ${riskIndex})" />
                                    <span class="input-group-text" id="action-sla-indicator-${scenarioIndex}-${riskIndex}-${actionIndex}">
                                        <i class="fas fa-clock text-muted"></i>
                                    </span>
                                </div>
                                <small class="text-muted" id="action-sla-text-${scenarioIndex}-${riskIndex}-${actionIndex}">SLA compliance will be checked after risk calculation</small>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-3 mb-3">
                                <label class="form-label fw-bold">Status</label>
                                <select name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].Status" 
                                        class="form-select treatment-action-status"
                                        onchange="updateTreatmentSummary(${scenarioIndex}, ${riskIndex})">
                                    <option value="0">Not Started</option>
                                    <option value="1">In Progress</option>
                                    <option value="2">On Hold</option>
                                    <option value="3">Blocked</option>
                                    <option value="4">Completed</option>
                                    <option value="5">Cancelled</option>
                                </select>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label fw-bold">Priority</label>
                                <select name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].Priority" 
                                        class="form-select">
                                    <option value="0">Low</option>
                                    <option value="1" selected>Medium</option>
                                    <option value="2">High</option>
                                    <option value="3">Critical</option>
                                </select>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label fw-bold">Estimated Effort (Hours)</label>
                                <input name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].EstimatedEffortHours" 
                                       type="number" 
                                       class="form-control" 
                                       placeholder="Hours"
                                       min="0"
                                       step="0.5" />
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label fw-bold">Actual Effort (Hours)</label>
                                <input name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].ActualEffortHours" 
                                       type="number" 
                                       class="form-control" 
                                       placeholder="Hours"
                                       min="0"
                                       step="0.5" />
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-12">
                                <label class="form-label fw-bold">Progress Notes</label>
                                <textarea name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].ProgressNotes" 
                                          class="form-control" 
                                          rows="2" 
                                          placeholder="Add notes about progress, obstacles, or updates..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        function updateTreatmentSummary(scenarioIndex, riskIndex) {
            const actions = document.querySelectorAll(`#treatment-actions-${scenarioIndex}-${riskIndex} .treatment-action-card`);
            const totalActions = actions.length;
            
            let completedCount = 0;
            let inProgressCount = 0;
            let blockedCount = 0;
            
            actions.forEach(action => {
                const statusSelect = action.querySelector('.treatment-action-status');
                if (statusSelect) {
                    const status = parseInt(statusSelect.value);
                    switch(status) {
                        case 4: // Completed
                            completedCount++;
                            break;
                        case 1: // In Progress
                            inProgressCount++;
                            break;
                        case 3: // Blocked
                            blockedCount++;
                            break;
                    }
                }
            });
            
            // Update summary counts
            document.getElementById(`total-actions-${scenarioIndex}-${riskIndex}`).textContent = totalActions;
            document.getElementById(`completed-actions-${scenarioIndex}-${riskIndex}`).textContent = completedCount;
            document.getElementById(`inprogress-actions-${scenarioIndex}-${riskIndex}`).textContent = inProgressCount;
            
            // Update overall status
            const statusElement = document.getElementById(`overall-treatment-status-${scenarioIndex}-${riskIndex}`);
            let overallStatus = 'Not Started';
            let statusClass = 'bg-secondary';
            
            if (totalActions === 0) {
                overallStatus = 'Not Started';
                statusClass = 'bg-secondary';
            } else if (completedCount === totalActions) {
                overallStatus = 'Completed';
                statusClass = 'bg-success';
            } else if (blockedCount > 0) {
                overallStatus = 'Blocked';
                statusClass = 'bg-danger';
            } else if (inProgressCount > 0) {
                overallStatus = 'In Progress';
                statusClass = 'bg-primary';
            } else {
                overallStatus = 'Planned';
                statusClass = 'bg-info';
            }
            
            statusElement.textContent = overallStatus;
            statusElement.className = `badge ${statusClass}`;
            
            // Check SLA compliance for treatment plan
            checkTreatmentPlanSlaCompliance(scenarioIndex, riskIndex);
        }
        
        // Check SLA compliance for all treatment actions
        function checkTreatmentPlanSlaCompliance(scenarioIndex, riskIndex) {
            const riskLevelElement = document.getElementById(`current-risk-level-${scenarioIndex}-${riskIndex}`);
            const slaStatusElement = document.getElementById(`treatment-sla-status-${scenarioIndex}-${riskIndex}`);
            const slaDeadlineElement = document.getElementById(`treatment-sla-deadline-${scenarioIndex}-${riskIndex}`);
            
            if (!riskLevelElement) {
                slaStatusElement.textContent = 'Not Assessed';
                slaStatusElement.className = 'badge bg-secondary';
                slaDeadlineElement.textContent = 'Risk level not calculated';
                return;
            }
            
            const riskLevel = riskLevelElement.textContent || 'Low';
            const now = new Date();
            
            // Get SLA hours from risk matrix or use defaults
            let slaHours = 168; // 7 days default
            if (currentMatrix && currentMatrix.remediationSla) {
                switch (riskLevel.toLowerCase()) {
                    case 'critical':
                        slaHours = currentMatrix.remediationSla.critical || 4;
                        break;
                    case 'high':
                        slaHours = currentMatrix.remediationSla.high || 24;
                        break;
                    case 'medium':
                        slaHours = currentMatrix.remediationSla.medium || 168;
                        break;
                    case 'low':
                        slaHours = currentMatrix.remediationSla.low || 720;
                        break;
                }
            }
            
            const slaDeadline = new Date(now.getTime() + (slaHours * 60 * 60 * 1000));
            
            // Check all treatment action dates
            const actions = document.querySelectorAll(`#treatment-actions-${scenarioIndex}-${riskIndex} .treatment-action-card`);
            let hasOverdueActions = false;
            let hasPastSlaActions = false;
            let latestCompletionDate = null;
            let hasIncompleteActions = false;
            
            actions.forEach((action, actionIndex) => {
                const statusSelect = action.querySelector('.treatment-action-status');
                const dateInput = action.querySelector('.treatment-action-date');
                const slaIndicator = document.getElementById(`action-sla-indicator-${scenarioIndex}-${riskIndex}-${actionIndex}`);
                const slaText = document.getElementById(`action-sla-text-${scenarioIndex}-${riskIndex}-${actionIndex}`);
                
                if (statusSelect && dateInput) {
                    const status = parseInt(statusSelect.value);
                    
                    if (dateInput.value) {
                        const completionDate = new Date(dateInput.value);
                        
                        // Update individual action SLA indicator
                        if (status === 4 || status === 5) { // Completed or cancelled
                            if (slaIndicator) {
                                slaIndicator.innerHTML = '<i class="fas fa-check text-success"></i>';
                                slaIndicator.className = 'input-group-text bg-success text-white';
                            }
                            if (slaText) {
                                slaText.textContent = status === 4 ? 'Completed' : 'Cancelled';
                                slaText.className = 'text-success';
                            }
                        } else {
                            hasIncompleteActions = true;
                            
                            if (completionDate < now) {
                                hasOverdueActions = true;
                                if (slaIndicator) {
                                    slaIndicator.innerHTML = '<i class="fas fa-exclamation-triangle text-white"></i>';
                                    slaIndicator.className = 'input-group-text bg-danger';
                                }
                                if (slaText) {
                                    slaText.textContent = 'Overdue!';
                                    slaText.className = 'text-danger fw-bold';
                                }
                            } else if (completionDate > slaDeadline) {
                                hasPastSlaActions = true;
                                if (slaIndicator) {
                                    slaIndicator.innerHTML = '<i class="fas fa-clock text-white"></i>';
                                    slaIndicator.className = 'input-group-text bg-warning';
                                }
                                if (slaText) {
                                    slaText.textContent = 'Past SLA deadline';
                                    slaText.className = 'text-warning fw-bold';
                                }
                            } else {
                                if (slaIndicator) {
                                    slaIndicator.innerHTML = '<i class="fas fa-check-circle text-white"></i>';
                                    slaIndicator.className = 'input-group-text bg-success';
                                }
                                if (slaText) {
                                    const daysUntilSla = Math.ceil((slaDeadline - completionDate) / (1000 * 60 * 60 * 24));
                                    slaText.textContent = `On track (${daysUntilSla} days before SLA)`;
                                    slaText.className = 'text-success';
                                }
                            }
                            
                            if (!latestCompletionDate || completionDate > latestCompletionDate) {
                                latestCompletionDate = completionDate;
                            }
                        }
                    } else {
                        // No date set
                        if (slaIndicator) {
                            slaIndicator.innerHTML = '<i class="fas fa-clock text-muted"></i>';
                            slaIndicator.className = 'input-group-text';
                        }
                        if (slaText) {
                            slaText.textContent = 'Set completion date to check SLA';
                            slaText.className = 'text-muted';
                        }
                    }
                }
            });
            
            // Update SLA deadline display
            const slaText = formatSlaHours(slaHours);
            slaDeadlineElement.innerHTML = `${slaText} (${slaDeadline.toLocaleDateString()})`;
            
            // Update SLA status based on analysis
            if (actions.length === 0) {
                slaStatusElement.textContent = 'No Actions';
                slaStatusElement.className = 'badge bg-secondary';
            } else if (!hasIncompleteActions) {
                slaStatusElement.textContent = 'All Complete';
                slaStatusElement.className = 'badge bg-success';
            } else if (hasOverdueActions) {
                slaStatusElement.innerHTML = '<i class="fas fa-exclamation-triangle me-1"></i>Overdue';
                slaStatusElement.className = 'badge bg-danger';
            } else if (hasPastSlaActions) {
                slaStatusElement.innerHTML = '<i class="fas fa-clock me-1"></i>Past SLA';
                slaStatusElement.className = 'badge bg-warning';
            } else {
                slaStatusElement.innerHTML = '<i class="fas fa-check-circle me-1"></i>On Track';
                slaStatusElement.className = 'badge bg-success';
            }
        }

        // FILL TEST DATA FUNCTION
        function fillTestData() {
            console.log('Filling form with test data...');
            
            // Fill basic assessment fields
            document.querySelector('input[name="Assessment.Title"]').value = 'TEST: Web Application Security Assessment';
            document.querySelector('input[name="Assessment.Asset"]').value = 'Customer Portal Web Application';
            document.querySelector('input[name="Assessment.BusinessUnit"]').value = 'Information Technology';
            document.querySelector('input[name="Assessment.BusinessOwner"]').value = 'John Smith';
            document.querySelector('textarea[name="Assessment.Description"]').value = 'Comprehensive security assessment of the customer-facing web portal including authentication, data handling, and transaction processing components. This assessment focuses on identifying potential security vulnerabilities and assessing the current risk posture.';
            
            // Set status to InProgress
            const statusSelect = document.querySelector('select[name="Assessment.Status"]');
            if (statusSelect) {
                statusSelect.value = 'InProgress';
            }
            
            // Select first available risk matrix
            const matrixSelect = document.querySelector('select[name="Assessment.RiskMatrixId"]');
            if (matrixSelect && matrixSelect.options.length > 1) {
                matrixSelect.selectedIndex = 1; // Select first non-empty option
                // Trigger change event to load matrix data
                if (window.loadMatrixData) {
                    window.loadMatrixData(matrixSelect.value);
                }
            }
            
            // Create test threat scenarios
            setTimeout(function() {
                createTestThreatScenarios();
            }, 1000); // Wait for matrix to load
        }
        
        function createTestThreatScenarios() {
            console.log('Creating test threat scenarios...');
            
            // Clear any existing scenarios first
            document.getElementById('threat-scenarios-container').innerHTML = '';
            threatScenarioCounter = 0;
            
            // Scenario 1: SQL Injection Attack (High Risk)
            addThreatScenario();
            fillScenario1TestData();
            
            // Scenario 2: Phishing Attack (Medium Risk)
            setTimeout(function() {
                addThreatScenario();
                fillScenario2TestData();
            }, 500);
            
            setTimeout(function() {
                updateOverallSummary();
                console.log('Test data filling completed!');
            }, 1500);
        }
        
        function fillScenario1TestData() {
            const scenarioIndex = 0;
            
            // Fill scenario header
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioId"]`).value = 'TS-001';
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioName"]`).value = 'SQL Injection Attack';
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].Description"]`).value = 'Attacker exploits insufficient input validation in web application forms to inject malicious SQL commands, potentially gaining unauthorized access to the database and sensitive customer information.';
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].CIAImpactType"]`).value = '7'; // All three
            
            // Fill threat vector
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatVector.Name"]`).value = 'Web Form Input Fields';
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatVector.MitreTechnique"]`).value = 'T1190 - Exploit Public-Facing Application';
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].ThreatVector.Description"]`).value = 'Malicious SQL code injected through user input fields (login forms, search boxes, contact forms) that are not properly sanitized or parameterized.';
            
            // Fill threat actor objective
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatActorObjective.Name"]`).value = 'Database Access & Data Exfiltration';
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatActorObjective.MitreTechnique"]`).value = 'T1041 - Exfiltration Over C2 Channel';
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].ThreatActorObjective.Description"]`).value = 'Gain unauthorized access to backend database, extract customer personal information, payment details, and potentially install backdoors for persistent access.';
            
            // Add and fill threat actor steps
            setTimeout(function() {
                addThreatActorStep(scenarioIndex);
                fillThreatStep(scenarioIndex, 0, 'Initial Reconnaissance', 'T1595 - Active Scanning', 'Attacker scans the web application to identify input fields and potential injection points using automated tools.');
                
                setTimeout(function() {
                    addThreatActorStep(scenarioIndex);
                    fillThreatStep(scenarioIndex, 1, 'SQL Injection Execution', 'T1059.004 - Unix Shell', 'Crafts and executes malicious SQL payloads through identified injection points to test database access.');
                }, 200);
            }, 300);
            
            // Add scenario risks
            setTimeout(function() {
                addScenarioRisk(scenarioIndex);
                fillScenarioRisk(scenarioIndex, 0, {
                    name: 'Customer Data Breach',
                    description: 'Unauthorized access to customer personal information, account details, and transaction history stored in the database.',
                    currentImpact: '4', // High
                    currentLikelihood: '3', // Medium  
                    currentExposure: '4', // High
                    residualImpact: '2', // Low
                    residualLikelihood: '2', // Low
                    residualExposure: '2', // Low
                    treatmentPlan: 'Implement parameterized queries, input validation, and database access controls. Deploy web application firewall.'
                });
                
                setTimeout(function() {
                    addScenarioRisk(scenarioIndex);
                    fillScenarioRisk(scenarioIndex, 1, {
                        name: 'Database Server Compromise',
                        description: 'Complete compromise of database server allowing administrative access and potential lateral movement to other systems.',
                        currentImpact: '5', // Very High
                        currentLikelihood: '2', // Low
                        currentExposure: '3', // Medium
                        residualImpact: '3', // Medium
                        residualLikelihood: '1', // Very Low
                        residualExposure: '2', // Low
                        treatmentPlan: 'Implement least privilege database access, network segmentation, and comprehensive database monitoring.'
                    });
                }, 300);
            }, 800);
        }
        
        function fillScenario2TestData() {
            const scenarioIndex = 1;
            
            // Fill scenario header
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioId"]`).value = 'TS-002';
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioName"]`).value = 'Targeted Phishing Attack';
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].Description"]`).value = 'Sophisticated phishing campaign targeting employees with access to the customer portal, using social engineering to steal credentials and gain unauthorized system access.';
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].CIAImpactType"]`).value = '4'; // Confidentiality & Integrity
            
            // Fill threat vector
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatVector.Name"]`).value = 'Spear Phishing Email';
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatVector.MitreTechnique"]`).value = 'T1566.001 - Spearphishing Attachment';
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].ThreatVector.Description"]`).value = 'Targeted emails containing malicious attachments or links designed to harvest credentials or install malware on employee workstations.';
            
            // Fill threat actor objective
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatActorObjective.Name"]`).value = 'Credential Harvesting & System Access';
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatActorObjective.MitreTechnique"]`).value = 'T1078 - Valid Accounts';
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].ThreatActorObjective.Description"]`).value = 'Obtain legitimate user credentials to access the customer portal and internal systems, maintaining persistence while avoiding detection.';
            
            // Add and fill threat actor steps
            setTimeout(function() {
                addThreatActorStep(scenarioIndex);
                fillThreatStep(scenarioIndex, 0, 'Social Engineering Research', 'T1589 - Gather Victim Identity Information', 'Research target employees through social media and company websites to craft convincing phishing messages.');
                
                setTimeout(function() {
                    addThreatActorStep(scenarioIndex);
                    fillThreatStep(scenarioIndex, 1, 'Credential Harvesting', 'T1056 - Input Capture', 'Deploy fake login pages or keyloggers to capture user credentials when victims interact with phishing content.');
                }, 200);
            }, 300);
            
            // Add scenario risks
            setTimeout(function() {
                addScenarioRisk(scenarioIndex);
                fillScenarioRisk(scenarioIndex, 0, {
                    name: 'Unauthorized Portal Access',
                    description: 'Compromised employee credentials used to access customer portal and sensitive business information.',
                    currentImpact: '3', // Medium
                    currentLikelihood: '3', // Medium
                    currentExposure: '3', // Medium
                    residualImpact: '2', // Low
                    residualLikelihood: '2', // Low
                    residualExposure: '2', // Low
                    treatmentPlan: 'Deploy multi-factor authentication, implement security awareness training, and enhance email security filtering.'
                });
            }, 800);
        }
        
        function fillThreatStep(scenarioIndex, stepIndex, name, mitreTechnique, description) {
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatActorSteps[${stepIndex}].Name"]`).value = name;
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ThreatActorSteps[${stepIndex}].MitreTechnique"]`).value = mitreTechnique;
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].ThreatActorSteps[${stepIndex}].Description"]`).value = description;
        }
        
        function fillScenarioRisk(scenarioIndex, riskIndex, riskData) {
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].RiskName"]`).value = riskData.name;
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].RiskDescription"]`).value = riskData.description;
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].RiskTreatmentPlan"]`).value = riskData.treatmentPlan;
            
            // Set treatment status
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentPlanStatus"]`).value = '1'; // In Progress
            
            // Fill current risk ratings (dropdowns)
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].CurrentImpact"]`).value = riskData.currentImpact;
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].CurrentLikelihood"]`).value = riskData.currentLikelihood;
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].CurrentExposure"]`).value = riskData.currentExposure;
            
            // Fill residual risk ratings (dropdowns)
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].ResidualImpact"]`).value = riskData.residualImpact;
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].ResidualLikelihood"]`).value = riskData.residualLikelihood;
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].ResidualExposure"]`).value = riskData.residualExposure;
            
            // Trigger risk calculations
            setTimeout(function() {
                calculateRisk(scenarioIndex, riskIndex, 'current');
                calculateRisk(scenarioIndex, riskIndex, 'residual');
            }, 100);
            
            // Add treatment actions
            setTimeout(function() {
                addTreatmentAction(scenarioIndex, riskIndex);
                fillTreatmentAction(scenarioIndex, riskIndex, 0);
                
                setTimeout(function() {
                    addTreatmentAction(scenarioIndex, riskIndex);
                    fillTreatmentAction(scenarioIndex, riskIndex, 1);
                }, 200);
            }, 300);
        }
        
        function fillTreatmentAction(scenarioIndex, riskIndex, actionIndex) {
            const actions = [
                {
                    description: 'Implement parameterized SQL queries and stored procedures',
                    assignedTo: 'Sarah Johnson',
                    team: 'Development Team',
                    status: '1', // In Progress
                    priority: '2', // High
                    effort: '40'
                },
                {
                    description: 'Deploy Web Application Firewall (WAF) with SQL injection detection',
                    assignedTo: 'Mike Chen',
                    team: 'Infrastructure Team', 
                    status: '0', // Not Started
                    priority: '2', // High
                    effort: '16'
                }
            ];
            
            const phishingActions = [
                {
                    description: 'Implement multi-factor authentication for all portal access',
                    assignedTo: 'Alex Rodriguez',
                    team: 'Security Team',
                    status: '1', // In Progress  
                    priority: '3', // Critical
                    effort: '24'
                },
                {
                    description: 'Deploy advanced email security solution with anti-phishing protection',
                    assignedTo: 'Lisa Wang',
                    team: 'IT Operations',
                    status: '0', // Not Started
                    priority: '2', // High
                    effort: '32'
                }
            ];
            
            const actionData = scenarioIndex === 0 ? actions[actionIndex] : phishingActions[actionIndex];
            if (!actionData) return;
            
            // Set completion date (30-60 days from now)
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + (actionIndex === 0 ? 30 : 45));
            const dateString = futureDate.toISOString().split('T')[0];
            
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].ActionDescription"]`).value = actionData.description;
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].AssignedTo"]`).value = actionData.assignedTo;
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].AssignedTeam"]`).value = actionData.team;
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].ExpectedCompletionDate"]`).value = dateString;
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].Status"]`).value = actionData.status;
            document.querySelector(`select[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].Priority"]`).value = actionData.priority;
            document.querySelector(`input[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].EstimatedEffortHours"]`).value = actionData.effort;
            
            const progressNotes = actionIndex === 0 ? 
                'Code review in progress. Initial parameterized query implementation completed for user authentication module.' :
                'Procurement process initiated. Evaluating vendor solutions and preparing technical requirements.';
                
            document.querySelector(`textarea[name="ThreatScenarios[${scenarioIndex}].ScenarioRisks[${riskIndex}].TreatmentActions[${actionIndex}].ProgressNotes"]`).value = progressNotes;
            
            // Update treatment summary after a delay
            setTimeout(function() {
                updateTreatmentSummary(scenarioIndex, riskIndex);
            }, 200);
        }

        // Make functions globally available
        window.addThreatScenario = addThreatScenario;
        window.removeThreatScenario = removeThreatScenario;
        window.addThreatActorStep = addThreatActorStep;
        window.removeThreatActorStep = removeThreatActorStep;
        window.addScenarioRisk = addScenarioRisk;
        window.removeScenarioRisk = removeScenarioRisk;
        window.addControl = addControl;
        window.removeControl = removeControl;
        window.calculateRisk = calculateRisk;
        window.checkSlaCompliance = checkSlaCompliance;
        window.initializeMitreAutocomplete = initializeMitreAutocomplete;
        window.initializeAllMitreInputs = initializeAllMitreInputs;
        window.addTreatmentAction = addTreatmentAction;
        window.removeTreatmentAction = removeTreatmentAction;
        window.updateTreatmentSummary = updateTreatmentSummary;
        window.checkTreatmentPlanSlaCompliance = checkTreatmentPlanSlaCompliance;
        window.fillTestData = fillTestData; // Make test data function available globally
        
        // Simple form action debugging
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form.needs-validation');
            if (form) {
                console.log('✅ Form action URL:', form.action);
            }
        });
    </script>
}