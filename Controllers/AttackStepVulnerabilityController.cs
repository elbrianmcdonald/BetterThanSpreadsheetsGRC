using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using CyberRiskApp.Data;
using CyberRiskApp.Models;
using CyberRiskApp.Services;
using CyberRiskApp.Authorization;

namespace CyberRiskApp.Controllers
{
    [Authorize(Policy = PolicyConstants.RequireGRCAnalystOrAbove)]
    public class AttackStepVulnerabilityController : Controller
    {
        private readonly CyberRiskContext _context;
        private readonly IMitreAttackService _mitreService;
        private readonly ILogger<AttackStepVulnerabilityController> _logger;

        public AttackStepVulnerabilityController(
            CyberRiskContext context,
            IMitreAttackService mitreService,
            ILogger<AttackStepVulnerabilityController> logger)
        {
            _context = context;
            _mitreService = mitreService;
            _logger = logger;
        }

        // GET: AttackStepVulnerability
        public async Task<IActionResult> Index()
        {
            var vulnerabilities = await _context.AttackStepVulnerabilities
                .Include(v => v.MitreTechnique)
                .Include(v => v.NextVulnerability)
                .Include(v => v.LossEvent)
                .OrderBy(v => v.StepOrder)
                .ThenByDescending(v => v.CreatedAt)
                .ToListAsync();

            return View(vulnerabilities);
        }

        // GET: AttackStepVulnerability/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null) return NotFound();

            var vulnerability = await _context.AttackStepVulnerabilities
                .Include(v => v.MitreTechnique)
                .Include(v => v.NextVulnerability)
                .Include(v => v.LossEvent)
                .Include(v => v.PreviousVulnerabilities)
                .Include(v => v.ThreatEvents)
                .FirstOrDefaultAsync(v => v.Id == id);

            if (vulnerability == null) return NotFound();

            return View(vulnerability);
        }

        // GET: AttackStepVulnerability/Create
        public async Task<IActionResult> Create()
        {
            await PrepareViewData();
            return View();
        }

        // POST: AttackStepVulnerability/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(AttackStepVulnerability vulnerability)
        {
            if (ModelState.IsValid)
            {
                // Auto-calculate Vulnerability Most Likely using triangular distribution
                vulnerability.VulnMostLikely = CalculateTriangularMostLikely(
                    vulnerability.VulnMinimum, 
                    vulnerability.VulnMaximum);

                vulnerability.CreatedBy = User.Identity?.Name ?? "Unknown";
                vulnerability.UpdatedBy = User.Identity?.Name ?? "Unknown";
                vulnerability.CreatedAt = DateTime.UtcNow;
                vulnerability.UpdatedAt = DateTime.UtcNow;

                _context.AttackStepVulnerabilities.Add(vulnerability);
                await _context.SaveChangesAsync();

                TempData["Success"] = "Attack step vulnerability created successfully.";
                return RedirectToAction(nameof(Details), new { id = vulnerability.Id });
            }

            await PrepareViewData();
            return View(vulnerability);
        }

        // GET: AttackStepVulnerability/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();

            var vulnerability = await _context.AttackStepVulnerabilities.FindAsync(id);
            if (vulnerability == null) return NotFound();

            await PrepareViewData();
            return View(vulnerability);
        }

        // POST: AttackStepVulnerability/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, AttackStepVulnerability vulnerability)
        {
            if (id != vulnerability.Id) return NotFound();

            if (ModelState.IsValid)
            {
                try
                {
                    // Recalculate Vulnerability Most Likely
                    vulnerability.VulnMostLikely = CalculateTriangularMostLikely(
                        vulnerability.VulnMinimum, 
                        vulnerability.VulnMaximum);

                    vulnerability.UpdatedBy = User.Identity?.Name ?? "Unknown";
                    vulnerability.UpdatedAt = DateTime.UtcNow;

                    _context.Update(vulnerability);
                    await _context.SaveChangesAsync();

                    TempData["Success"] = "Attack step vulnerability updated successfully.";
                    return RedirectToAction(nameof(Details), new { id = vulnerability.Id });
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!VulnerabilityExists(vulnerability.Id))
                        return NotFound();
                    throw;
                }
            }

            await PrepareViewData();
            return View(vulnerability);
        }

        // GET: AttackStepVulnerability/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();

            var vulnerability = await _context.AttackStepVulnerabilities
                .Include(v => v.MitreTechnique)
                .Include(v => v.NextVulnerability)
                .Include(v => v.LossEvent)
                .FirstOrDefaultAsync(v => v.Id == id);

            if (vulnerability == null) return NotFound();

            return View(vulnerability);
        }

        // POST: AttackStepVulnerability/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var vulnerability = await _context.AttackStepVulnerabilities.FindAsync(id);
            if (vulnerability != null)
            {
                _context.AttackStepVulnerabilities.Remove(vulnerability);
                await _context.SaveChangesAsync();
                TempData["Success"] = "Attack step vulnerability deleted successfully.";
            }

            return RedirectToAction(nameof(Index));
        }

        // Helper methods
        private async Task PrepareViewData()
        {
            var mitreTechniques = await _mitreService.GetTechniquesAsync();
            ViewData["MitreTechniques"] = mitreTechniques
                .Select(mt => new { mt.Id, Text = $"{mt.TechniqueId} - {mt.Name}" })
                .ToList();

            ViewData["NextVulnerabilities"] = await _context.AttackStepVulnerabilities
                .Select(v => new { v.Id, v.Title })
                .ToListAsync();

            ViewData["LossEvents"] = await _context.LossEvents
                .Select(le => new { le.Id, le.Title })
                .ToListAsync();
        }

        private bool VulnerabilityExists(int id)
        {
            return _context.AttackStepVulnerabilities.Any(v => v.Id == id);
        }

        private double CalculateTriangularMostLikely(double min, double max)
        {
            // For a triangular distribution, most likely is typically the midpoint
            // unless other information suggests otherwise
            return (min + max) / 2.0;
        }
    }
}