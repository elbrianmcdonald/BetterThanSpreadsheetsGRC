// <auto-generated />
using System;
using CyberRiskApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CyberRiskApp.Migrations
{
    [DbContext(typeof(CyberRiskContext))]
    [Migration("20250818012159_FixRowVersionNullable")]
    partial class FixRowVersionNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AttackScenarioMitreTechnique", b =>
                {
                    b.Property<int>("AttackScenariosId")
                        .HasColumnType("integer");

                    b.Property<int>("MitreTechniquesId")
                        .HasColumnType("integer");

                    b.HasKey("AttackScenariosId", "MitreTechniquesId");

                    b.HasIndex("MitreTechniquesId");

                    b.ToTable("AttackScenarioMitreTechniques", (string)null);
                });

            modelBuilder.Entity("CyberRiskApp.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ApplicationDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomHeaders")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EnableHSTS")
                        .HasColumnType("boolean");

                    b.Property<bool>("ForceHttps")
                        .HasColumnType("boolean");

                    b.Property<int>("HSTSMaxAge")
                        .HasColumnType("integer");

                    b.Property<int>("HttpPort")
                        .HasColumnType("integer");

                    b.Property<int>("HttpsPort")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DomainName")
                        .IsUnique();

                    b.HasIndex("IsPrimary")
                        .HasFilter("\"IsPrimary\" = true");

                    b.ToTable("ApplicationDomains");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AssessmentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualHours")
                        .HasColumnType("numeric");

                    b.Property<string>("AssignedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignmentNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("EstimatedHours")
                        .HasColumnType("numeric");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RequestedTimeline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequesterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssignedToUserId");

                    b.ToTable("AssessmentRequests");
                });

            modelBuilder.Entity("CyberRiskApp.Models.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionsOnObjectivesSteps")
                        .HasColumnType("text");

                    b.Property<int>("AttackComplexity")
                        .HasColumnType("integer");

                    b.Property<string>("AttackSteps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AttackVector")
                        .HasColumnType("integer");

                    b.Property<string>("CommandAndControlSteps")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeliverySteps")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DetectionDifficulty")
                        .HasColumnType("integer");

                    b.Property<string>("ExistingControls")
                        .HasColumnType("text");

                    b.Property<string>("ExploitationSteps")
                        .HasColumnType("text");

                    b.Property<int?>("FindingId")
                        .HasColumnType("integer")
                        .HasColumnName("FindingId");

                    b.Property<int>("Impact")
                        .HasColumnType("integer");

                    b.Property<string>("IndicatorsOfCompromise")
                        .HasColumnType("text");

                    b.Property<string>("InstallationSteps")
                        .HasColumnType("text");

                    b.Property<int>("KillChainPhase")
                        .HasColumnType("integer");

                    b.Property<int>("Likelihood")
                        .HasColumnType("integer");

                    b.Property<string>("MitreAttackTactic")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MitreAttackTechnique")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Prerequisites")
                        .HasColumnType("text");

                    b.Property<string>("RecommendedMitigations")
                        .HasColumnType("text");

                    b.Property<string>("ReconnaissanceSteps")
                        .HasColumnType("text");

                    b.Property<int>("ResidualRisk")
                        .HasColumnType("integer");

                    b.Property<int?>("RiskId")
                        .HasColumnType("integer")
                        .HasColumnName("RiskId");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ThreatActorType")
                        .HasColumnType("integer");

                    b.Property<int>("ThreatModelId")
                        .HasColumnType("integer")
                        .HasColumnName("ThreatModelId");

                    b.Property<string>("ToolsAndTechniques")
                        .HasColumnType("text");

                    b.Property<int>("TreatmentStrategy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("WeaponizationSteps")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FindingId");

                    b.HasIndex("RiskId");

                    b.HasIndex("ThreatModelId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackChain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AssetCategory")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AttackVector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("ChainAleMaximum")
                        .HasColumnType("double precision");

                    b.Property<double>("ChainAleMinimum")
                        .HasColumnType("double precision");

                    b.Property<double>("ChainAleMostLikely")
                        .HasColumnType("double precision");

                    b.Property<double>("ChainProbability")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("integer");

                    b.Property<int>("LossEventId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("RiskAssessmentId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("ThreatEventId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("LossEventId");

                    b.HasIndex("RiskAssessmentId");

                    b.HasIndex("ThreatEventId");

                    b.ToTable("AttackChains");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackChainStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackChainId")
                        .HasColumnType("integer");

                    b.Property<double>("CumulativeProbability")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsFinalStep")
                        .HasColumnType("boolean");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<double>("StepProbability")
                        .HasColumnType("double precision");

                    b.Property<int>("StepType")
                        .HasColumnType("integer");

                    b.Property<int?>("VulnerabilityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttackChainId");

                    b.HasIndex("VulnerabilityId");

                    b.ToTable("AttackChainSteps");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackScenarioId")
                        .HasColumnType("integer");

                    b.Property<string>("AttackVector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Complexity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("ExploitedVulnerabilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PathName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Prerequisites")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequiredTools")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequiresInsiderAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresPhysicalAccess")
                        .HasColumnType("boolean");

                    b.Property<int>("SourceEnvironmentId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetEnvironmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttackScenarioId");

                    b.HasIndex("SourceEnvironmentId");

                    b.HasIndex("TargetEnvironmentId");

                    b.ToTable("AttackPaths");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Complexity")
                        .HasColumnType("integer");

                    b.Property<string>("ControlGaps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedDurationHours")
                        .HasColumnType("integer");

                    b.Property<string>("ExistingControls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InitialAccess")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecommendedMitigations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("ThreatModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ThreatModelId");

                    b.ToTable("AttackScenarios");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackScenarioStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackScenarioId")
                        .HasColumnType("integer");

                    b.Property<string>("Commands")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Complexity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomTechnique")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DetectionMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("ExpectedOutcome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("KillChainActivityId")
                        .HasColumnType("integer");

                    b.Property<int>("KillChainPhase")
                        .HasColumnType("integer");

                    b.Property<bool>("LeavesForensicEvidence")
                        .HasColumnType("boolean");

                    b.Property<int?>("MitreTechniqueId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PreventionMeasures")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequiresPrivilegeEscalation")
                        .HasColumnType("boolean");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Tools")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttackScenarioId");

                    b.HasIndex("KillChainActivityId");

                    b.HasIndex("MitreTechniqueId");

                    b.ToTable("AttackScenarioSteps");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackStepVulnerability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomTechnique")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DataSources")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DetectiveControls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LossEventId")
                        .HasColumnType("integer");

                    b.Property<int?>("MitreTechniqueId")
                        .HasColumnType("integer");

                    b.Property<int?>("NextVulnerabilityId")
                        .HasColumnType("integer");

                    b.Property<string>("PreventativeControls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("VulnMaximum")
                        .HasColumnType("double precision");

                    b.Property<double>("VulnMinimum")
                        .HasColumnType("double precision");

                    b.Property<double>("VulnMostLikely")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("LossEventId");

                    b.HasIndex("MitreTechniqueId");

                    b.HasIndex("NextVulnerabilityId");

                    b.ToTable("AttackStepVulnerabilities");
                });

            modelBuilder.Entity("CyberRiskApp.Models.BusinessOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ComplianceOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stakeholders")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BusinessOrganizations");
                });

            modelBuilder.Entity("CyberRiskApp.Models.CapabilityControlMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualHours")
                        .HasColumnType("numeric");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CapabilityRequirementId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ComplianceControlId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("EstimatedHours")
                        .HasColumnType("numeric");

                    b.Property<string>("ImplementationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ComplianceControlId");

                    b.HasIndex("CapabilityRequirementId", "ComplianceControlId")
                        .IsUnique();

                    b.ToTable("CapabilityControlMappings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.CapabilityRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CapabilityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CapabilityType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Dependencies")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EstimatedEffortMonths")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StrategyGoalId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("StrategyGoalId");

                    b.ToTable("CapabilityRequirements");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ComplianceAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Assessor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BusinessOrganizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ComplianceFrameworkId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CompliancePercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessOrganizationId");

                    b.HasIndex("ComplianceFrameworkId");

                    b.ToTable("ComplianceAssessments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ComplianceControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ComplianceFrameworkId")
                        .HasColumnType("integer");

                    b.Property<string>("ControlEnhancements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ControlId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ControlText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedControls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupplementalGuidance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComplianceFrameworkId");

                    b.ToTable("ComplianceControls");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ComplianceFramework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ComplianceFrameworks");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ControlAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("AssessmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignmentParameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ComplianceAssessmentId")
                        .HasColumnType("integer");

                    b.Property<int>("ComplianceControlId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Evidence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EvidenceOfCompliance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GapNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImplementationNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastTestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextTestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ProjectNeeded")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProjectedComplianceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SelectionParameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TShirtSize")
                        .HasColumnType("integer");

                    b.Property<string>("TestingProcedures")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ComplianceAssessmentId");

                    b.HasIndex("ComplianceControlId");

                    b.ToTable("ControlAssessments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.DomainAccessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccessTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ClientIP")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("MatchedDomainName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RedirectedTo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RequestMethod")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("RequestPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RequestedDomain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("WasRedirected")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccessTime");

                    b.HasIndex("RequestedDomain");

                    b.HasIndex("ResponseCode");

                    b.ToTable("DomainAccessLogs");
                });

            modelBuilder.Entity("CyberRiskApp.Models.DomainAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ApplicationDomainId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RedirectType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AliasName")
                        .IsUnique();

                    b.HasIndex("ApplicationDomainId");

                    b.ToTable("DomainAliases");
                });

            modelBuilder.Entity("CyberRiskApp.Models.Finding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BusinessOwner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Exposure")
                        .HasColumnType("integer");

                    b.Property<string>("FindingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Impact")
                        .HasColumnType("integer");

                    b.Property<int>("Likelihood")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RiskRating")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("SlaDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TechnicalControl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Findings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.FindingClosureRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AssignedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignmentNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClosureJustification")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EvidenceLinks")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("FindingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RequestedClosureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Requester")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ReviewComments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("FindingId");

                    b.ToTable("FindingClosureRequests");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ImplementationMilestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MilestoneName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("RelatedCapabilityIds")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StrategyPlanId")
                        .HasColumnType("integer");

                    b.Property<string>("SuccessCriteria")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("StrategyPlanId");

                    b.ToTable("ImplementationMilestones");
                });

            modelBuilder.Entity("CyberRiskApp.Models.KillChainActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Complexity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnvironmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("ExpectedOutcome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Indicators")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Phase")
                        .HasColumnType("integer");

                    b.Property<string>("Prerequisites")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequiresUserInteraction")
                        .HasColumnType("boolean");

                    b.Property<string>("Techniques")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tools")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Phase", "EnvironmentType");

                    b.ToTable("KillChainActivities");
                });

            modelBuilder.Entity("CyberRiskApp.Models.LossEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AleMaximum")
                        .HasColumnType("double precision");

                    b.Property<double>("AleMinimum")
                        .HasColumnType("double precision");

                    b.Property<double>("AleMostLikely")
                        .HasColumnType("double precision");

                    b.Property<string>("BusinessImpactCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomTechnique")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DataSources")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DetectiveControls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("LefMaximum")
                        .HasColumnType("double precision");

                    b.Property<double>("LefMinimum")
                        .HasColumnType("double precision");

                    b.Property<double>("LefMostLikely")
                        .HasColumnType("double precision");

                    b.Property<string>("LossType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("MitreTechniqueId")
                        .HasColumnType("integer");

                    b.Property<string>("PreventativeControls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("PrimaryLossMaximum")
                        .HasColumnType("double precision");

                    b.Property<double?>("PrimaryLossMinimum")
                        .HasColumnType("double precision");

                    b.Property<double?>("PrimaryLossMostLikely")
                        .HasColumnType("double precision");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<double?>("SecondaryLossMaximum")
                        .HasColumnType("double precision");

                    b.Property<double?>("SecondaryLossMinimum")
                        .HasColumnType("double precision");

                    b.Property<double?>("SecondaryLossMostLikely")
                        .HasColumnType("double precision");

                    b.Property<int?>("ThreatScenarioId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MitreTechniqueId");

                    b.HasIndex("ThreatScenarioId");

                    b.ToTable("LossEvents");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Assessor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("BusinessOrganizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaturityFrameworkId")
                        .HasColumnType("integer");

                    b.Property<decimal>("OverallMaturityScore")
                        .HasColumnType("numeric");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessOrganizationId");

                    b.HasIndex("MaturityFrameworkId");

                    b.ToTable("MaturityAssessments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ControlId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("HelpText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImplementationGuidance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaturityFrameworkId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Subcategory")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("MaturityFrameworkId");

                    b.ToTable("MaturityControls");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityControlAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("AssessmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CurrentMaturityLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Evidence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GapNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaturityAssessmentId")
                        .HasColumnType("integer");

                    b.Property<int>("MaturityControlId")
                        .HasColumnType("integer");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ProjectNeeded")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RecommendedActions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int?>("TShirtSize")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TargetCompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TargetMaturityLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("MaturityAssessmentId");

                    b.HasIndex("MaturityControlId");

                    b.ToTable("MaturityControlAssessments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityFramework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("MaturityFrameworks");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MitreTechnique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DataSources")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Detection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Examples")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FrameworkType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubTechnique")
                        .HasColumnType("boolean");

                    b.Property<string>("Mitigation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ParentTechniqueId")
                        .HasColumnType("integer");

                    b.Property<string>("Platforms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tactic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TechniqueId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentTechniqueId");

                    b.HasIndex("TechniqueId")
                        .IsUnique();

                    b.ToTable("MitreTechniques");
                });

            modelBuilder.Entity("CyberRiskApp.Models.QualitativeControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ControlDescription")
                        .HasColumnType("text");

                    b.Property<string>("ControlName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ControlType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImplementationStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RiskAssessmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.ToTable("QualitativeControls");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ReferenceDataEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Category", "Value")
                        .IsUnique()
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("ReferenceDataEntries");
                });

            modelBuilder.Entity("CyberRiskApp.Models.Risk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ALE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CIATriad")
                        .HasColumnType("integer");

                    b.Property<string>("ClosedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Exposure")
                        .HasColumnType("integer");

                    b.Property<int?>("FindingId")
                        .HasColumnType("integer")
                        .HasColumnName("FindingId");

                    b.Property<int>("Impact")
                        .HasColumnType("integer");

                    b.Property<int>("InherentRiskLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Likelihood")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RemediationDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ResidualRiskLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("RiskAssessmentId")
                        .HasColumnType("integer")
                        .HasColumnName("RiskAssessmentId");

                    b.Property<string>("RiskAssessmentReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<string>("RiskNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("ThreatScenario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ThreatScenarioId")
                        .HasColumnType("integer")
                        .HasColumnName("ThreatScenarioId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Treatment")
                        .HasColumnType("integer");

                    b.Property<string>("TreatmentPlan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FindingId");

                    b.HasIndex("RiskAssessmentId");

                    b.HasIndex("ThreatScenarioId");

                    b.ToTable("Risks", (string)null);
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskAcceptanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignmentNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessNeed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CISORecommendation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentCompensatingControls")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("CurrentRiskLevelWithControls")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FindingId")
                        .HasColumnType("integer");

                    b.Property<int?>("FutureRiskLevelWithMitigations")
                        .HasColumnType("integer");

                    b.Property<int?>("LinkedRiskAssessmentId")
                        .HasColumnType("integer");

                    b.Property<string>("ProposedCompensatingControls")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Requester")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ReviewComments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("RiskId")
                        .HasColumnType("integer");

                    b.Property<string>("RiskSummary")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TreatmentPlan")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("FindingId");

                    b.HasIndex("LinkedRiskAssessmentId");

                    b.HasIndex("RiskId");

                    b.ToTable("RiskAcceptanceRequests");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessmentType")
                        .HasColumnType("integer");

                    b.Property<string>("Assessor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("BusinessOwner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CIATriad")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FindingId")
                        .HasColumnType("integer")
                        .HasColumnName("FindingId");

                    b.Property<bool>("GenerateRisksForRegister")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("QualitativeExposure")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("QualitativeImpact")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("QualitativeLikelihood")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("QualitativeRiskScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("RiskMatrixId")
                        .HasColumnType("integer");

                    b.Property<bool>("RisksGenerated")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RisksGeneratedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TechnicalControlsInPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThreatScenario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FindingId");

                    b.HasIndex("RiskMatrixId");

                    b.ToTable("RiskAssessments", (string)null);
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskAssessmentThreatModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ALEMaximum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ALEMinimum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ALEMostLikely")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("LEFValue")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("LossEventData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RiskAssessmentId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateAttackChainId")
                        .HasColumnType("integer");

                    b.Property<string>("ThreatEventData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VulnerabilitiesData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.HasIndex("TemplateAttackChainId");

                    b.ToTable("RiskAssessmentThreatModels");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskBacklogActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AdditionalDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("BacklogEntryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FromValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("ToValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BacklogEntryId");

                    b.ToTable("RiskBacklogActivities");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskBacklogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BacklogEntryId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BacklogEntryId");

                    b.ToTable("RiskBacklogComments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskBacklogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<string>("AnalystComments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedToAnalyst")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AssignedToManager")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BacklogNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSLABreached")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerComments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestJustification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequesterUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("RiskId")
                        .HasColumnType("integer");

                    b.Property<int?>("RiskSource")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RiskId");

                    b.ToTable("RiskBacklogEntries");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskLevelSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CybersecurityInsuranceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("FairCriticalThreshold")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FairHighThreshold")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FairMediumThreshold")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FairRiskAppetiteThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceCoverageLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceCoveragePercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InsuranceDeductible")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InsuranceEnabledByDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("QualitativeCriticalThreshold")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QualitativeHighThreshold")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QualitativeMediumThreshold")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RiskAppetiteThreshold")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("RiskLevelSettings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("MatrixSize")
                        .HasColumnType("integer");

                    b.Property<int>("MatrixType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("RiskMatrices");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskMatrixCell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CellColor")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ExposureLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ImpactLevel")
                        .HasColumnType("integer");

                    b.Property<int>("LikelihoodLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ResultingRiskLevel")
                        .HasColumnType("integer");

                    b.Property<int>("RiskMatrixId")
                        .HasColumnType("integer");

                    b.Property<decimal>("RiskScore")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("RiskMatrixId", "ImpactLevel", "LikelihoodLevel")
                        .IsUnique()
                        .HasFilter("\"ExposureLevel\" IS NULL");

                    b.HasIndex("RiskMatrixId", "ImpactLevel", "LikelihoodLevel", "ExposureLevel")
                        .IsUnique()
                        .HasFilter("\"ExposureLevel\" IS NOT NULL");

                    b.ToTable("RiskMatrixCells");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskMatrixLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("LevelType")
                        .HasColumnType("integer");

                    b.Property<decimal>("LevelValue")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("Multiplier")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("RiskMatrixId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RiskMatrixId", "LevelType", "LevelValue")
                        .IsUnique();

                    b.ToTable("RiskMatrixLevels");
                });

            modelBuilder.Entity("CyberRiskApp.Models.SSLCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PrivateKeyData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Thumbprint")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SSLCertificates");
                });

            modelBuilder.Entity("CyberRiskApp.Models.SSLSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveCertificateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EnableHttpsRedirection")
                        .HasColumnType("boolean");

                    b.Property<int>("HttpsPort")
                        .HasColumnType("integer");

                    b.Property<bool>("RequireHttps")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActiveCertificateId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("SSLSettings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ScenarioRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackScenarioId")
                        .HasColumnType("integer");

                    b.Property<string>("ComplianceAlignment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Dependencies")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EstimatedEffortHours")
                        .HasColumnType("integer");

                    b.Property<string>("Implementation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prerequisites")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("RiskReductionPercentage")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TargetCompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AttackScenarioId");

                    b.ToTable("ScenarioRecommendations");
                });

            modelBuilder.Entity("CyberRiskApp.Models.StrategyGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CurrentMaturityLevel")
                        .HasColumnType("integer");

                    b.Property<string>("FunctionDomain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MaturityFrameworkId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StrategyPlanId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TargetMaturityLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("MaturityFrameworkId");

                    b.HasIndex("StrategyPlanId");

                    b.ToTable("StrategyGoals");
                });

            modelBuilder.Entity("CyberRiskApp.Models.StrategyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessOrganizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("SpentBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessOrganizationId");

                    b.ToTable("StrategyPlans");
                });

            modelBuilder.Entity("CyberRiskApp.Models.TechnicalControlComplianceMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplianceControlId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImplementationNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MappingRationale")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TechnicalControlId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComplianceControlId");

                    b.HasIndex("TechnicalControlId", "ComplianceControlId")
                        .IsUnique()
                        .HasFilter("\"IsActive\" = true");

                    b.ToTable("TechnicalControlComplianceMappings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.TechniqueEnvironmentMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomImplementation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DetectionMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("integer");

                    b.Property<string>("EnvironmentSpecificNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ImplementationDifficulty")
                        .HasColumnType("integer");

                    b.Property<bool>("IsApplicable")
                        .HasColumnType("boolean");

                    b.Property<int>("MitreTechniqueId")
                        .HasColumnType("integer");

                    b.Property<string>("PreventionMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RiskScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("MitreTechniqueId");

                    b.ToTable("TechniqueEnvironmentMappings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThirdParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BIARating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RepresentativeEmail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<string>("TPRAHyperlink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TPRAStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ThirdParties");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatEnvironment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnvironmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSegmented")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NetworkDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityControls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ThreatModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ThreatModelId", "EnvironmentType");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomTechnique")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DataSources")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DetectiveControls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MitreTechniqueId")
                        .HasColumnType("integer");

                    b.Property<int?>("NextVulnerabilityId")
                        .HasColumnType("integer");

                    b.Property<string>("PreventativeControls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<double>("TefMaximum")
                        .HasColumnType("double precision");

                    b.Property<double>("TefMinimum")
                        .HasColumnType("double precision");

                    b.Property<double>("TefMostLikely")
                        .HasColumnType("double precision");

                    b.Property<int?>("ThreatScenarioId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MitreTechniqueId");

                    b.HasIndex("NextVulnerabilityId");

                    b.HasIndex("ThreatScenarioId");

                    b.ToTable("ThreatEvents");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AssetOwner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("AssetValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Framework")
                        .HasColumnType("integer");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MitreFrameworkType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ReviewNotes")
                        .HasColumnType("text");

                    b.Property<int?>("RiskAssessmentId")
                        .HasColumnType("integer")
                        .HasColumnName("RiskAssessmentId");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.ToTable("ThreatModels");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("QualitativeExposure")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("QualitativeImpact")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("QualitativeLikelihood")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("QualitativeRiskScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("RiskAssessmentId")
                        .HasColumnType("integer")
                        .HasColumnName("RiskAssessmentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValueSql("'\\x0000000000000001'::bytea");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RiskAssessmentId");

                    b.ToTable("ThreatScenarios", (string)null);
                });

            modelBuilder.Entity("CyberRiskApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AttackScenarioMitreTechnique", b =>
                {
                    b.HasOne("CyberRiskApp.Models.AttackScenario", null)
                        .WithMany()
                        .HasForeignKey("AttackScenariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.MitreTechnique", null)
                        .WithMany()
                        .HasForeignKey("MitreTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CyberRiskApp.Models.AssessmentRequest", b =>
                {
                    b.HasOne("CyberRiskApp.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId");

                    b.HasOne("CyberRiskApp.Models.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToUser");
                });

            modelBuilder.Entity("CyberRiskApp.Models.Attack", b =>
                {
                    b.HasOne("CyberRiskApp.Models.Finding", "LinkedFinding")
                        .WithMany()
                        .HasForeignKey("FindingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Attacks_Findings_FindingId");

                    b.HasOne("CyberRiskApp.Models.Risk", "LinkedRisk")
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Attacks_Risks_RiskId");

                    b.HasOne("CyberRiskApp.Models.ThreatModel", "ThreatModel")
                        .WithMany("Attacks")
                        .HasForeignKey("ThreatModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedFinding");

                    b.Navigation("LinkedRisk");

                    b.Navigation("ThreatModel");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackChain", b =>
                {
                    b.HasOne("CyberRiskApp.Models.ThreatEnvironment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("CyberRiskApp.Models.LossEvent", "LossEvent")
                        .WithMany("AttackChains")
                        .HasForeignKey("LossEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.RiskAssessment", "RiskAssessment")
                        .WithMany()
                        .HasForeignKey("RiskAssessmentId");

                    b.HasOne("CyberRiskApp.Models.ThreatEvent", "ThreatEvent")
                        .WithMany("AttackChains")
                        .HasForeignKey("ThreatEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("LossEvent");

                    b.Navigation("RiskAssessment");

                    b.Navigation("ThreatEvent");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackChainStep", b =>
                {
                    b.HasOne("CyberRiskApp.Models.AttackChain", "AttackChain")
                        .WithMany("AttackChainSteps")
                        .HasForeignKey("AttackChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.AttackStepVulnerability", "Vulnerability")
                        .WithMany()
                        .HasForeignKey("VulnerabilityId");

                    b.Navigation("AttackChain");

                    b.Navigation("Vulnerability");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackPath", b =>
                {
                    b.HasOne("CyberRiskApp.Models.AttackScenario", "AttackScenario")
                        .WithMany("AttackPaths")
                        .HasForeignKey("AttackScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.ThreatEnvironment", "SourceEnvironment")
                        .WithMany("SourcePaths")
                        .HasForeignKey("SourceEnvironmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.ThreatEnvironment", "TargetEnvironment")
                        .WithMany("TargetPaths")
                        .HasForeignKey("TargetEnvironmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttackScenario");

                    b.Navigation("SourceEnvironment");

                    b.Navigation("TargetEnvironment");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackScenario", b =>
                {
                    b.HasOne("CyberRiskApp.Models.ThreatModel", "ThreatModel")
                        .WithMany("AttackScenarios")
                        .HasForeignKey("ThreatModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThreatModel");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackScenarioStep", b =>
                {
                    b.HasOne("CyberRiskApp.Models.AttackScenario", "AttackScenario")
                        .WithMany("Steps")
                        .HasForeignKey("AttackScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.KillChainActivity", "KillChainActivity")
                        .WithMany("ScenarioSteps")
                        .HasForeignKey("KillChainActivityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CyberRiskApp.Models.MitreTechnique", "MitreTechnique")
                        .WithMany()
                        .HasForeignKey("MitreTechniqueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AttackScenario");

                    b.Navigation("KillChainActivity");

                    b.Navigation("MitreTechnique");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackStepVulnerability", b =>
                {
                    b.HasOne("CyberRiskApp.Models.LossEvent", "LossEvent")
                        .WithMany("AttackStepVulnerabilities")
                        .HasForeignKey("LossEventId");

                    b.HasOne("CyberRiskApp.Models.MitreTechnique", "MitreTechnique")
                        .WithMany()
                        .HasForeignKey("MitreTechniqueId");

                    b.HasOne("CyberRiskApp.Models.AttackStepVulnerability", "NextVulnerability")
                        .WithMany("PreviousVulnerabilities")
                        .HasForeignKey("NextVulnerabilityId");

                    b.Navigation("LossEvent");

                    b.Navigation("MitreTechnique");

                    b.Navigation("NextVulnerability");
                });

            modelBuilder.Entity("CyberRiskApp.Models.CapabilityControlMapping", b =>
                {
                    b.HasOne("CyberRiskApp.Models.CapabilityRequirement", "CapabilityRequirement")
                        .WithMany("ControlMappings")
                        .HasForeignKey("CapabilityRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.ComplianceControl", "ComplianceControl")
                        .WithMany("CapabilityMappings")
                        .HasForeignKey("ComplianceControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CapabilityRequirement");

                    b.Navigation("ComplianceControl");
                });

            modelBuilder.Entity("CyberRiskApp.Models.CapabilityRequirement", b =>
                {
                    b.HasOne("CyberRiskApp.Models.StrategyGoal", "StrategyGoal")
                        .WithMany("Capabilities")
                        .HasForeignKey("StrategyGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrategyGoal");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ComplianceAssessment", b =>
                {
                    b.HasOne("CyberRiskApp.Models.BusinessOrganization", "Organization")
                        .WithMany("Assessments")
                        .HasForeignKey("BusinessOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.ComplianceFramework", "Framework")
                        .WithMany("Assessments")
                        .HasForeignKey("ComplianceFrameworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ComplianceControl", b =>
                {
                    b.HasOne("CyberRiskApp.Models.ComplianceFramework", "Framework")
                        .WithMany("Controls")
                        .HasForeignKey("ComplianceFrameworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ControlAssessment", b =>
                {
                    b.HasOne("CyberRiskApp.Models.ComplianceAssessment", "Assessment")
                        .WithMany("ControlAssessments")
                        .HasForeignKey("ComplianceAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.ComplianceControl", "Control")
                        .WithMany("Assessments")
                        .HasForeignKey("ComplianceControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Control");
                });

            modelBuilder.Entity("CyberRiskApp.Models.DomainAlias", b =>
                {
                    b.HasOne("CyberRiskApp.Models.ApplicationDomain", "ApplicationDomain")
                        .WithMany("Aliases")
                        .HasForeignKey("ApplicationDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationDomain");
                });

            modelBuilder.Entity("CyberRiskApp.Models.FindingClosureRequest", b =>
                {
                    b.HasOne("CyberRiskApp.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CyberRiskApp.Models.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CyberRiskApp.Models.Finding", "LinkedFinding")
                        .WithMany()
                        .HasForeignKey("FindingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToUser");

                    b.Navigation("LinkedFinding");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ImplementationMilestone", b =>
                {
                    b.HasOne("CyberRiskApp.Models.StrategyPlan", "StrategyPlan")
                        .WithMany("Milestones")
                        .HasForeignKey("StrategyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrategyPlan");
                });

            modelBuilder.Entity("CyberRiskApp.Models.LossEvent", b =>
                {
                    b.HasOne("CyberRiskApp.Models.MitreTechnique", "MitreTechnique")
                        .WithMany()
                        .HasForeignKey("MitreTechniqueId");

                    b.HasOne("CyberRiskApp.Models.ThreatScenario", "ThreatScenario")
                        .WithMany("LossEvents")
                        .HasForeignKey("ThreatScenarioId");

                    b.Navigation("MitreTechnique");

                    b.Navigation("ThreatScenario");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityAssessment", b =>
                {
                    b.HasOne("CyberRiskApp.Models.BusinessOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("BusinessOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.MaturityFramework", "Framework")
                        .WithMany("Assessments")
                        .HasForeignKey("MaturityFrameworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityControl", b =>
                {
                    b.HasOne("CyberRiskApp.Models.MaturityFramework", "Framework")
                        .WithMany("Controls")
                        .HasForeignKey("MaturityFrameworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityControlAssessment", b =>
                {
                    b.HasOne("CyberRiskApp.Models.MaturityAssessment", "Assessment")
                        .WithMany("ControlAssessments")
                        .HasForeignKey("MaturityAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.MaturityControl", "Control")
                        .WithMany("Assessments")
                        .HasForeignKey("MaturityControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Control");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MitreTechnique", b =>
                {
                    b.HasOne("CyberRiskApp.Models.MitreTechnique", "ParentTechnique")
                        .WithMany("SubTechniques")
                        .HasForeignKey("ParentTechniqueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentTechnique");
                });

            modelBuilder.Entity("CyberRiskApp.Models.QualitativeControl", b =>
                {
                    b.HasOne("CyberRiskApp.Models.RiskAssessment", "RiskAssessment")
                        .WithMany("QualitativeControls")
                        .HasForeignKey("RiskAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskAssessment");
                });

            modelBuilder.Entity("CyberRiskApp.Models.Risk", b =>
                {
                    b.HasOne("CyberRiskApp.Models.Finding", "LinkedFinding")
                        .WithMany("RelatedRisks")
                        .HasForeignKey("FindingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Risks_Findings_FindingId");

                    b.HasOne("CyberRiskApp.Models.RiskAssessment", "LinkedAssessment")
                        .WithMany("IdentifiedRisks")
                        .HasForeignKey("RiskAssessmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Risks_RiskAssessments_RiskAssessmentId");

                    b.HasOne("CyberRiskApp.Models.ThreatScenario", "LinkedThreatScenario")
                        .WithMany("IdentifiedRisks")
                        .HasForeignKey("ThreatScenarioId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Risks_ThreatScenarios_ThreatScenarioId");

                    b.Navigation("LinkedAssessment");

                    b.Navigation("LinkedFinding");

                    b.Navigation("LinkedThreatScenario");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskAcceptanceRequest", b =>
                {
                    b.HasOne("CyberRiskApp.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CyberRiskApp.Models.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CyberRiskApp.Models.Finding", "LinkedFinding")
                        .WithMany("AcceptanceRequests")
                        .HasForeignKey("FindingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CyberRiskApp.Models.RiskAssessment", "LinkedRiskAssessment")
                        .WithMany()
                        .HasForeignKey("LinkedRiskAssessmentId");

                    b.HasOne("CyberRiskApp.Models.Risk", "LinkedRisk")
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToUser");

                    b.Navigation("LinkedFinding");

                    b.Navigation("LinkedRisk");

                    b.Navigation("LinkedRiskAssessment");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskAssessment", b =>
                {
                    b.HasOne("CyberRiskApp.Models.Finding", "LinkedFinding")
                        .WithMany()
                        .HasForeignKey("FindingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_RiskAssessments_Findings_FindingId");

                    b.HasOne("CyberRiskApp.Models.RiskMatrix", "RiskMatrix")
                        .WithMany()
                        .HasForeignKey("RiskMatrixId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_RiskAssessments_RiskMatrices_RiskMatrixId");

                    b.Navigation("LinkedFinding");

                    b.Navigation("RiskMatrix");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskAssessmentThreatModel", b =>
                {
                    b.HasOne("CyberRiskApp.Models.RiskAssessment", "RiskAssessment")
                        .WithMany("ThreatModels")
                        .HasForeignKey("RiskAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.AttackChain", "TemplateAttackChain")
                        .WithMany()
                        .HasForeignKey("TemplateAttackChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskAssessment");

                    b.Navigation("TemplateAttackChain");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskBacklogActivity", b =>
                {
                    b.HasOne("CyberRiskApp.Models.RiskBacklogEntry", "BacklogEntry")
                        .WithMany("Activities")
                        .HasForeignKey("BacklogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BacklogEntry");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskBacklogComment", b =>
                {
                    b.HasOne("CyberRiskApp.Models.RiskBacklogEntry", "BacklogEntry")
                        .WithMany("Comments")
                        .HasForeignKey("BacklogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BacklogEntry");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskBacklogEntry", b =>
                {
                    b.HasOne("CyberRiskApp.Models.Risk", "Risk")
                        .WithMany()
                        .HasForeignKey("RiskId");

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskMatrixCell", b =>
                {
                    b.HasOne("CyberRiskApp.Models.RiskMatrix", "RiskMatrix")
                        .WithMany("MatrixCells")
                        .HasForeignKey("RiskMatrixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskMatrix");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskMatrixLevel", b =>
                {
                    b.HasOne("CyberRiskApp.Models.RiskMatrix", "RiskMatrix")
                        .WithMany("Levels")
                        .HasForeignKey("RiskMatrixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskMatrix");
                });

            modelBuilder.Entity("CyberRiskApp.Models.SSLSettings", b =>
                {
                    b.HasOne("CyberRiskApp.Models.SSLCertificate", "ActiveCertificate")
                        .WithMany()
                        .HasForeignKey("ActiveCertificateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ActiveCertificate");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ScenarioRecommendation", b =>
                {
                    b.HasOne("CyberRiskApp.Models.AttackScenario", "AttackScenario")
                        .WithMany("Recommendations")
                        .HasForeignKey("AttackScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttackScenario");
                });

            modelBuilder.Entity("CyberRiskApp.Models.StrategyGoal", b =>
                {
                    b.HasOne("CyberRiskApp.Models.MaturityFramework", "MaturityFramework")
                        .WithMany()
                        .HasForeignKey("MaturityFrameworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.StrategyPlan", "StrategyPlan")
                        .WithMany("Goals")
                        .HasForeignKey("StrategyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaturityFramework");

                    b.Navigation("StrategyPlan");
                });

            modelBuilder.Entity("CyberRiskApp.Models.StrategyPlan", b =>
                {
                    b.HasOne("CyberRiskApp.Models.BusinessOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("BusinessOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CyberRiskApp.Models.TechnicalControlComplianceMapping", b =>
                {
                    b.HasOne("CyberRiskApp.Models.ComplianceControl", "ComplianceControl")
                        .WithMany()
                        .HasForeignKey("ComplianceControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.ReferenceDataEntry", "TechnicalControl")
                        .WithMany()
                        .HasForeignKey("TechnicalControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplianceControl");

                    b.Navigation("TechnicalControl");
                });

            modelBuilder.Entity("CyberRiskApp.Models.TechniqueEnvironmentMapping", b =>
                {
                    b.HasOne("CyberRiskApp.Models.ThreatEnvironment", "Environment")
                        .WithMany("TechniqueMappings")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.MitreTechnique", "MitreTechnique")
                        .WithMany("EnvironmentMappings")
                        .HasForeignKey("MitreTechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("MitreTechnique");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatEnvironment", b =>
                {
                    b.HasOne("CyberRiskApp.Models.ThreatModel", "ThreatModel")
                        .WithMany()
                        .HasForeignKey("ThreatModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThreatModel");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatEvent", b =>
                {
                    b.HasOne("CyberRiskApp.Models.MitreTechnique", "MitreTechnique")
                        .WithMany()
                        .HasForeignKey("MitreTechniqueId");

                    b.HasOne("CyberRiskApp.Models.AttackStepVulnerability", "NextVulnerability")
                        .WithMany("ThreatEvents")
                        .HasForeignKey("NextVulnerabilityId");

                    b.HasOne("CyberRiskApp.Models.ThreatScenario", "ThreatScenario")
                        .WithMany("ThreatEvents")
                        .HasForeignKey("ThreatScenarioId");

                    b.Navigation("MitreTechnique");

                    b.Navigation("NextVulnerability");

                    b.Navigation("ThreatScenario");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatModel", b =>
                {
                    b.HasOne("CyberRiskApp.Models.RiskAssessment", "LinkedRiskAssessment")
                        .WithMany("LinkedThreatModels")
                        .HasForeignKey("RiskAssessmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ThreatModels_RiskAssessments_RiskAssessmentId");

                    b.Navigation("LinkedRiskAssessment");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatScenario", b =>
                {
                    b.HasOne("CyberRiskApp.Models.RiskAssessment", "RiskAssessment")
                        .WithMany("ThreatScenarios")
                        .HasForeignKey("RiskAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ThreatScenarios_RiskAssessments_RiskAssessmentId");

                    b.Navigation("RiskAssessment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CyberRiskApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CyberRiskApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberRiskApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CyberRiskApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CyberRiskApp.Models.ApplicationDomain", b =>
                {
                    b.Navigation("Aliases");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackChain", b =>
                {
                    b.Navigation("AttackChainSteps");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackScenario", b =>
                {
                    b.Navigation("AttackPaths");

                    b.Navigation("Recommendations");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("CyberRiskApp.Models.AttackStepVulnerability", b =>
                {
                    b.Navigation("PreviousVulnerabilities");

                    b.Navigation("ThreatEvents");
                });

            modelBuilder.Entity("CyberRiskApp.Models.BusinessOrganization", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.CapabilityRequirement", b =>
                {
                    b.Navigation("ControlMappings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ComplianceAssessment", b =>
                {
                    b.Navigation("ControlAssessments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ComplianceControl", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("CapabilityMappings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ComplianceFramework", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Controls");
                });

            modelBuilder.Entity("CyberRiskApp.Models.Finding", b =>
                {
                    b.Navigation("AcceptanceRequests");

                    b.Navigation("RelatedRisks");
                });

            modelBuilder.Entity("CyberRiskApp.Models.KillChainActivity", b =>
                {
                    b.Navigation("ScenarioSteps");
                });

            modelBuilder.Entity("CyberRiskApp.Models.LossEvent", b =>
                {
                    b.Navigation("AttackChains");

                    b.Navigation("AttackStepVulnerabilities");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityAssessment", b =>
                {
                    b.Navigation("ControlAssessments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityControl", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MaturityFramework", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Controls");
                });

            modelBuilder.Entity("CyberRiskApp.Models.MitreTechnique", b =>
                {
                    b.Navigation("EnvironmentMappings");

                    b.Navigation("SubTechniques");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskAssessment", b =>
                {
                    b.Navigation("IdentifiedRisks");

                    b.Navigation("LinkedThreatModels");

                    b.Navigation("QualitativeControls");

                    b.Navigation("ThreatModels");

                    b.Navigation("ThreatScenarios");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskBacklogEntry", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CyberRiskApp.Models.RiskMatrix", b =>
                {
                    b.Navigation("Levels");

                    b.Navigation("MatrixCells");
                });

            modelBuilder.Entity("CyberRiskApp.Models.StrategyGoal", b =>
                {
                    b.Navigation("Capabilities");
                });

            modelBuilder.Entity("CyberRiskApp.Models.StrategyPlan", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatEnvironment", b =>
                {
                    b.Navigation("SourcePaths");

                    b.Navigation("TargetPaths");

                    b.Navigation("TechniqueMappings");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatEvent", b =>
                {
                    b.Navigation("AttackChains");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatModel", b =>
                {
                    b.Navigation("AttackScenarios");

                    b.Navigation("Attacks");
                });

            modelBuilder.Entity("CyberRiskApp.Models.ThreatScenario", b =>
                {
                    b.Navigation("IdentifiedRisks");

                    b.Navigation("LossEvents");

                    b.Navigation("ThreatEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
